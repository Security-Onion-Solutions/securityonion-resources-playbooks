name: ET WEB_SPECIFIC_APPS WordPress SQL Injection Attempt -- admin-functions.php UNION SELECT
id: 1209546
description: |
  Detects HTTP requests to WordPress admin-functions.php containing UNION SELECT SQL injection patterns.
  May trigger on legitimate database administration tools or security testing against WordPress installations.
type: detection
detection_id: 2004404
detection_category: ''
detection_type: nids
contributors:
- SecurityOnionSolutions
created: 2024-01-15
questions:
- question: What was the complete SQL injection payload in the admin-functions.php request?
  context: Reveals the specific UNION SELECT pattern and potential data extraction targets.
  range: +/-15m
  query: |
    aggregation: false
    logsource:
      category: network
      service: http
    detection:
      selection:
        community_id|expand: '%community_id%'
      condition: selection
    fields:
      - http.method
      - http.useragent
      - http.virtual_host
      - http.uri
      - http.status_code
- question: Does this host normally access WordPress admin interfaces?
  context: Determines if administrative access to WordPress represents normal activity patterns.
  range: -7d
  query: |
    aggregation: true
    logsource:
      category: network
      service: http
    detection:
      selection:
        dst_ip|expand: '%dst_ip%'
      condition: selection
    fields:
      - dst_ip
- question: What web server process handled the SQL injection request?
  context: Identifies the WordPress installation and web server configuration processing the request.
  range: +/-15m
  query: |
    aggregation: false
    logsource:
      category: network
    detection:
      selection:
        community_id|expand: '%community_id%'
      filter:
        Image|exists: true
      condition: selection and filter
    fields:
      - hostname
      - User
      - Image
      - CommandLine
      - ProcessGuid
- question: What DNS queries preceded this WordPress attack attempt?
  context: Shows how the attacker discovered or accessed the WordPress installation.
  range: -5m
  query: |
    aggregation: false
    logsource:
      category: network
      service: dns
    detection:
      selection:
        src_ip|expand: '%src_ip%'
      condition: selection
    fields:
      - dns.query.name
      - dns.query.type_name
      - dns.resolved_ip
- question: What other HTTP requests occurred from this source IP?
  context: Identifies additional web application testing or exploitation attempts.
  range: +/-2h
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        src_ip|expand: '%src_ip%'
    fields:
    - http.method
    - http.uri
    - http.user_agent
    - http.status_code
    logsource:
      category: network
      service: http
- question: Are other WordPress installations receiving similar SQL injection attempts?
  context: Determines scope of automated WordPress exploitation campaign.
  range: +/-24h
  query: |
    aggregation: true
    logsource:
      category: alert
    detection:
      selection:
        dst_ip|expand: '%public_ip%'
      condition: selection
    fields:
      - src_ip
      - rule.name
      - rule.category
- question: What files were accessed on the web server after the SQL injection attempt?
  context: Assesses whether the injection resulted in file system access or data extraction.
  range: +1h
  query: |
    aggregation: false
    logsource:
      category: file_event
    detection:
      selection:
        host.ip|expand: '%private_ip%'
        file.name|endswith:
        - .doc
        - .docx
        - .xls
        - .xlsx
        - .pdf
        - .rtf
        - .ppt
        - .pptx
      condition: selection
    fields:
      - file.path
      - file.name
      - Image
      - ProcessGuid
      - User
- question: Did any database-related processes execute after the injection attempt?
  context: Identifies potential database compromise or data extraction activities.
  range: +30m
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        Image|contains:
        - mysql
        - mysqldump
        - sqlite
        - postgres
        - psql
        host.ip|expand: '%dst_ip%'
    fields:
    - Image
    - CommandLine
    - User
    logsource:
      category: process_creation
- question: Were any WordPress configuration files modified after the attack?
  context: Determines if the SQL injection led to configuration changes or backdoor installation.
  range: +2h
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        file.path|contains:
        - wp-config
        - functions.php
        - .htaccess
        - wp-admin
        host.ip|expand: '%dst_ip%'
    fields:
    - file.path
    - file.name
    - Image
    logsource:
      category: file_event
- question: Did lateral movement occur from the WordPress server?
  context: Assesses whether successful exploitation led to network propagation.
  range: +4h
  query: |
    aggregation: false
    logsource:
      category: network
      service: connection
    detection:
      selection:
        src_ip|expand: '%private_ip%'
        dst_port:
        - 445    # SMB
        - 139    # NetBIOS
        - 3389   # RDP
        - 5985   # WinRM HTTP
        - 5986   # WinRM HTTPS
        - 22     # SSH
        - 23     # Telnet
        - 135    # RPC
        - 5900   # VNC
      condition: selection
    fields:
      - src_ip
      - src_port
      - dst_ip
      - dst_port
      - network.transport
- question: What persistence mechanisms were established on the web server?
  context: Identifies scheduled tasks or services that could maintain access.
  range: +2h
  query: |
    aggregation: false
    logsource:
      category: process_creation
    detection:
      selection:
        host.ip|expand: '%private_ip%'
        Image|endswith:
        - schtasks.exe
        - taskeng.exe
        - taskhostw.exe
      condition: selection
    fields:
      - CommandLine
      - Image
      - ProcessGuid
      - User
      - ParentImage