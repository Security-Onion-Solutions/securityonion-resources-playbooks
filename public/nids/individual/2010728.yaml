name: ET WEB_SPECIFIC_APPS WordPress wp-admin/admin.php Module Configuration Security Bypass Attempt
id: 1209782
description: |
  Detects attempts to bypass WordPress plugin security by accessing configuration files through admin.php.
  May trigger on legitimate WordPress administration or security scanning activities.
type: detection
detection_id: 2010728
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the exact URI path and parameters in the WordPress admin request?
    context: Reveals the specific plugin configuration file being accessed through the bypass attempt.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally access WordPress admin interfaces?
    context: Determines if administrative access to WordPress represents normal usage patterns.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - dst_ip
  - question: What other WordPress admin requests occurred from this source?
    context: Identifies additional administrative activities that may indicate broader exploitation attempts.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          http.uri|contains: "/wp-admin/"
        condition: selection
      fields:
        - http.uri
        - http.method
        - http.user_agent
        - http.status_code
  - question: Did the WordPress server respond successfully to the admin bypass attempt?
    context: Determines if the security bypass was successful based on HTTP response codes.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.uri|contains: "/wp-admin/admin.php"
        condition: selection
      fields:
        - http.status_code
        - http.response.body.length
        - http.uri
  - question: What other external connections occurred from this host after the WordPress request?
    context: Identifies potential follow-up activities or additional attack vectors.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%src_ip%'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip|expand: '%public_ip%'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Are other hosts attempting similar WordPress admin bypass techniques?
    context: Determines if this is part of a coordinated campaign targeting WordPress installations.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip|expand: '%public_ip%'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What files were accessed on the WordPress server during this timeframe?
    context: Identifies configuration files or plugins that may have been compromised.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip|expand: '%private_ip%'
          file.name|endswith:
          - .doc
          - .docx
          - .xls
          - .xlsx
          - .pdf
          - .rtf
          - .ppt
          - .pptx
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Did any WordPress-related processes execute commands after the admin request?
    context: Reveals potential code execution resulting from the security bypass.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
          Image|contains:
            - "php"
            - "apache"
            - "nginx"
            - "httpd"
        condition: selection
      fields:
        - Image
        - CommandLine
        - ParentImage
        - User
  - question: Were any WordPress plugin or configuration files modified?
    context: Identifies unauthorized changes to WordPress installation components.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
          file.path|contains:
            - "wp-content"
            - "wp-admin"
            - "wp-includes"
            - ".php"
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - User
  - question: What user-agent was used for the WordPress admin bypass attempt?
    context: Reveals automation tools or attack frameworks being used against WordPress.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          http.uri|contains: "/wp-admin/admin.php"
        condition: selection
      fields:
        - http.user_agent
        - http.method
        - http.uri
  - question: Are there signs of lateral movement from the WordPress server?
    context: Assesses whether successful exploitation led to further network compromise.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%private_ip%'
          dst_port:
          - 445    # SMB
          - 139    # NetBIOS
          - 3389   # RDP
          - 5985   # WinRM HTTP
          - 5986   # WinRM HTTPS
          - 22     # SSH
          - 23     # Telnet
          - 135    # RPC
          - 5900   # VNC
        condition: selection
      fields:
        - src_ip
        - src_port
        - dst_ip
        - dst_port
        - network.transport
  - question: What other WordPress vulnerabilities are being tested by this source?
    context: Identifies broader WordPress exploitation attempts from the same attacker.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          http.uri|contains:
            - "wp-"
            - "wordpress"
            - "xmlrpc.php"
            - "wp-login.php"
            - "wp-config"
        condition: selection
      fields:
        - http.uri
        - http.method
        - http.user_agent
        - dst_ip