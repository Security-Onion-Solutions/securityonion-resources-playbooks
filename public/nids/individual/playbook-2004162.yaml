name: ET WEB_SPECIFIC_APPS NetVIOS Portal SQL Injection Attempt -- page.asp NewsID ASCII
id: 22004162
description: |
  Detects SQL injection attempts targeting NetVIOS Portal's News page using ASCII function with SELECT statements in NewsID parameter.
  May trigger on legitimate database queries that use ASCII functions for character processing or data validation.
type: detection
detection_id: 2004162
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete ASCII-based SQL injection payload in the NewsID parameter?
    context: ASCII function injection is often used for blind SQL injection to extract data character by character.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - http.request.method

  - question: What specific data was being extracted using the ASCII function technique?
    context: ASCII-based extraction reveals targeted database columns and sensitive information being stolen.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  - question: Is this legitimate application functionality using ASCII character processing?
    context: Some applications legitimately use ASCII functions for data validation or character encoding operations.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/News/page.asp'
        condition: selection
      fields:
        - src_ip
        - user_agent.original

  - question: What pattern of ASCII-based queries indicates systematic data extraction?
    context: Blind SQL injection using ASCII functions typically involves iterative queries to extract data.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains: 'ASCII'
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - http.response.bytes

  - question: What was the sequence of blind SQL injection attempts using ASCII functions?
    context: Understanding the extraction sequence helps identify what data was successfully retrieved.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - url.query
        - http.response.status_code

  - question: Did the ASCII-based injection reveal sensitive database information?
    context: Successful blind injection can expose usernames, passwords, and other sensitive data.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.bytes

  - question: What database schema information was extracted through ASCII queries?
    context: ASCII-based injection often targets table names, column names, and database structure information.
    range: +15m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - 'table'
            - 'column'
            - 'schema'
        condition: selection
      fields:
        - url.query
        - http.response.bytes

  - question: What automation tools were used for this blind SQL injection attack?
    context: ASCII-based extraction typically requires automated tools due to the iterative nature of the technique.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - user_agent.original
        - http.request.referrer
        - http.request.headers

  - question: How many characters or data elements were successfully extracted?
    context: Quantifying extracted data helps assess the scope of information compromise.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains: 'ASCII'
          http.response.status_code: 200
        condition: selection
      fields:
        - url.query
        - http.response.bytes

  - question: What other blind SQL injection techniques were used alongside ASCII functions?
    context: Attackers often combine multiple blind injection techniques for comprehensive data extraction.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - url.full

  - question: Are similar ASCII-based extraction attempts occurring across other systems?
    context: Coordinated blind injection attacks indicate systematic reconnaissance across the organization.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'NetVIOS Portal SQL Injection'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name