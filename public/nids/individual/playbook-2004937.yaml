name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php commentname UNION SELECT
id: 22004937
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php script using UNION SELECT statements.
  This targets CVE-2006-6993 vulnerability in the commentname parameter.
  May trigger on legitimate database queries containing similar SQL syntax.
type: detection
detection_id: 2004937
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the complete SQL injection payload in the commentname parameter?
    context: Understanding the exact UNION SELECT payload reveals the attacker's intent and target database structure.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - http.request.method

  - question: What specific database columns or tables is the attacker attempting to access?
    context: Analyzing the UNION SELECT structure reveals what sensitive data the attacker is targeting.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  # Type 2: Triage Assessment
  - question: Is this normal administrative activity for the Neuron Blog application?
    context: Legitimate blog administration might involve comment management, but not SQL injection patterns.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: Does this source IP have a history of legitimate blog interactions?
    context: Established users typically don't perform SQL injection attacks against comment systems.
    range: -30d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - http.response.status_code
        - http.request.method

  # Type 3: Activity Context
  - question: What other web application attacks preceded this SQL injection attempt?
    context: SQL injection is often part of broader web application reconnaissance and exploitation.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          rule.category|contains: 'web-application-attack'
        condition: selection
      fields:
        - rule.name
        - url.path
        - http.request.method

  - question: Was there directory traversal or file enumeration before this attack?
    context: Attackers often perform reconnaissance to identify vulnerable scripts before SQL injection.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.response.status_code|contains:
            - 200
            - 403
            - 404
        condition: selection
      fields:
        - url.path
        - http.response.status_code
        - http.request.method

  # Type 4: Impact Assessment
  - question: Did the SQL injection attempt return database content or error messages?
    context: Successful SQL injection attempts will show different response patterns than failed attempts.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.bytes

  - question: Are there signs of successful database enumeration or data extraction?
    context: Multiple successful requests with varying payloads indicate progressive database compromise.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.response.status_code: 200
        condition: selection
      fields:
        - url.query
        - http.response.bytes
        - http.request.method

  # Type 5: Forensic Deep-Dive
  - question: What automated tools or frameworks are being used for this SQL injection?
    context: User-Agent strings and request patterns can reveal if this is manual testing or automated exploitation.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - http.request.headers.user_agent
        - http.request.headers.accept
        - http.request.headers.connection

  - question: Are there attempts to bypass web application firewalls or input validation?
    context: Advanced attackers use encoding or obfuscation techniques to evade security controls.
    range: +/-15m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - http.request.headers.content_type

  # Type 6: Enterprise Correlation
  - question: Are other web servers in the environment being targeted with similar SQL injection attempts?
    context: Coordinated attacks often target multiple systems with the same vulnerability.
    range: +/-1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path