name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php commentname INSERT
id: 22004938
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php script using INSERT INTO statements.
  This targets CVE-2006-6993 vulnerability in the commentname parameter for data insertion attacks.
  May trigger on legitimate database operations containing similar SQL syntax.
type: detection
detection_id: 2004938
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the complete INSERT INTO payload in the commentname parameter?
    context: Understanding the exact INSERT statement reveals what data the attacker is attempting to inject into the database.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - http.request.method

  - question: What table and column structure is the attacker targeting with the INSERT statement?
    context: Analyzing the INSERT syntax reveals the attacker's knowledge of the database schema.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  # Type 2: Triage Assessment
  - question: Is this normal comment submission activity for the blog application?
    context: Legitimate blog comments use standard form submissions, not SQL INSERT statements.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: Does this source IP have legitimate user session activity?
    context: Established blog users typically don't perform SQL injection attacks against comment systems.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.response.status_code: 200
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code

  # Type 3: Activity Context
  - question: What reconnaissance activity preceded this INSERT injection attempt?
    context: Attackers often perform database enumeration before attempting data insertion attacks.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          rule.category|contains: 'web-application-attack'
        condition: selection
      fields:
        - rule.name
        - url.path
        - http.request.method

  - question: Were there previous SQL injection attempts using different attack vectors?
    context: INSERT attacks often follow successful SELECT or UNION attacks to establish database access.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - rule.name
        - url.path
        - http.request.method

  # Type 4: Impact Assessment
  - question: Did the INSERT injection attempt successfully modify database content?
    context: Successful INSERT attacks will show different response patterns and may create persistent backdoors.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.bytes

  - question: Are there signs of malicious data insertion or backdoor creation?
    context: INSERT attacks may create administrative accounts or inject malicious content for persistent access.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.response.status_code: 200
        condition: selection
      fields:
        - url.query
        - http.response.bytes
        - http.request.method

  # Type 5: Forensic Deep-Dive
  - question: What specific data values is the attacker attempting to insert?
    context: The INSERT payload content reveals whether this is creating backdoors, injecting malicious content, or testing access.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - http.request.headers.content_type

  - question: Are there attempts to insert administrative credentials or escalate privileges?
    context: INSERT attacks often target user tables to create backdoor accounts with elevated privileges.
    range: +/-15m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - http.response.status_code

  # Type 6: Enterprise Correlation
  - question: Are other web applications being targeted with similar INSERT injection attacks?
    context: Coordinated campaigns often use the same attack patterns across multiple vulnerable applications.
    range: +/-1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'INSERT'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path