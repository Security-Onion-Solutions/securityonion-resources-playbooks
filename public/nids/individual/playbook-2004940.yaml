name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php commentname ASCII
id: 22004940
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php script using ASCII function with SELECT statements.
  This targets CVE-2006-6993 vulnerability in the commentname parameter for blind SQL injection attacks.
  May trigger on legitimate applications using ASCII functions for data processing.
type: detection
detection_id: 2004940
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the complete ASCII function payload in the commentname parameter?
    context: Understanding the ASCII-based payload reveals the blind SQL injection technique and target data extraction method.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - http.request.method

  - question: What specific data is the attacker attempting to extract using ASCII character conversion?
    context: ASCII function attacks are used for blind SQL injection to extract data character by character.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  # Type 2: Triage Assessment
  - question: Is this normal data processing activity for the blog application?
    context: Legitimate applications rarely use ASCII functions in user-submitted comment parameters.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: Does this source IP have legitimate user interaction patterns with the blog?
    context: Established users typically don't perform complex SQL function calls through comment forms.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.response.status_code: 200
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code

  # Type 3: Activity Context
  - question: What database enumeration preceded this ASCII-based blind injection?
    context: ASCII attacks typically follow successful identification of injectable parameters and database structure.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          rule.category|contains: 'web-application-attack'
        condition: selection
      fields:
        - rule.name
        - url.path
        - http.request.method

  - question: Were there systematic attempts to test different SQL injection vectors?
    context: Blind SQL injection attacks often involve multiple testing phases before settling on ASCII-based extraction.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - rule.name
        - url.path
        - http.request.method

  # Type 4: Impact Assessment
  - question: Are there signs of successful data extraction through ASCII-based blind injection?
    context: Successful blind injection shows patterns of repeated requests with incremental character position testing.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - http.response.bytes

  - question: Is there evidence of systematic character-by-character data extraction?
    context: Blind SQL injection creates distinctive patterns of repeated requests with slight variations in character positions.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.response.status_code: 200
        condition: selection
      fields:
        - url.query
        - http.response.bytes
        - http.request.method

  # Type 5: Forensic Deep-Dive
  - question: What automated tools are being used for this blind SQL injection attack?
    context: ASCII-based blind injection is typically performed with automated tools due to its repetitive nature.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - http.request.headers.user_agent
        - http.request.headers.accept
        - http.request.headers.connection

  - question: What specific database tables or columns is the attacker targeting for extraction?
    context: The ASCII function parameters reveal what sensitive data the attacker is attempting to steal.
    range: +/-15m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - http.response.status_code

  - question: Are there attempts to extract authentication credentials or sensitive user data?
    context: ASCII-based extraction is commonly used to steal passwords, usernames, and other sensitive database content.
    range: +/-30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - http.response.bytes

  # Type 6: Enterprise Correlation
  - question: Are other web applications being targeted with similar blind injection techniques?
    context: Coordinated attacks often use the same advanced techniques across multiple vulnerable systems.
    range: +/-1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'ASCII'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path