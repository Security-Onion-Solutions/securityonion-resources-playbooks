name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php commentmail SELECT
id: 22004942
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php script via the commentmail parameter using SELECT statements.
  May trigger on legitimate database queries if the parameter contains SQL keywords, but typically indicates exploitation attempts against CVE-2006-6993.
type: detection
detection_id: 2004942
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload in the commentmail parameter?
    context: Understanding the exact payload reveals the attacker's intent and target database structure.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - http.request.method

  - question: What specific SELECT statement structure was used in the injection?
    context: The SELECT query pattern indicates what database information the attacker is attempting to extract.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - url.full

  - question: Is this normal commenting activity for this web application?
    context: Legitimate users typically don't include SQL keywords in comment submissions.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.request.method

  - question: What other web requests preceded this SQL injection attempt?
    context: Understanding the attack sequence helps identify reconnaissance or escalation patterns.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What was the web server's response to this injection attempt?
    context: Response codes and content indicate if the injection was successful or blocked.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.body.bytes

  - question: Did the injection attempt result in database errors or data exposure?
    context: Error messages or unusual response sizes may indicate successful exploitation.
    range: +2m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.body.content
        - http.response.body.bytes
        - http.response.status_code

  - question: What user-agent and referrer information was provided by the attacker?
    context: User-agent strings and referrers can help identify automated tools or manual exploitation.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.headers.user_agent
        - http.request.headers.referer
        - src_ip

  - question: Are there signs of successful data extraction or database enumeration?
    context: Large response sizes or multiple sequential requests may indicate successful data theft.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.response.body.bytes
        - http.response.status_code

  - question: What persistence mechanisms were attempted after the injection?
    context: Attackers may attempt to upload shells or create backdoors after successful SQL injection.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.request.method|contains:
            - 'POST'
            - 'PUT'
        condition: selection
      fields:
        - url.full
        - http.request.body.content
        - http.request.method

  - question: Are other systems showing similar Neuron Blog exploitation attempts?
    context: Coordinated attacks may target multiple vulnerable installations across the network.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          url.path|contains: '/pages/addcomment2.php'
          url.query|contains: 'commentmail='
        condition: selection
      fields:
        - dst_ip
        - src_ip
        - url.query

  - question: What related SQL injection indicators appear across the enterprise?
    context: Multiple SQL injection attempts may indicate a broader campaign targeting web applications.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name