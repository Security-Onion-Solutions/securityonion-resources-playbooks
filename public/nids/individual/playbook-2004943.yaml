name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php commentmail UNION SELECT
id: 22004943
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php script using UNION SELECT statements in the commentmail parameter.
  UNION SELECT is a classic SQL injection technique for data extraction. Legitimate applications rarely use UNION in user input.
type: detection
detection_id: 2004943
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete UNION SELECT payload structure in the injection?
    context: UNION SELECT payloads reveal the number of columns and data types the attacker is targeting.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - url.query

  - question: How many columns is the attacker attempting to extract via UNION?
    context: Column count in UNION SELECT indicates the sophistication and target scope of the attack.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - http.request.method

  - question: Is this legitimate database union operation or malicious injection?
    context: UNION SELECT in user input is almost always malicious, but checking context confirms intent.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.request.method

  - question: What reconnaissance activities preceded this UNION SELECT attempt?
    context: Attackers typically probe for column counts and data types before crafting UNION payloads.
    range: -1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What database information was the UNION SELECT attempting to extract?
    context: UNION SELECT targets specific tables and columns, revealing attacker objectives.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.body.content
        - http.response.body.bytes
        - http.response.status_code

  - question: Did the UNION SELECT injection bypass application security controls?
    context: Successful bypasses indicate vulnerable application code or insufficient input validation.
    range: +2m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - http.response.body.content

  - question: What automated tools or manual techniques were used for this injection?
    context: User-agent strings and request patterns help identify attack tools and methodologies.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.headers.user_agent
        - http.request.headers.referer
        - src_ip

  - question: Were there successful data extractions following the UNION SELECT?
    context: Large response payloads or multiple requests may indicate successful data theft.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.response.body.bytes
        - http.request.method

  - question: What post-exploitation activities occurred after the successful injection?
    context: Attackers may escalate privileges or install backdoors after successful data extraction.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.request.method|contains:
            - 'POST'
            - 'PUT'
        condition: selection
      fields:
        - url.full
        - http.request.body.content
        - http.response.status_code

  - question: Are other web applications experiencing similar UNION SELECT attacks?
    context: Coordinated SQL injection campaigns often target multiple vulnerable applications.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'UNION SELECT'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: What enterprise-wide SQL injection campaign indicators are present?
    context: Multiple injection attempts may indicate systematic vulnerability exploitation.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'SQL Injection'
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - src_ip