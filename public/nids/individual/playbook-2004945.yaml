name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php commentmail INSERT
id: 22004945
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php script using INSERT statements in the commentmail parameter.
  INSERT injections can create unauthorized database entries, backdoor accounts, or persistent access mechanisms.
type: detection
detection_id: 2004945
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What data was the INSERT injection attempting to add to the database?
    context: INSERT payloads reveal what unauthorized data or accounts the attacker is trying to create.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - url.query

  - question: Which database table was targeted by the INSERT statement?
    context: Table names in INSERT statements indicate what system components the attacker is targeting.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - http.request.method

  - question: Is this a legitimate comment insertion or malicious database manipulation?
    context: Normal comment submissions don't contain raw SQL INSERT statements in parameters.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.request.method

  - question: What reconnaissance preceded this INSERT injection attempt?
    context: Attackers typically explore database structure before crafting INSERT statements.
    range: -1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: Did the INSERT injection successfully modify the database?
    context: Success indicators include specific response codes or confirmation messages.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.body.bytes

  - question: Were backdoor accounts or persistent access mechanisms created?
    context: INSERT injections often target user tables to create unauthorized administrative accounts.
    range: +10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.request.body.content

  - question: What attack tools or techniques were used for this INSERT injection?
    context: User-agent analysis helps identify automated tools versus manual exploitation attempts.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.headers.user_agent
        - http.request.headers.referer
        - src_ip

  - question: Did the attacker attempt to verify the INSERT operation succeeded?
    context: Follow-up queries or login attempts may confirm successful backdoor creation.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What post-insertion activities indicate successful database compromise?
    context: Administrative actions or privilege escalation attempts may follow successful INSERT injections.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.body.content
        - http.response.status_code

  - question: Are other systems experiencing similar INSERT-based SQL injections?
    context: Coordinated attacks may target multiple vulnerable applications for persistent access.
    range: -4h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'SQL Injection'
          rule.name|contains: 'INSERT'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: What enterprise-wide database manipulation campaign indicators exist?
    context: Multiple INSERT injections may indicate systematic attempts to establish persistence.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'SQL Injection'
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - src_ip