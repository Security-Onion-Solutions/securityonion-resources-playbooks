name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php commentmail DELETE
id: 22004946
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php script using DELETE statements in the commentmail parameter.
  DELETE injections can destroy critical data, remove audit trails, or eliminate security controls.
type: detection
detection_id: 2004946
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What specific data was targeted for deletion in the injection payload?
    context: DELETE statements reveal what database records or tables the attacker is attempting to destroy.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - url.query

  - question: Which database table and conditions were specified in the DELETE statement?
    context: Table names and WHERE conditions indicate the scope and target of the destructive attack.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - http.request.method

  - question: Is this normal comment management or malicious data destruction?
    context: Legitimate comment systems don't expose raw DELETE statements in user parameters.
    range: -4h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.request.method

  - question: What database enumeration preceded this DELETE injection?
    context: Attackers typically map database structure before attempting destructive operations.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: Did the DELETE injection successfully remove database records?
    context: Response patterns and status codes indicate whether the destructive operation succeeded.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.body.bytes

  - question: Were audit logs or security records targeted for deletion?
    context: DELETE injections often target logging tables to cover attack traces.
    range: +10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What attack methodology was used for this DELETE injection?
    context: Tool signatures and request patterns help identify automated versus manual destruction attempts.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.headers.user_agent
        - http.request.headers.referer
        - src_ip

  - question: Did the attacker verify successful data deletion?
    context: Follow-up queries or application errors may confirm successful record destruction.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What evidence destruction or cover-up activities followed the DELETE?
    context: Attackers may delete additional records to hide their presence or activities.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.body.content
        - http.response.status_code

  - question: Are other systems experiencing similar destructive SQL injections?
    context: Coordinated DELETE attacks may target multiple databases for maximum damage.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'SQL Injection'
          rule.name|contains: 'DELETE'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: What enterprise-wide data destruction campaign indicators exist?
    context: Multiple DELETE injections may indicate systematic attempts to destroy evidence or cause damage.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'SQL Injection'
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - src_ip