name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php commentmail ASCII
id: 22004947
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php script using ASCII function with SELECT in the commentmail parameter.
  ASCII-based injections are used for blind SQL injection attacks to extract data character by character.
type: detection
detection_id: 2004947
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What ASCII-based blind SQL injection technique was attempted?
    context: ASCII function usage reveals character-by-character data extraction methodology.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - url.query

  - question: Which character positions and values were being tested via ASCII function?
    context: ASCII injection patterns reveal what data the attacker is systematically extracting.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - http.request.method

  - question: Is this legitimate ASCII processing or blind SQL injection exploitation?
    context: ASCII functions in user input parameters typically indicate advanced SQL injection techniques.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.request.method

  - question: What systematic probing preceded this ASCII-based injection?
    context: Blind SQL injection requires extensive reconnaissance to identify vulnerable parameters.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What response time patterns indicate successful blind injection?
    context: ASCII-based attacks rely on response timing differences to extract data.
    range: +15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - url.query

  - question: Were multiple ASCII character values tested in sequence?
    context: Systematic ASCII value testing indicates automated blind SQL injection tools.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.method
        - http.response.status_code

  - question: What automated blind SQL injection tools were used?
    context: ASCII-based injection patterns and user-agents help identify specific attack tools.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.headers.user_agent
        - http.request.headers.referer
        - src_ip

  - question: What sensitive data was extracted through ASCII-based blind injection?
    context: Successful blind injection campaigns can extract passwords, tokens, and confidential data.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.body.bytes

  - question: Did the blind injection lead to further exploitation attempts?
    context: Extracted credentials or data may enable additional attacks or lateral movement.
    range: +4h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.request.method|contains:
            - 'POST'
            - 'PUT'
        condition: selection
      fields:
        - url.full
        - http.request.body.content
        - http.response.status_code

  - question: Are other systems experiencing similar ASCII-based blind injections?
    context: Advanced blind injection techniques may target multiple vulnerable applications.
    range: -4h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'SQL Injection'
          rule.name|contains: 'ASCII'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: What enterprise-wide blind SQL injection campaign indicators exist?
    context: Coordinated ASCII-based attacks indicate sophisticated threat actors with advanced capabilities.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'SQL Injection'
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - src_ip