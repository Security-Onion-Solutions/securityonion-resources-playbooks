name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php commentwebsite INSERT
id: 22004951
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php via commentwebsite parameter with INSERT statements.
  May trigger on legitimate database operations but likely indicates CVE-2006-6993 exploitation for data manipulation.
type: detection
detection_id: 2004951
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL INSERT injection payload in the commentwebsite parameter?
    context: Understanding the exact INSERT statement reveals what data the attacker is trying to add to the database.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - url.query

  - question: Is this a legitimate comment submission or malicious data insertion?
    context: Comment forms use INSERT statements legitimately, but SQL keywords in parameters indicate injection attempts.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - url.query
        - http.request.method
        - http.response.status_code

  - question: What malicious data is the attacker attempting to insert into the database?
    context: INSERT injections can add unauthorized users, malicious content, or backdoor access credentials.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - payload
        - url.query

  - question: Did the web server successfully execute the INSERT statement?
    context: Successful INSERT injections may result in HTTP 200 responses and database state changes.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - bytes_out

  - question: Are there signs of user account creation or privilege escalation attempts?
    context: INSERT injections targeting user tables may create unauthorized administrative accounts.
    range: +15m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - 'user'
            - 'admin'
            - 'login'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What other SQL injection techniques has this attacker employed?
    context: Attackers often combine INSERT with other SQL operations for comprehensive database compromise.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - url.path

  - question: Has the attacker attempted to insert malicious scripts or content?
    context: INSERT injections may add XSS payloads, malicious links, or defacement content to web applications.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - 'comment'
            - 'post'
            - 'content'
        condition: selection
      fields:
        - url.full
        - http.response.status_code
        - src_ip

  - question: Are there indicators of backdoor or webshell installation attempts?
    context: Successful INSERT injections may be followed by attempts to upload or create persistent access mechanisms.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.request.method: POST
        condition: selection
      fields:
        - url.path
        - bytes_in
        - http.request.headers

  - question: What is the scope of database tables being targeted for insertion?
    context: Understanding target tables helps assess potential impact and data integrity concerns.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains:
            - 'INSERT'
            - 'Neuron Blog'
        condition: selection
      fields:
        - rule.name
        - url.full
        - dst_ip

  - question: Are there other Neuron Blog instances experiencing similar INSERT injection attempts?
    context: Coordinated attacks may target multiple vulnerable installations for widespread compromise.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'Neuron Blog'
          rule.name|contains: 'INSERT'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - url.full

  - question: What is the persistence and follow-up activity after the injection attempt?
    context: Successful INSERT injections may be followed by authentication attempts or content verification.
    range: +2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - http.request.method
        - user_agent