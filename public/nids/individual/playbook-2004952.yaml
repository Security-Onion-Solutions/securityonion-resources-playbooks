name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php commentwebsite DELETE
id: 22004952
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php via commentwebsite parameter with DELETE statements.
  May trigger on legitimate database operations but likely indicates CVE-2006-6993 exploitation for data destruction.
type: detection
detection_id: 2004952
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL DELETE injection payload in the commentwebsite parameter?
    context: Understanding the exact DELETE statement reveals what data the attacker is attempting to remove from the database.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - url.query

  - question: Is this a destructive attack or reconnaissance attempt?
    context: DELETE injections can cause permanent data loss and indicate highly malicious intent beyond typical data theft.
    range: -30m
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - rule.name
        - url.path
        - dst_ip

  - question: What database tables or records is the attacker targeting for deletion?
    context: DELETE injections targeting specific tables can reveal attacker knowledge of database structure and malicious intent.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - payload
        - url.query

  - question: Did the web server successfully execute the DELETE statement?
    context: Successful DELETE injections may result in data loss, application errors, or unusual response patterns.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - bytes_out

  - question: Are there signs of application malfunction or data corruption following this attempt?
    context: Successful DELETE injections may cause application errors, broken functionality, or user complaints.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          http.response.status_code|contains:
            - 500
            - 404
            - 403
        condition: selection
      fields:
        - url.path
        - http.response.status_code
        - src_ip

  - question: What other destructive SQL operations has this attacker attempted?
    context: Attackers using DELETE injections may also attempt other destructive operations like DROP TABLE or TRUNCATE.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains:
            - 'SQL Injection'
            - 'DELETE'
            - 'DROP'
            - 'TRUNCATE'
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - url.full

  - question: Is this part of a data destruction or sabotage campaign?
    context: DELETE injections may indicate insider threats, ransomware precursors, or competitive sabotage attempts.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains:
            - 'DELETE'
            - 'destructive'
            - 'malicious'
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - url.path

  - question: Are there backup or recovery operations being triggered?
    context: Successful data deletion may trigger automated backup systems or manual recovery procedures.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          dst_port|contains:
            - 3306
            - 5432
            - 1433
        condition: selection
      fields:
        - src_ip
        - dst_port
        - bytes_in
        - bytes_out

  - question: Has the attacker attempted to cover tracks or delete log entries?
    context: Sophisticated attackers may use DELETE injections to remove evidence of their activities from audit logs.
    range: +15m
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains:
            - 'log'
            - 'audit'
            - 'DELETE'
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - url.full

  - question: Are there other Neuron Blog instances under DELETE injection attack?
    context: Coordinated DELETE attacks may indicate organized campaigns to disrupt or destroy multiple web applications.
    range: -4h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'Neuron Blog'
          rule.name|contains: 'DELETE'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - url.full

  - question: What is the business impact and data recovery timeline for this attack?
    context: Understanding the scope of potential data loss helps prioritize incident response and recovery efforts.
    range: +2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: 'addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - http.response.status_code
        - url.query