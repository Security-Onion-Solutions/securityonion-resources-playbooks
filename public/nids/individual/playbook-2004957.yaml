name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php comment INSERT
id: 22004957
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php script using INSERT statements.
  May trigger on legitimate database operations or security testing of the application.
type: detection
detection_id: 2004957
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What data is the attacker attempting to INSERT into the database?
    context: INSERT payloads reveal what malicious data the attacker is trying to inject into the application.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - rule.name

  - question: Which database table is being targeted by the INSERT statement?
    context: Table names in INSERT statements reveal the attacker's knowledge of database schema.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.request.method
        - url.query
        - http.request.body.content

  - question: Is this part of legitimate comment submission functionality?
    context: Normal blog operations may include INSERT statements for storing user comments.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.request.method
        - http.response.status_code

  - question: Are there attempts to INSERT administrative or privileged data?
    context: Malicious INSERT attempts may try to create admin accounts or escalate privileges.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - url.query
        - http.request.body.content

  - question: Was the INSERT statement successfully executed by the database?
    context: Successful execution confirms data modification and potential database compromise.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.headers

  - question: What other SQL injection techniques has this attacker used?
    context: Multiple injection techniques indicate sophisticated attack methodology.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: Are there attempts to INSERT malicious scripts or code?
    context: INSERT statements may be used to inject XSS payloads or malicious content into the application.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - url.query
        - http.request.body.content

  - question: Has the attacker verified the success of the INSERT operation?
    context: Follow-up queries to verify inserted data indicate successful exploitation.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - url.path
        - http.request.method
        - http.response.status_code

  - question: Are there database backup or export attempts following the INSERT?
    context: Data export attempts after successful injection may indicate data theft preparation.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - url.path
        - http.request.method
        - http.response.headers

  - question: What is the persistence mechanism being established through INSERT?
    context: Malicious INSERT statements may create backdoors or persistent access mechanisms.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: Are similar INSERT-based attacks occurring across other systems?
    context: Coordinated INSERT attacks may indicate a broader campaign targeting multiple applications.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'INSERT'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name