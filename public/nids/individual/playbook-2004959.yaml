name: ET WEB_SPECIFIC_APPS Neuron Blog SQL Injection Attempt -- addcomment2.php comment ASCII
id: 22004959
description: |
  Detects SQL injection attempts targeting Neuron Blog's addcomment2.php script using ASCII function with SELECT statements.
  May trigger on legitimate database queries or security testing of the application.
type: detection
detection_id: 2004959
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What data is being extracted using the ASCII function in the injection?
    context: ASCII function usage indicates blind SQL injection techniques for character-by-character data extraction.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - rule.name

  - question: What is the complete ASCII-based injection payload structure?
    context: ASCII injection payloads reveal sophisticated blind SQL injection techniques and target data.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.request.method
        - url.query
        - http.request.body.content

  - question: Is this part of automated blind SQL injection testing?
    context: ASCII-based injections are commonly used by automated tools for blind data extraction.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.request.method
        - http.response.status_code

  - question: What character positions are being tested with ASCII function?
    context: Character position testing reveals the systematic approach to blind data extraction.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - url.query
        - http.request.body.content

  - question: Are there timing differences in responses to ASCII-based queries?
    context: Response timing analysis helps identify successful blind injection and data extraction.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.headers

  - question: What database schema information is being extracted via ASCII?
    context: ASCII-based extraction may target database names, table names, or column information.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: Are there attempts to extract sensitive data using ASCII enumeration?
    context: ASCII enumeration may target usernames, passwords, or other sensitive application data.
    range: -4h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/pages/addcomment2.php'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - url.query
        - http.request.body.content

  - question: How many characters or records are being enumerated?
    context: Enumeration scope indicates the amount of data being systematically extracted.
    range: -8h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - url.path
        - http.request.method

  - question: Are there successful data extractions confirmed by the attacker?
    context: Confirmation attempts help identify if the blind injection successfully extracted target data.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - url.path
        - http.request.method
        - http.response.status_code

  - question: What is the attack tool or framework being used for ASCII injection?
    context: User-agent and request patterns help identify the specific tools used for blind SQL injection.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - http.request.headers
        - url.query

  - question: Are similar ASCII-based blind injection attacks targeting other applications?
    context: Coordinated blind injection attacks may indicate advanced persistent threats or tool-based campaigns.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'ASCII'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name