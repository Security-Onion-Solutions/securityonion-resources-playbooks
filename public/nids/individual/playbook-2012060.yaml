name: ET WEB_CLIENT Hex Obfuscation of document.write %u UTF-8 Encoding
id: 22012060
description: |
  Detects hex-encoded obfuscation of JavaScript document.write function using %u UTF-8 encoding.
  May trigger on legitimate applications using Unicode-encoded JavaScript for internationalization.
type: detection
detection_id: 2012060
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete UTF-8 encoded JavaScript payload detected?
    context: Understanding the full Unicode-obfuscated payload reveals the malicious intent and execution method.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - http.response.body.content
        - url.full
  - question: Is this legitimate use of Unicode-encoded JavaScript by this application?
    context: Some international applications legitimately use Unicode encoding for multi-language support.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.domain
        - http.request.method
        - src_ip
  - question: What web page or script contained this Unicode-obfuscated JavaScript?
    context: Identifying the source page helps determine if this is part of a sophisticated web attack.
    range: -15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.referrer
        - http.response.status_code
        - http.response.mime_type
  - question: What other Unicode or encoding obfuscation techniques were used?
    context: Multiple encoding methods may indicate advanced malware or exploit kit obfuscation strategies.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          http.response.body.content|contains:
            - '%u'
            - 'unescape'
            - 'String.fromCharCode'
        condition: selection
      fields:
        - url.full
        - http.response.body.content
        - dst_ip
  - question: Did the Unicode-encoded JavaScript successfully execute and trigger actions?
    context: Successful JavaScript execution may lead to exploit payload delivery or malware installation.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          http.request.method: 'GET'
        condition: selection
      fields:
        - url.full
        - http.response.status_code
        - http.response.mime_type
        - dst_ip
  - question: Were any files created or downloaded following the obfuscated JavaScript execution?
    context: Malicious JavaScript often downloads additional malware components or creates persistence files.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip|expand: '%src_ip%'
        condition: selection
      fields:
        - TargetFilename
        - file.hash.md5
        - file.mime_type
        - User
  - question: What processes were created that could indicate successful malware execution?
    context: Unicode-encoded exploits may spawn processes for malware installation or system compromise.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip|expand: '%src_ip%'
        condition: selection
      fields:
        - Image
        - CommandLine
        - User
        - ParentImage
  - question: Were browser security settings modified to allow the obfuscated content?
    context: Advanced attacks may modify browser settings to bypass security controls for encoded content.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: registry_event
      detection:
        selection:
          host.ip|expand: '%src_ip%'
          TargetObject|contains:
            - 'Internet Settings'
            - 'Security'
            - 'Unicode'
        condition: selection
      fields:
        - TargetObject
        - Details
        - User
        - Image
  - question: What DNS queries were made that could indicate command and control activity?
    context: Post-exploitation malware often communicates with command and control infrastructure.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: dns
      detection:
        selection:
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dns.query.name
        - dns.resolved_ip
        - dns.query.type_name
  - question: Are other systems experiencing similar Unicode-encoded JavaScript attacks?
    context: Coordinated campaigns may use consistent Unicode obfuscation across multiple targets.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'document.write %u UTF-8'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name
        - alert.severity
  - question: What is the infrastructure profile of the server hosting the encoded content?
    context: Malicious servers may be part of exploit kits specializing in Unicode-based obfuscation.
    range: -1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - src_ip
        - dst_port
        - bytes_in
        - bytes_out