name: ET WEB_SPECIFIC_APPS SOPHIA CMS SQL Injection Attempt -- dsp_page.cfm pageid UPDATE
id: 22012425
description: |
  Detects SQL injection attempts against SOPHIA CMS via the dsp_page.cfm pageid parameter using UPDATE statements.
  May trigger on legitimate administrative operations that modify database records.
type: detection
detection_id: 2012425
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete UPDATE SQL injection payload in the pageid parameter?
    context: Understanding the UPDATE statement reveals what data the attacker attempted to modify.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - url.query

  - question: Is this legitimate database maintenance by authorized administrators?
    context: SOPHIA CMS administrators may perform legitimate UPDATE operations through the interface.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/dsp_page.cfm"
        condition: selection
      fields:
        - src_ip
        - http.request.method
        - user_agent.original

  - question: What other SQL manipulation attempts occurred from this source?
    context: Attackers often combine SELECT, UPDATE, INSERT, and DELETE operations.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: "SQL Injection"
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path

  - question: What was the HTTP response to this UPDATE injection attempt?
    context: Response codes and content indicate if the injection was successful.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.bytes

  - question: Did the attacker perform reconnaissance before the UPDATE attempt?
    context: Successful UPDATE injections often follow information gathering phases.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code

  - question: Are there signs of database corruption or unauthorized data modification?
    context: Successful UPDATE injections may cause data integrity issues or unauthorized changes.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          rule.name|contains:
            - "Database"
            - "Error"
            - "Exception"
        condition: selection
      fields:
        - rule.name
        - src_ip
        - alert.severity

  - question: What authentication context was used for this injection attempt?
    context: Understanding session context helps determine if legitimate credentials were compromised.
    range: -15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "login"
        condition: selection
      fields:
        - http.request.method
        - http.response.status_code
        - url.full

  - question: What specific database tables or columns were targeted in the UPDATE?
    context: Payload analysis reveals which data the attacker attempted to modify.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.query
        - rule.description

  - question: Are there concurrent attacks against other CMS platforms?
    context: Attackers may target multiple CMS vulnerabilities simultaneously.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains:
            - "CMS"
            - "WordPress"
            - "Joomla"
            - "Drupal"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - url.path

  - question: Is this part of a broader SQL injection campaign across the enterprise?
    context: Coordinated attacks may target multiple systems with similar vulnerabilities.
    range: -4h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: "SQL Injection"
          rule.name|contains: "UPDATE"
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name