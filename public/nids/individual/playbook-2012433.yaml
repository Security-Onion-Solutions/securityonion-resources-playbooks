name: ET WEB_SPECIFIC_APPS WP Forum Server wordpress plugin SQL Injection Attempt -- feed.php topic INSERT
id: 22012433
description: |
  Detects SQL injection attempts against WordPress Forum Server plugin via the feed.php topic parameter using INSERT statements.
  May trigger on legitimate forum operations that create new posts or user registrations.
type: detection
detection_id: 2012433
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete INSERT SQL injection payload in the topic parameter?
    context: INSERT injections reveal what malicious data the attacker attempted to add to the database.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - url.query

  - question: Is this legitimate WordPress Forum Server plugin post creation?
    context: The forum plugin may perform legitimate INSERT operations for new posts, users, or comments.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/wp-content/plugins/forum-server/"
        condition: selection
      fields:
        - src_ip
        - http.request.method
        - user_agent.original

  - question: What other database manipulation attempts occurred from this source?
    context: Attackers often combine INSERT with UPDATE, DELETE, and SELECT operations.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: "SQL Injection"
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path

  - question: What malicious data was the INSERT injection attempting to add?
    context: INSERT payloads may contain malicious user accounts, backdoors, or spam content.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.query
        - rule.description

  - question: Did the INSERT injection successfully create malicious database entries?
    context: Successful INSERT attacks may create unauthorized admin accounts or malicious content.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.bytes

  - question: What WordPress authentication context was used for this injection?
    context: Understanding session context helps determine if legitimate accounts were compromised.
    range: -15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "wp-login"
            - "wp-admin"
        condition: selection
      fields:
        - http.request.method
        - http.response.status_code
        - url.query

  - question: Are there signs of malicious account creation or privilege escalation?
    context: INSERT injections may create unauthorized admin accounts or elevate existing privileges.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          rule.name|contains:
            - "WordPress"
            - "Admin"
            - "User"
            - "Privilege"
        condition: selection
      fields:
        - rule.name
        - src_ip
        - alert.severity

  - question: What specific database tables were targeted by the INSERT operation?
    context: Payload analysis reveals whether user tables, post tables, or configuration tables were targeted.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.query
        - rule.description

  - question: Are there concurrent INSERT injection attacks against other WordPress sites?
    context: Automated tools often target multiple WordPress installations to create backdoor accounts.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: "INSERT"
          rule.name|contains: "WordPress"
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path

  - question: Did the attacker attempt to access newly created malicious content?
    context: Successful INSERT attacks may be followed by attempts to access or activate malicious entries.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "/wp-admin/"
            - "/wp-login.php"
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code

  - question: Is this part of a broader WordPress compromise campaign?
    context: INSERT injections may be part of coordinated attacks to establish persistent access across multiple sites.
    range: -4h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: "WordPress"
          rule.name|contains: "SQL Injection"
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name