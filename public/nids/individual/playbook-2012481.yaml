name: ET WEB_SPECIFIC_APPS Flash Gallery wordpress plugin SQL Injection Attempt -- massedit_album.php gall_id ASCII
id: 22012481
description: |
  Detects SQL injection attempts against WordPress Flash Gallery plugin targeting massedit_album.php with ASCII function.
  May trigger on legitimate database queries using ASCII functions in similar WordPress plugin operations.
type: detection
detection_id: 2012481
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete ASCII-based SQL injection payload in the gall_id parameter?
    context: Understanding the ASCII function usage reveals the blind SQL injection technique for character extraction.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - url.query

  - question: Is this legitimate WordPress plugin functionality testing?
    context: Plugin developers may use ASCII functions for character validation during legitimate testing.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: 'wp-admin'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: What blind SQL injection techniques were employed from this source?
    context: ASCII-based injection often combines with SUBSTRING, LENGTH, and conditional statements for data extraction.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.query|contains:
            - 'ASCII('
            - 'SUBSTRING('
            - 'LENGTH('
            - 'IF('
        condition: selection
      fields:
        - url.query
        - url.path

  - question: Did the ASCII injection reveal character-by-character data extraction?
    context: Blind SQL injection using ASCII functions typically involves multiple requests to extract data byte by byte.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: 'massedit_album.php'
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - http.response.bytes

  - question: What WordPress database information was targeted for extraction?
    context: ASCII-based extraction often targets usernames, passwords, or configuration data from WordPress tables.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.query|contains:
            - 'wp_users'
            - 'user_login'
            - 'user_pass'
            - 'wp_options'
        condition: selection
      fields:
        - url.query
        - url.path

  - question: Were there systematic attempts to enumerate database schema?
    context: Blind injection campaigns often start with schema enumeration before targeting specific data.
    range: -4h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.query|contains:
            - 'information_schema'
            - 'table_name'
            - 'column_name'
            - 'database()'
        condition: selection
      fields:
        - url.query
        - url.path

  - question: Did the Flash Gallery plugin respond with timing-based indicators?
    context: Blind SQL injection often relies on response time differences to determine true/false conditions.
    range: +15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: 'massedit_album.php'
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - network.bytes

  - question: What WordPress processes were active during this blind injection attack?
    context: Identifying WordPress/PHP processes helps assess the computational impact of blind injection attempts.
    range: -15m
    query: |
      aggregation: true
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
          Image|contains:
            - 'php'
            - 'httpd'
            - 'apache'
            - 'mysql'
        condition: selection
      fields:
        - Image
        - CommandLine
        - User

  - question: Were there attempts to extract WordPress administrator credentials?
    context: ASCII-based extraction often targets high-privilege user accounts for subsequent compromise.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.query|contains:
            - 'administrator'
            - 'admin'
            - 'wp_capabilities'
            - 'manage_options'
        condition: selection
      fields:
        - url.query
        - url.path

  - question: Are other WordPress sites experiencing similar ASCII-based injection attacks?
    context: Blind injection techniques are often automated and deployed against multiple WordPress installations.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains:
            - 'Flash Gallery'
            - 'ASCII'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: What WordPress plugin reconnaissance preceded this targeted ASCII injection?
    context: Attackers typically identify vulnerable plugin versions before launching blind injection campaigns.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains:
            - 'wp-content/plugins'
            - '1-flash-gallery'
            - 'readme.txt'
            - 'version'
        condition: selection
      fields:
        - url.path
        - http.response.status_code
        - http.response.bytes