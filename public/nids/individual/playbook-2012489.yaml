name: ET WEB_SPECIFIC_APPS Keynect Ecommerce SQL Injection Attempt -- products.php ctf ASCII
id: 22012489
description: |
  Detects SQL injection attempts targeting Keynect Ecommerce products.php using ASCII function with SELECT statements via ctf parameter.
  May trigger on legitimate database queries or administrative functions using ASCII operations.
type: detection
detection_id: 2012489
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload using ASCII function in the ctf parameter?
    context: Understanding the ASCII-based SELECT statement reveals the attacker's data extraction technique and target columns.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - url.query

  - question: Is this legitimate database query functionality for the Keynect Ecommerce application?
    context: Authorized applications may use ASCII functions for legitimate data processing or character encoding operations.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/products.php"
        condition: selection
      fields:
        - src_ip
        - http.request.method
        - user_agent.original

  - question: What triggered this ASCII-based SQL injection attempt?
    context: Identifying the attack vector helps understand if this is blind SQL injection enumeration or targeted data extraction.
    range: -15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code

  - question: What other SQL injection techniques were attempted by this source?
    context: Reveals if this is part of a systematic SQL injection attack using multiple techniques.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          alert.signature|contains: "SQL Injection"
        condition: selection
      fields:
        - dst_ip
        - alert.signature
        - url.path

  - question: Did the ASCII-based injection reveal database information through response timing or content?
    context: ASCII-based blind SQL injection relies on response differences to extract data character by character.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - http.response.body.content

  - question: Were there multiple ASCII function calls indicating systematic data extraction?
    context: Repeated ASCII queries suggest automated tools extracting database contents character by character.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains: "ASCII"
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - http.response.body.bytes

  - question: What specific database columns or tables were targeted by the ASCII SELECT queries?
    context: Analyzing the SELECT syntax reveals what sensitive data the attacker attempted to extract.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - alert.signature
        - payload_printable
        - http.request.body.content

  - question: Are there signs of successful data extraction or enumeration completion?
    context: Successful ASCII-based injection may lead to complete database enumeration and sensitive data theft.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code

  - question: What automated tools or user-agents were used for this blind SQL injection?
    context: ASCII-based injection is typically performed by automated tools like sqlmap, revealing the attacker's methodology.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - user_agent.original
        - http.request.headers
        - http.request.referrer

  - question: Are other ecommerce applications showing similar ASCII-based SQL injection attempts?
    context: Determines if this is part of a broader ecommerce platform exploitation campaign.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          alert.signature|contains: "Ecommerce"
        condition: selection
      fields:
        - dst_ip
        - alert.signature
        - url.path

  - question: Is this source IP associated with known SQL injection tools or attack infrastructure?
    context: Correlating with threat intelligence helps identify the attacker's tools and infrastructure.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          alert.category|contains: "web-application-attack"
        condition: selection
      fields:
        - alert.signature
        - dst_ip
        - user_agent.original