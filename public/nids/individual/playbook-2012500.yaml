name: ET WEB_SPECIFIC_APPS Constructr CMS SQL Injection Attempt -- INSERT INTO
id: 22012500
description: |
  Detects SQL injection attempts targeting Constructr CMS via INSERT INTO statements in the page_id parameter.
  May trigger on legitimate content management operations that insert data into the CMS database.
type: detection
detection_id: 2012500
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete INSERT INTO payload in the page_id parameter?
    context: Understanding the exact INSERT payload reveals what data the attacker attempted to inject into the database.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.full
        - url.query
        - http.request.method
        - http.request.body.content

  - question: Is this authorized content management activity for the Constructr CMS?
    context: Legitimate CMS operations might involve INSERT statements that could trigger false positives.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/xmlOutput/'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: What database table and columns were targeted in the INSERT statement?
    context: Analyzing the INSERT structure reveals what database objects the attacker was attempting to modify.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  - question: What was the sequence of database manipulation attempts from this source?
    context: INSERT attacks often follow reconnaissance with SELECT statements to understand database structure.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - rule.name
        - url.path
        - url.query

  - question: Did the INSERT injection attempt succeed in modifying the database?
    context: Successful INSERT attacks typically return different HTTP responses than failed attempts.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%dst_ip%'
          dst_ip|expand: '%src_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.body.bytes

  - question: What type of malicious content was the attacker attempting to insert?
    context: INSERT payloads may contain web shells, administrative accounts, or malicious scripts.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  - question: Are there signs of persistent backdoor installation via database modification?
    context: Successful INSERT attacks may create persistent access mechanisms or administrative accounts.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - 'admin'
            - 'login'
            - 'user'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What other database modification attempts occurred against this server?
    context: Multiple INSERT/UPDATE/DELETE attempts indicate systematic database compromise efforts.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          rule.name|contains:
            - 'INSERT'
            - 'UPDATE'
            - 'DELETE'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - url.path

  - question: Did the attacker attempt to verify successful data insertion?
    context: Attackers often follow INSERT attempts with SELECT queries to confirm successful database modification.
    range: +15m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/xmlOutput/'
        condition: selection
      fields:
        - url.query
        - http.request.method
        - http.response.status_code

  - question: Are other Constructr CMS installations showing similar INSERT injection attempts?
    context: Coordinated attacks may target multiple CMS installations with the same INSERT payloads.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'Constructr CMS'
          rule.name|contains: 'INSERT'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: What is the attack pattern and infrastructure associated with this source IP?
    context: Understanding attacker behavior helps assess the sophistication and intent of the database attack.
    range: -1d
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - dst_port
        - src_port