name: ET WEB_SPECIFIC_APPS Constructr CMS Injection Attempt -- DELETE FROM
id: 22012501
description: |
  Detects SQL injection attempts targeting Constructr CMS via DELETE FROM statements in the page_id parameter.
  May trigger on legitimate content management operations that remove data from the CMS database.
type: detection
detection_id: 2012501
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete DELETE FROM payload in the page_id parameter?
    context: Understanding the exact DELETE payload reveals what database records the attacker attempted to remove.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.full
        - url.query
        - http.request.method
        - http.request.body.content

  - question: Is this authorized database maintenance activity for the Constructr CMS?
    context: Legitimate CMS administration might involve DELETE operations that could trigger false positives.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/xmlOutput/'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: What database table was targeted for deletion in the attack?
    context: Analyzing the DELETE structure reveals what database objects the attacker was attempting to destroy.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  - question: What was the progression of database attacks from this source IP?
    context: DELETE attacks often follow reconnaissance to identify valuable database content to destroy.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - rule.name
        - url.path
        - url.query

  - question: Did the DELETE injection attempt succeed in removing database records?
    context: Successful DELETE attacks typically return different HTTP responses indicating database modification.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%dst_ip%'
          dst_ip|expand: '%src_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.body.bytes

  - question: What WHERE conditions were used to target specific database records?
    context: DELETE statements with WHERE clauses reveal what specific data the attacker intended to destroy.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  - question: Are there signs of data destruction or database corruption?
    context: Successful DELETE attacks may cause application errors or unusual database behavior.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          http.response.status_code|contains:
            - '500'
            - '503'
            - '404'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.response.status_code

  - question: What other destructive database operations were attempted?
    context: DELETE attacks may be part of broader database destruction or data manipulation campaigns.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          rule.name|contains:
            - 'DELETE'
            - 'DROP'
            - 'TRUNCATE'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - url.path

  - question: Did the attacker attempt to verify successful data deletion?
    context: Attackers often follow DELETE attempts with SELECT queries to confirm successful record removal.
    range: +15m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/xmlOutput/'
        condition: selection
      fields:
        - url.query
        - http.request.method
        - http.response.status_code

  - question: Are other systems showing similar destructive SQL injection attempts?
    context: Coordinated attacks may target multiple systems with DELETE operations to maximize damage.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'DELETE'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: What is the attack infrastructure and motivation behind this destructive activity?
    context: Understanding attacker patterns helps assess whether this is targeted destruction or opportunistic vandalism.
    range: -1d
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - dst_port
        - src_port