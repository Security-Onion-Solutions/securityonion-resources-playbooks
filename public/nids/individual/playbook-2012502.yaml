name: ET WEB_SPECIFIC_APPS Constructr CMS SQL Injection Attempt -- ASCII SELECT
id: 22012502
description: |
  Detects SQL injection attempts targeting Constructr CMS via ASCII function with SELECT statements in the page_id parameter.
  May trigger on legitimate database queries that use ASCII functions for character manipulation.
type: detection
detection_id: 2012502
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete ASCII SELECT payload in the page_id parameter?
    context: Understanding the ASCII function usage reveals advanced SQL injection techniques for character-based data extraction.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.full
        - url.query
        - http.request.method
        - http.request.body.content

  - question: Is this legitimate database character processing for the Constructr CMS?
    context: Authorized CMS operations might use ASCII functions for text processing that could trigger false positives.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/xmlOutput/'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: What database columns were targeted for ASCII character extraction?
    context: ASCII functions in SQL injection are used for blind extraction of character data from specific columns.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  - question: What was the pattern of blind SQL injection attempts from this source?
    context: ASCII-based attacks indicate sophisticated blind SQL injection techniques requiring multiple requests.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - rule.name
        - url.path
        - url.query

  - question: Did the ASCII injection reveal database character information?
    context: Successful ASCII-based blind injection returns different response patterns based on character values.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%dst_ip%'
          dst_ip|expand: '%src_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.body.bytes

  - question: What character positions were being extracted using ASCII functions?
    context: ASCII injection often targets specific character positions to extract passwords or sensitive strings.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  - question: Are there signs of successful password or hash extraction?
    context: ASCII-based attacks are commonly used to extract authentication credentials character by character.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - 'login'
            - 'auth'
            - 'admin'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What other advanced SQL injection techniques were used against this server?
    context: ASCII attacks indicate sophisticated attackers who may use multiple advanced injection methods.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - url.path

  - question: Did the attacker attempt to verify extracted character data?
    context: Blind SQL injection often involves verification requests to confirm successfully extracted information.
    range: +15m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/xmlOutput/'
        condition: selection
      fields:
        - url.query
        - http.request.method
        - http.response.status_code

  - question: Are other systems showing similar advanced SQL injection techniques?
    context: Sophisticated attackers may use ASCII-based techniques across multiple targets in coordinated campaigns.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'ASCII'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: What is the skill level and infrastructure of this advanced attacker?
    context: ASCII-based blind SQL injection indicates advanced technical capabilities and sophisticated attack infrastructure.
    range: -1d
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - dst_port
        - src_port