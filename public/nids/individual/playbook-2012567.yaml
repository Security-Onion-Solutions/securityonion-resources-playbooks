name: ET WEB_SPECIFIC_APPS coRED CMS rubID Parameter SELECT FROM SQL Injection Attempt
id: 22012567
description: |
  Detects SQL injection attempts targeting coRED CMS rubID parameter using SELECT FROM statements.
  May trigger on legitimate database queries containing these keywords in URL parameters.
type: detection
detection_id: 2012567
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the complete SQL injection payload in the rubID parameter?
    context: Understanding the exact injection syntax reveals the attacker's database knowledge and intent.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.method
        - url.full
        - http.request.body.content
        - rule.name

  - question: What specific SQL keywords and syntax were used in the injection attempt?
    context: Analyzing SQL structure helps determine if this is automated scanning or targeted exploitation.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.request.method
        - url.path
        - url.query

  # Type 2: Triage Assessment
  - question: Is this coRED CMS installation actively used and maintained?
    context: Abandoned or test installations may generate false positives from legitimate security testing.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "/content/rubric/"
            - "index.php"
        condition: selection
      fields:
        - src_ip
        - http.request.method
        - url.path

  - question: Does the source IP have legitimate access to this web application?
    context: Internal IPs or known administrative sources may indicate authorized security testing.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - http.request.method
        - url.path
        - http.response.status_code

  # Type 3: Activity Context
  - question: What other web requests preceded this SQL injection attempt?
    context: Understanding the attack sequence reveals if this is reconnaissance or direct exploitation.
    range: -15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - http.request.method
        - url.path
        - url.query
        - http.response.status_code

  - question: What was the server's response to this injection attempt?
    context: HTTP response codes indicate if the injection was successful or blocked.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - http.request.method

  # Type 4: Impact Assessment
  - question: Did the SQL injection attempt return database content or error messages?
    context: Successful injections often return large response bodies or database error messages.
    range: +2m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - http.response.body.content

  - question: Are there signs of successful database enumeration or data extraction?
    context: Follow-up requests may indicate successful exploitation and data harvesting.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - url.query
        - http.response.body.bytes

  # Type 5: Forensic Deep-Dive
  - question: What specific database tables or columns was the attacker attempting to access?
    context: SQL injection payloads often target specific database structures for data theft.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: "SQL Injection"
        condition: selection
      fields:
        - rule.name
        - url.query
        - http.request.body.content

  - question: Does this match known coRED CMS exploitation patterns or tools?
    context: Automated tools often use predictable injection patterns and user agents.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: "/content/rubric/"
        condition: selection
      fields:
        - http.request.headers.user_agent
        - url.query
        - http.request.method

  # Type 6: Enterprise Correlation
  - question: Are other web servers experiencing similar SQL injection attempts?
    context: Coordinated attacks often target multiple systems with the same vulnerability.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: "SQL Injection"
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path

  - question: Is this part of a broader web application scanning campaign?
    context: Mass scanning often precedes targeted exploitation attempts.
    range: -4h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - url.path
        - http.request.method