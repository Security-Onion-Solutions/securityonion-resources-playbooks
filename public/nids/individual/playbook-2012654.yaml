name: ET WEB_SPECIFIC_APPS PHP-Nuke Surveys pollID parameter INSERT INTO SQL Injection Attempt
id: 22012654
description: |
  Detects SQL injection attempts targeting PHP-Nuke Surveys module via pollID parameter using INSERT INTO statements.
  May trigger on legitimate database operations if similar patterns are used in URL parameters.
type: detection
detection_id: 2012654
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the complete SQL injection payload in the pollID parameter?
    context: Understanding the exact INSERT INTO statement reveals the attacker's intent to add malicious data to the database.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.method
        - url.full
        - http.request.body.content
        - rule.name

  - question: What table and column structure was targeted in the INSERT statement?
    context: Analyzing the INSERT syntax reveals which database tables the attacker attempted to modify.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/modules/Surveys/modules.php'
        condition: selection
      fields:
        - url.query
        - http.request.method
        - url.full

  # Type 2: Triage Assessment
  - question: Is this a legitimate survey creation operation in PHP-Nuke?
    context: Authorized users may create surveys through the web interface, generating INSERT statements.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/modules/Surveys/'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: Does the source IP have authenticated access to the PHP-Nuke system?
    context: Authentication patterns help distinguish between authorized users and external attackers.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains:
            - '/modules/Your_Account/'
            - '/admin.php'
        condition: selection
      fields:
        - url.path
        - http.response.status_code
        - user_agent.original

  # Type 3: Activity Context
  - question: What reconnaissance activities preceded this SQL injection attempt?
    context: INSERT attacks often follow enumeration of database structure and existing records.
    range: -1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/modules/'
        condition: selection
      fields:
        - url.path
        - url.query
        - http.response.status_code

  - question: Were there attempts to identify database schema before the injection?
    context: Attackers typically probe for table structures before crafting INSERT statements.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - 'DESCRIBE'
            - 'SHOW'
            - 'information_schema'
        condition: selection
      fields:
        - url.query
        - http.response.body.bytes
        - http.response.status_code

  # Type 4: Impact Assessment
  - question: Did the INSERT injection attempt succeed based on HTTP response?
    context: Response patterns indicate whether malicious data was successfully inserted into the database.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/modules/Surveys/modules.php'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - url.query

  - question: Were there subsequent attempts to access the inserted malicious data?
    context: Successful INSERT attacks are often followed by SELECT queries to retrieve the planted data.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - 'SELECT'
            - 'pollID'
        condition: selection
      fields:
        - url.query
        - http.response.body.bytes
        - http.response.status_code

  # Type 5: Forensic Deep-Dive
  - question: What type of malicious data was being inserted into the database?
    context: The INSERT payload reveals whether this was backdoor creation, data corruption, or privilege escalation.
    range: -15m/+15m
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - url.full

  - question: Were there attempts to create administrative accounts or backdoors?
    context: INSERT statements targeting user tables often indicate attempts to create unauthorized access.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - 'users'
            - 'admin'
            - 'password'
        condition: selection
      fields:
        - url.query
        - http.request.method
        - http.response.status_code

  # Type 6: Enterprise Correlation
  - question: Are other PHP-Nuke installations showing similar INSERT injection attempts?
    context: Coordinated attacks often target multiple vulnerable applications with the same exploit technique.
    range: -24h/+24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'PHP-Nuke'
          rule.name|contains: 'INSERT INTO'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name