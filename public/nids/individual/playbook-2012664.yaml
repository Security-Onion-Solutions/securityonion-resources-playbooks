name: ET WEB_SPECIFIC_APPS vBulletin cChatBox messageid Parameter INSERT INTO SQL Injection Attempt
id: 22012664
description: |
  Detects SQL injection attempts targeting the vBulletin cChatBox component using INSERT INTO statements in the messageid parameter.
  May trigger on legitimate database operations or chat message processing activities.
type: detection
detection_id: 2012664
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the complete INSERT INTO SQL injection payload in the messageid parameter?
    context: The exact SQL syntax reveals the attacker's intended database manipulation and target tables.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.method
        - url.full
        - url.query
        - http.request.body.content

  - question: What specific database tables or columns were targeted in the INSERT statement?
    context: The target tables reveal what data the attacker intended to insert or modify.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "messageid="
            - "INSERT"
            - "INTO"
        condition: selection
      fields:
        - url.query
        - url.full
        - http.request.method

  # Type 2: Triage Assessment
  - question: Is this normal chat message processing for the cChatBox component?
    context: Legitimate chat operations may involve database INSERT operations for message storage.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: "/cchatbox.php"
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.request.method

  - question: Does the source IP have legitimate access to vBulletin chat functionality?
    context: Regular users would have consistent patterns of normal chat usage without SQL injection attempts.
    range: -30d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "vbulletin"
        condition: selection
      fields:
        - src_ip
        - url.path
        - user_agent.original

  # Type 3: Activity Context
  - question: What other vBulletin components were accessed during the same session?
    context: Attackers often enumerate multiple vBulletin components to find SQL injection vulnerabilities.
    range: -15m/+15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - ".php"
            - "vbulletin"
        condition: selection
      fields:
        - url.path
        - url.query
        - http.request.method

  - question: Were there reconnaissance attempts before the SQL injection attack?
    context: Attackers typically probe for vulnerable parameters before launching SQL injection attacks.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/cchatbox.php"
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - http.request.method

  # Type 4: Impact Assessment
  - question: Did the INSERT INTO SQL injection succeed based on response patterns?
    context: Successful SQL injection would show specific response characteristics indicating database modification.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/cchatbox.php"
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - url.query

  - question: Were there signs of database modification or data corruption?
    context: INSERT INTO attacks may corrupt chat data or insert malicious content into the database.
    range: +10m
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%dst_ip%'
          dst_port|contains:
            - 3306
            - 5432
            - 1433
        condition: selection
      fields:
        - dst_ip
        - dst_port
        - network.bytes
        - network.packets

  # Type 5: Forensic Deep-Dive
  - question: What malicious data was the attacker attempting to insert into the database?
    context: The INSERT payload reveals the attacker's intended database manipulation or backdoor creation.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "INSERT"
            - "VALUES"
        condition: selection
      fields:
        - url.query
        - url.full
        - http.request.method

  - question: Did the attacker attempt to create administrative accounts through SQL injection?
    context: INSERT INTO attacks often target user tables to create privileged accounts.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "user"
            - "admin"
            - "password"
        condition: selection
      fields:
        - url.query
        - url.path
        - http.response.status_code

  - question: Were there attempts to establish persistence through database backdoors?
    context: Successful SQL injection may lead to stored procedures or triggers for persistent access.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "PROCEDURE"
            - "TRIGGER"
            - "FUNCTION"
        condition: selection
      fields:
        - url.query
        - url.path
        - http.request.method

  # Type 6: Enterprise Correlation
  - question: Are other vBulletin installations being targeted for SQL injection?
    context: Attackers often target multiple instances of the same vulnerable component across an organization.
    range: -1h/+1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: "/cchatbox.php"
        condition: selection
      fields:
        - dst_ip
        - url.query
        - http.response.status_code

  - question: Is this part of a broader SQL injection attack campaign?
    context: INSERT INTO attacks often occur alongside other SQL injection techniques in coordinated campaigns.
    range: -2h/+2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: "SQL"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - alert.severity