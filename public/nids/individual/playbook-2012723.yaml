name: ET WEB_SPECIFIC_APPS Mambo component com_zoom Blind SQL Injection Vulnerability
id: 22012723
description: |
  Detects Blind SQL Injection attempts targeting the Mambo CMS com_zoom component via the Itemid parameter.
  Attackers use SQL injection techniques with substring functions to extract database information.
  May trigger on legitimate database queries but typically indicates SQL injection exploitation attempt.
type: detection
detection_id: 2012723
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the exact SQL injection payload and substring technique used?
    context: Understanding the specific blind SQL injection method reveals the attacker's database extraction strategy.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.full
        - url.query
        - http.request.method

  - question: What specific database information was the attacker attempting to extract?
    context: Analyzing the substring function usage helps determine what sensitive data was being targeted.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: 'com_zoom'
        condition: selection
      fields:
        - url.query
        - http.request.headers
        - user_agent.original

  # Type 2: Triage Assessment
  - question: Is this legitimate Mambo CMS administrative or user activity?
    context: Determining if this represents authorized CMS usage or malicious SQL injection exploitation.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - 'mambo'
            - 'administrator'
            - 'index.php'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: Does the source IP have established Mambo CMS user sessions?
    context: Establishing if the source represents a legitimate CMS user or external attacker.
    range: -4h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: 'mambo'
          http.request.headers|contains: 'Cookie'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.headers

  # Type 3: Activity Context
  - question: What reconnaissance preceded this SQL injection attempt?
    context: Identifying scanning activity that typically precedes targeted SQL injection attacks.
    range: -30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - 'component'
            - 'com_'
            - 'mambo'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.response.status_code

  - question: What other Mambo components were probed for SQL injection vulnerabilities?
    context: Understanding the scope of SQL injection testing against the CMS installation.
    range: +/-2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.query|contains:
            - 'and'
            - 'or'
            - 'select'
            - 'union'
        condition: selection
      fields:
        - src_ip
        - url.path
        - url.query

  # Type 4: Impact Assessment
  - question: Were there successful responses indicating potential database information disclosure?
    context: Determining if the blind SQL injection succeeded based on response timing and content differences.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: 'com_zoom'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - http.response.elapsed_time

  - question: What database errors or sensitive information was exposed in responses?
    context: Identifying potential data leakage or error-based information disclosure from SQL injection.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          http.response.body.content|contains:
            - 'mysql'
            - 'error'
            - 'warning'
            - 'database'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.response.body.content

  # Type 5: Forensic Deep-Dive
  - question: What specific database schema or table information was successfully extracted?
    context: Analyzing successful blind SQL injection attempts to understand the scope of data compromise.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.query|contains:
            - 'substring'
            - 'ascii'
            - 'length'
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - http.response.body.bytes

  - question: Are there signs of privilege escalation or administrative access attempts following SQL injection?
    context: Determining if the SQL injection led to compromise of administrative accounts or elevated privileges.
    range: +4h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - 'administrator'
            - 'admin'
            - 'login'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  # Type 6: Enterprise Correlation
  - question: Are other CMS installations experiencing similar SQL injection attacks?
    context: Identifying if this is part of a broader SQL injection campaign targeting CMS platforms.
    range: +/-4h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains:
            - 'SQL Injection'
            - 'substring'
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name