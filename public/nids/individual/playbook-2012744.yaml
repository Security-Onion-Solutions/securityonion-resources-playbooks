name: ET WEB_SPECIFIC_APPS Publishing Technology id Parameter Blind SQL Injection Attempt
id: 22012744
description: |
  Detects blind SQL injection attempts against Publishing Technology's CollectionContent.asp.
  Attackers exploit the id parameter using substring functions for data extraction.
  Legitimate usage would not contain SQL functions in URL parameters.
type: detection
detection_id: 2012744
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What specific SQL injection payload was used in the id parameter?
    context: The exact payload reveals the attacker's technique and target database structure.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.method
        - url.full
        - url.query

  - question: What substring function pattern was detected in the attack?
    context: Substring usage indicates blind SQL injection technique for data extraction.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - url.path
        - url.query
        - http.request.body.content

  # Type 2: Triage Assessment
  - question: Is this a legitimate Publishing Technology application requiring maintenance?
    context: Authorized database administrators might trigger false positives during testing.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path: "/CollectionContent.asp"
        condition: selection
      fields:
        - src_ip
        - http.request.method
        - http.response.status_code

  - question: Are there scheduled database operations or security testing?
    context: Planned penetration testing might explain SQL injection attempts.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - user_agent.original

  # Type 3: Activity Context
  - question: What database enumeration attempts preceded this injection?
    context: Attackers typically probe database structure before blind injection attacks.
    range: -30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "id="
            - "select"
            - "union"
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - http.response.body.bytes

  - question: What response timing patterns indicate successful blind injection?
    context: Blind SQL injection relies on response time differences to extract data.
    range: +/-15m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path: "/CollectionContent.asp"
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - network.bytes

  # Type 4: Impact Assessment
  - question: Did the blind SQL injection attempt return database information?
    context: Response size variations indicate successful data extraction.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - http.response.body.content

  - question: Are there signs of database schema enumeration or data theft?
    context: Successful injection often leads to systematic database exploration.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "substring"
            - "ascii"
            - "char"
        condition: selection
      fields:
        - url.query
        - http.response.body.bytes

  # Type 5: Forensic Deep-Dive
  - question: What database management system is being targeted?
    context: SQL syntax variations reveal the underlying database technology.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "@@version"
            - "information_schema"
            - "sysobjects"
        condition: selection
      fields:
        - url.query
        - http.response.status_code

  - question: What automated SQL injection tools are being used?
    context: Tool signatures help identify attacker sophistication and methods.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - user_agent.original
        - http.request.headers

  # Type 6: Enterprise Correlation
  - question: Are other web applications being targeted with SQL injection?
    context: Identifies scope of database attack campaign across the organization.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains:
            - "SQL"
            - "injection"
        condition: selection
      fields:
        - dst_ip
        - rule.name

  - question: Is this part of broader web application vulnerability scanning?
    context: Multiple injection attempts indicate systematic security assessment.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.query|contains:
            - "'"
            - "or"
            - "and"
            - "union"
        condition: selection
      fields:
        - dst_ip
        - url.path