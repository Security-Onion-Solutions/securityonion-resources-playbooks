name: ET WEB_SPECIFIC_APPS phpRS id parameter INSERT INTO SQL Injection Attempt
id: 22012748
description: |
  Detects SQL injection attempts targeting phpRS model-kits.php using INSERT INTO statements.
  May trigger on legitimate database operations containing similar keywords in rare cases.
type: detection
detection_id: 2012748
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete INSERT INTO injection payload?
    context: Understanding the exact insertion syntax reveals the attacker's intent to modify database content.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.method
        - url.full
        - url.query

  - question: Is INSERT functionality expected for this phpRS application?
    context: Legitimate phpRS installations may have specific insert operations that should be documented.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path: "/model-kits.php"
          http.request.method: "GET"
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.response.status_code

  - question: What other SQL modification attempts preceded this INSERT injection?
    context: INSERT attacks often follow reconnaissance with SELECT statements to understand database structure.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          rule.name|contains:
            - "SQL Injection"
            - "UNION SELECT"
            - "UPDATE SET"
        condition: selection
      fields:
        - rule.name
        - url.query

  - question: What database tables or data is being targeted for insertion?
    context: INSERT injection payloads reveal what data the attacker wants to add to the database.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  - question: Did the INSERT injection succeed based on response patterns?
    context: Successful INSERT operations typically return different response codes or content than failed attempts.
    range: +2m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path: "/model-kits.php"
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - url.query

  - question: What user accounts or privileges might be created through INSERT injection?
    context: INSERT attacks against user tables can create backdoor accounts for persistent access.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  - question: Are there signs of webshell or backdoor insertion attempts?
    context: INSERT injection may be used to add malicious code or files to the database for later execution.
    range: +15m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "php"
            - "eval"
            - "exec"
            - "shell"
        condition: selection
      fields:
        - url.full
        - http.request.method

  - question: What authentication mechanisms are being bypassed or manipulated?
    context: INSERT injection against authentication tables can modify login credentials or session data.
    range: +10m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "login"
            - "auth"
            - "admin"
        condition: selection
      fields:
        - url.full
        - http.response.status_code

  - question: Has this attacker attempted INSERT injection against other applications?
    context: Systematic INSERT injection campaigns indicate advanced database manipulation capabilities.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: "INSERT INTO SQL Injection"
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path

  - question: What database modifications occurred after the INSERT attempt?
    context: Successful INSERT injection may trigger additional database activity or application behavior changes.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path: "/model-kits.php"
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.response.status_code

  - question: Are there enterprise-wide INSERT injection attempts from this source?
    context: Understanding campaign scope helps identify all systems at risk from this attack pattern.
    range: -12h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name: "ET WEB_SPECIFIC_APPS phpRS id parameter INSERT INTO SQL Injection Attempt"
        condition: selection
      fields:
        - dst_ip
        - url.full