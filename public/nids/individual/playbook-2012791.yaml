name: ET WEB_SPECIFIC_APPS KLINK txtCodiInfo parameter INSERT INTO SQL Injection Attempt
id: 22012791
description: |
  Detects SQL injection attempts targeting the KLINK web application's txtCodiInfo parameter using INSERT INTO statements.
  This indicates an attacker attempting to insert malicious data or backdoors into the database.
  Legitimate use of this parameter should not contain SQL INSERT operations.
type: detection
detection_id: 2012791
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete INSERT INTO payload in the txtCodiInfo parameter?
    context: Understanding the exact insertion statement reveals what malicious data or backdoors are being planted.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.method
        - url.full
        - http.request.body.content
        - rule.name

  - question: What table and data is the attacker attempting to insert into the database?
    context: Analyzing the INSERT statement helps identify potential backdoors, admin accounts, or malicious content.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - url.path

  - question: Is this normal data entry functionality for the KLINK application?
    context: Some legitimate operations might use INSERT statements through web interfaces.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path: "/interna.php"
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.request.method

  - question: What database reconnaissance preceded this INSERT injection attempt?
    context: Attackers typically explore database structure before attempting to insert data.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path: "/interna.php"
        condition: selection
      fields:
        - url.query
        - http.request.method
        - http.response.status_code

  - question: Did the database successfully execute the INSERT operation?
    context: Successful insertions may be confirmed by HTTP response codes or lack of error messages.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.body.bytes

  - question: What is the source and pattern of this INSERT injection attack?
    context: Determining if this is automated scanning or targeted insertion helps prioritize response.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - src_ip
        - dst_port
        - network.bytes
        - network.packets

  - question: Are there signs of backdoor activation or malicious data usage after insertion?
    context: Successful insertions may be followed by attempts to use newly created backdoors or accounts.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method
        - url.query

  - question: What follow-up database operations occurred after the INSERT attempt?
    context: Attackers may verify successful insertion or perform additional database manipulation.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - url.query
        - http.request.method
        - http.response.status_code

  - question: Did the attacker attempt to access other administrative functions after insertion?
    context: Understanding post-insertion activities helps assess compromise scope and persistence mechanisms.
    range: +4h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - url.path
        - url.query

  - question: Are other KLINK systems experiencing similar INSERT injection attacks?
    context: Determines if this is part of a coordinated campaign to establish backdoors across multiple systems.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: "KLINK"
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: What authentication or session management bypasses were attempted alongside the INSERT?
    context: INSERT injections are often combined with authentication bypasses to establish persistent access.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - url.query
        - http.request.headers