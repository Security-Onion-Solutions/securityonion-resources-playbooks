name: ET WEB_SPECIFIC_APPS WordPress DB XML dump attempted access
id: 22012808
description: |
  Detects attempts to access WordPress database XML dump files that may have been exposed in the uploads directory.
  These files typically contain sensitive database information including user credentials and configuration data.
  May trigger on legitimate backup file access by authorized administrators.
type: detection
detection_id: 2012808
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the exact filename and path of the WordPress XML dump file being accessed?
    context: Understanding the specific file path helps identify the scope of exposed data and potential backup procedures.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.method
        - url.full
        - url.path
        - alert.signature

  - question: What is the file size and creation date of the targeted XML dump file?
    context: File metadata helps determine the amount of data at risk and when the exposure occurred.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.body.bytes
        - http.response.status_code
        - http.response.mime_type

  # Type 2: Triage Assessment
  - question: Is this access from an authorized WordPress administrator or backup system?
    context: Legitimate administrators may access backup files for maintenance or disaster recovery purposes.
    range: -30d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/wp-admin/'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.response.status_code
        - user_agent.original

  - question: Does this source IP have a history of legitimate WordPress usage on this site?
    context: Regular users of the WordPress site are less likely to be conducting unauthorized data access.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.response.status_code: 200
        condition: selection
      fields:
        - url.path
        - http.request.method
        - user_agent.original

  # Type 3: Activity Context
  - question: What other WordPress-related reconnaissance activities preceded this access attempt?
    context: Attackers often enumerate WordPress installations before attempting to access sensitive files.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          alert.signature|contains:
            - 'WordPress'
            - 'wp-'
            - 'attempted-recon'
        condition: selection
      fields:
        - dst_ip
        - alert.signature
        - url.path

  - question: What was the sequence of directory traversal attempts leading to this access?
    context: Understanding the attack path helps identify the reconnaissance methodology and other potential targets.
    range: -1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/uploads/'
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code
        - user_agent.original

  # Type 4: Impact Assessment
  - question: Was the XML dump file successfully downloaded based on server response?
    context: HTTP response codes and content length indicate whether sensitive database information was actually accessed.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '.xml_.txt'
          http.response.status_code: 200
        condition: selection
      fields:
        - http.response.body.bytes
        - http.response.status_code
        - url.path

  - question: What other sensitive files were accessed from the uploads directory?
    context: Successful access to one backup file may lead to enumeration of other sensitive files in the same directory.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/uploads/'
        condition: selection
      fields:
        - url.path
        - http.response.status_code
        - http.response.body.bytes

  # Type 5: Forensic Deep-Dive
  - question: What user credentials and configuration data were potentially exposed in the XML dump?
    context: WordPress XML dumps typically contain user tables, configuration settings, and potentially password hashes.
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
          TargetFilename|contains:
            - '.wordpress.'
            - '.xml_.txt'
        condition: selection
      fields:
        - TargetFilename
        - file.hash.md5
        - file.size
        - file.mime_type

  - question: Were there any subsequent login attempts using credentials from the exposed data?
    context: Successful data exfiltration may be followed by attempts to use stolen credentials for unauthorized access.
    range: +24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: 'wp-login.php'
        condition: selection
      fields:
        - http.request.method
        - http.response.status_code
        - http.request.body.content

  # Type 6: Enterprise Correlation
  - question: Are other WordPress installations in the environment being targeted for similar data exposure?
    context: Attackers often scan for the same vulnerability across multiple WordPress sites in an organization.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          alert.signature|contains: 'WordPress'
          alert.category: 'attempted-recon'
        condition: selection
      fields:
        - dst_ip
        - alert.signature
        - url.path

  - question: What other backup or configuration files are being targeted across the network?
    context: Understanding the broader campaign helps identify other systems at risk and implement protective measures.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          alert.signature|contains:
            - 'dump'
            - 'backup'
            - 'config'
        condition: selection
      fields:
        - dst_ip
        - alert.signature
        - url.path