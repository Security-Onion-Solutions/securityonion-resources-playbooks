name: ET WEB_SPECIFIC_APPS Joomla Component com_hello SELECT FROM SQL Injection Attempt
id: 22012829
description: |
  Detects SQL injection attempts targeting the Joomla com_hello component via SELECT statements.
  Legitimate component usage would not contain SQL keywords in URL parameters.
type: detection
detection_id: 2012829
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the exact SQL injection payload in the component parameters?
    context: Analyzing the SQL syntax reveals the attacker's database enumeration strategy.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - http.request.method
        - url.full
        - url.query

  - question: Which parameters were manipulated for the SQL injection?
    context: Understanding injection points helps assess the vulnerability scope and fix requirements.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - url.query
        - http.request.referrer
        - user_agent.original

  # Type 2: Triage Assessment
  - question: Is this legitimate Joomla component usage?
    context: Normal component access would not contain SQL keywords in parameters.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "option=com_hello"
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.request.method

  - question: Does the source IP have a history of legitimate Joomla site access?
    context: Regular users would have consistent browsing patterns without injection attempts.
    range: -30d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "index.php"
            - "joomla"
        condition: selection
      fields:
        - url.path
        - user_agent.original
        - http.response.status_code

  # Type 3: Activity Context
  - question: What triggered this SQL injection attempt - direct browsing or automated scanning?
    context: Understanding the attack vector helps determine if this is targeted or opportunistic.
    range: -30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "option=com_"
            - "component"
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - http.request.method

  - question: Was there enumeration of Joomla components before the injection?
    context: Attackers often probe for vulnerable components before exploitation.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path: "/index.php"
          http.response.status_code|contains:
            - 200
            - 404
            - 500
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - user_agent.original

  # Type 4: Impact Assessment
  - question: Did the SQL injection successfully extract database information?
    context: Successful injection indicates potential data breach and system compromise.
    range: +15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.response.status_code: 200
        condition: selection
      fields:
        - http.response.body.content
        - http.response.status_code
        - http.response.mime_type

  - question: Were there follow-up requests to exploit the discovered vulnerability?
    context: Post-exploitation activity may include data exfiltration or privilege escalation.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "UNION"
            - "INSERT"
            - "UPDATE"
            - "DELETE"
        condition: selection
      fields:
        - url.query
        - http.request.method
        - http.response.status_code

  # Type 5: Forensic Deep-Dive
  - question: What database schema information was targeted in the injection?
    context: Understanding the target tables helps assess data exposure risk.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - user_agent.original

  - question: Are there indicators of automated SQL injection tools?
    context: Tool signatures in user agents or request patterns reveal attack sophistication.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.query|contains:
            - "SELECT"
            - "UNION"
            - "ORDER BY"
        condition: selection
      fields:
        - user_agent.original
        - url.query
        - http.request.method

  # Type 6: Enterprise Correlation
  - question: Are other Joomla installations being targeted across the network?
    context: Coordinated attacks often target multiple CMS installations with similar vulnerabilities.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.query|contains:
            - "option=com_"
            - "SELECT"
            - "FROM"
        condition: selection
      fields:
        - dst_ip
        - url.query
        - http.response.status_code