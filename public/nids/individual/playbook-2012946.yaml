name: ET WEB_SPECIFIC_APPS WordPress inline-gallery do parameter Cross Site Scripting Attempt
id: 22012946
description: |
  Detects cross-site scripting attempts targeting WordPress inline-gallery plugin via the do parameter.
  May trigger on legitimate plugin usage with JavaScript content in parameters or administrative functions.
type: detection
detection_id: 2012946
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the exact XSS payload in the do parameter?
    context: Analyzing the specific payload reveals the attack vector and intended malicious JavaScript execution.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.full
        - url.query
        - http.request.method

  - question: What JavaScript events or functions were attempted in the browser.php request?
    context: Understanding the XSS technique helps assess the sophistication and potential impact of the attack.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/plugins/inline-gallery/browser/browser.php"
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - http.request.headers.referer

  # Type 2: Triage Assessment
  - question: Is this legitimate WordPress administrative activity or plugin usage?
    context: WordPress administrators and content editors may legitimately access plugin interfaces for gallery management.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/wp-admin/"
        condition: selection
      fields:
        - url.path
        - http.response.status_code
        - http.request.headers.user_agent

  - question: Does the source IP have authorized WordPress access history?
    context: Established legitimate access patterns help distinguish between authorized users and external attackers.
    range: -30d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/wp-"
          http.response.status_code: 200
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code

  # Type 3: Activity Context
  - question: What other WordPress plugin vulnerabilities were probed during this session?
    context: Attackers often scan multiple plugin vulnerabilities to find exploitable entry points.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/plugins/"
        condition: selection
      fields:
        - url.path
        - url.query
        - http.response.status_code

  - question: Were there any WordPress login attempts before this XSS attack?
    context: Failed authentication followed by plugin exploitation indicates targeted WordPress compromise attempts.
    range: -4h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "wp-login.php"
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - http.request.method

  # Type 4: Impact Assessment
  - question: Did the XSS attempt succeed based on the server response?
    context: Server response codes and content indicate if the malicious payload was processed or blocked by security measures.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.body.bytes

  - question: Are there signs of session hijacking or administrative credential theft?
    context: Successful XSS in WordPress admin areas can lead to session token theft and full site compromise.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/wp-admin/"
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.headers.cookie
        - http.request.headers.user_agent

  # Type 5: Forensic Deep-Dive
  - question: What other WordPress vulnerabilities were exploited by this attacker?
    context: WordPress attackers typically probe multiple vulnerabilities and may achieve compromise through various vectors.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: "WordPress"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - dst_port

  - question: Are there indicators of automated WordPress scanning tools or manual exploitation?
    context: User-agent analysis and request patterns help distinguish between automated scanners and targeted manual attacks.
    range: -6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: "/wp-"
        condition: selection
      fields:
        - http.request.headers.user_agent
        - url.path
        - http.request.method

  # Type 6: Enterprise Correlation
  - question: Are other WordPress sites in the organization being targeted with similar attacks?
    context: Coordinated WordPress attacks across multiple sites indicate advanced persistent threats or automated campaigns.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains:
            - "WordPress"
            - "XSS"
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: Is this part of a broader web application attack campaign?
    context: WordPress XSS attempts often accompany broader web application security scanning and exploitation efforts.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.category: "web-application-attack"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - dst_port