name: ET WEB_SPECIFIC_APPS Webcat web_id Parameter Blind SQL Injection Vulnerability
id: 22013164
description: |
  Detects SQL injection attempts targeting the Webcat CMS web_id parameter in cms_view.php.
  Uses blind SQL injection techniques with substring functions to extract database information.
  May trigger on legitimate database queries containing similar patterns.
type: detection
detection_id: 2013164
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the complete SQL injection payload in the web_id parameter?
    context: Analyzing the exact injection string reveals the attacker's technique and target database structure.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - http.request.method
        - url.full
        - url.query

  - question: What specific substring function and conditions were used in the injection?
    context: Understanding the blind SQL injection technique helps determine data extraction methods.
    range: +/-5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/ecat/cms_view.php'
        condition: selection
      fields:
        - url.query
        - http.request.method
        - src_ip

  # Type 2: Triage Assessment
  - question: Is this legitimate administrative access to the Webcat CMS system?
    context: Authorized administrators may access cms_view.php with complex parameters for legitimate purposes.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/ecat/'
        condition: selection
      fields:
        - url.path
        - http.request.method
        - user_agent.original

  - question: Does this source IP have a history of normal web application usage?
    context: Legitimate users typically show varied browsing patterns, while attackers focus on specific vulnerabilities.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - http.response.status_code
        - http.request.method

  # Type 3: Activity Context
  - question: What reconnaissance activity preceded this SQL injection attempt?
    context: Attackers often probe for vulnerabilities before launching targeted injection attacks.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code
        - user_agent.original

  - question: What was the server's response to this injection attempt?
    context: Response codes and timing can indicate if the injection was successful or blocked.
    range: +/-2m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - network.bytes

  # Type 4: Impact Assessment
  - question: Were there successful database queries or data extraction attempts?
    context: Successful blind SQL injection may show consistent response patterns indicating data enumeration.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: '/ecat/cms_view.php'
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - network.bytes

  - question: What sensitive application areas were accessed after this injection?
    context: Successful exploitation may lead to access of administrative functions or sensitive data.
    range: +4h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code

  # Type 5: Forensic Deep-Dive
  - question: What automated tools or scripts were used for this SQL injection?
    context: User agent strings and request patterns can reveal automated SQL injection tools.
    range: +/-1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - user_agent.original
        - http.request.method
        - url.path

  - question: Are there signs of systematic database enumeration or data exfiltration?
    context: Successful blind SQL injection often involves systematic queries to extract database schema and data.
    range: +6h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.query
        - network.bytes
        - http.response.status_code

  # Type 6: Enterprise Correlation
  - question: Are other web applications being targeted with similar SQL injection techniques?
    context: Attackers often use the same techniques across multiple targets in an organization.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'SQL Injection'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path