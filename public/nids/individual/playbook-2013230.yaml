name: ET WEB_SPECIFIC_APPS Immophp annonce parameter INSERT INTO SQL Injection Attempt
id: 22013230
description: |
  Detects SQL injection attempts using INSERT INTO statements in the Immophp application's annonce parameter.
  May trigger on legitimate data insertion operations or content management functions.
type: detection
detection_id: 2013230
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What specific INSERT INTO SQL injection payload was attempted?
    context: Understanding the exact injection reveals what data the attacker tried to insert into the database.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.full
        - url.query
        - http.request.method
        - http.request.body.content

  - question: Is this legitimate content creation in the Immophp real estate application?
    context: Determines if this is authorized property listing creation or malicious data injection.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path: "/annonce_detail.php"
        condition: selection
      fields:
        - user_agent.original
        - http.request.referrer
        - url.query
        - http.response.status_code

  - question: What application enumeration occurred before this INSERT injection?
    context: Identifies if the attacker performed reconnaissance to understand the database schema.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code
        - user_agent.original

  - question: What other SQL injection techniques were used against this Immophp instance?
    context: Reveals the complete attack methodology and other vulnerable parameters tested.
    range: -1h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          rule.name|contains: "Immophp"
        condition: selection
      fields:
        - src_ip
        - rule.name
        - url.full
        - alert.severity

  - question: Did the INSERT injection successfully add malicious data to the database?
    context: Determines if the attack compromised database integrity by inserting unauthorized records.
    range: +15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.response.status_code: 200
        condition: selection
      fields:
        - url.path
        - http.response.body.bytes
        - http.response.mime_type

  - question: What database INSERT operations were executed on the backend?
    context: Identifies if the injection bypassed validation and what records were added to the database.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
          process.command_line|contains:
            - "INSERT"
            - "INTO"
        condition: selection
      fields:
        - process.name
        - process.command_line
        - process.parent.name
        - user.name

  - question: Were any malicious files or backdoors inserted through the injection?
    context: Determines if the attack resulted in web shell installation or system compromise.
    range: +10m
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
          file.extension|contains:
            - ".php"
            - ".jsp"
            - ".asp"
        condition: selection
      fields:
        - file.path
        - file.name
        - process.name
        - file.hash.md5

  - question: What type of malicious content was the attacker trying to inject?
    context: Assesses whether the injection aimed to insert spam, malware links, or administrative accounts.
    range: -1d
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path: "/annonce_detail.php"
          url.query|contains: "INSERT"
        condition: selection
      fields:
        - src_ip
        - url.query
        - http.request.body.content

  - question: Are other web applications on this server vulnerable to INSERT injections?
    context: Identifies additional applications requiring security review and input validation fixes.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          rule.name|contains: "INSERT"
        condition: selection
      fields:
        - rule.name
        - url.path
        - src_ip
        - alert.severity

  - question: Is this part of a broader SQL injection campaign targeting real estate applications?
    context: Determines if this is an isolated incident or systematic targeting of similar applications.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains:
            - "SQL_Injection"
            - "INSERT"
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path
        - alert.severity