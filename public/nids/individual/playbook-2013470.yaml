name: ET WEB_SPECIFIC_APPS Joomla Community component userid parameter INSERT INTO SQL Injection Attempt
id: 22013470
description: |
  Detects SQL injection attempts targeting Joomla Community component via INSERT INTO statements.
  May trigger on legitimate user registration or data insertion operations in rare cases.
type: detection
detection_id: 2013470
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete INSERT INTO SQL injection payload?
    context: Understanding the full payload reveals what data the attacker is trying to insert.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.query
        - http.uri
        - http.request.body.content

  - question: Is this legitimate user registration or data entry activity?
    context: Normal Joomla Community operations may involve legitimate INSERT statements for user data.
    range: -30d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.query|contains: "option=com_community"
        condition: selection
      fields:
        - src_ip
        - http.request.headers.user_agent
        - url.query

  - question: What vulnerability scanning preceded this SQL injection attempt?
    context: Attackers typically probe for SQL injection vulnerabilities before exploitation.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - url.query
        - http.response.status_code
        - http.request.method

  - question: What other SQL injection vectors were tested by this attacker?
    context: Comprehensive SQL injection attacks test multiple injection points and techniques.
    range: -1h/+1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.query|contains: "userid="
        condition: selection
      fields:
        - url.path
        - url.query
        - http.response.status_code

  - question: Did the INSERT INTO injection succeed or get blocked?
    context: Response analysis indicates if malicious data was successfully inserted into the database.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.headers.content_length

  - question: What malicious data was the attacker attempting to insert?
    context: INSERT payloads may contain backdoor accounts, malicious scripts, or data corruption attempts.
    range: +15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains: "option=com_community"
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - http.request.body.content

  - question: What specific database tables and columns were targeted?
    context: Analyzing INSERT syntax reveals the attacker's understanding of database structure.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  - question: Are there indicators of automated SQL injection tools being used?
    context: Tool fingerprints help identify the sophistication level and potential attribution.
    range: -30m/+30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - http.request.headers.user_agent
        - http.request.method
        - url.path

  - question: What administrative or user accounts were targeted for creation?
    context: INSERT attacks on user tables often aim to create backdoor administrative accounts.
    range: -30m/+30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/index.php"
        condition: selection
      fields:
        - url.query
        - http.request.headers.cookie
        - http.response.headers.set_cookie

  - question: Are multiple Joomla installations being targeted with INSERT attacks?
    context: Attackers often exploit the same vulnerability across multiple target systems.
    range: -2h/+2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.query|contains: "INSERT"
          url.query|contains: "INTO"
        condition: selection
      fields:
        - dst_ip
        - url.path
        - url.query

  - question: What is the enterprise-wide impact of this SQL injection campaign?
    context: Coordinated SQL injection attacks may compromise multiple web applications simultaneously.
    range: -4h/+4h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: "SQL Injection"
          rule.name|contains: "INSERT"
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name