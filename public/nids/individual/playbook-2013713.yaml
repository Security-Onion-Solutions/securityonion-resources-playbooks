name: ET WEB_SPECIFIC_APPS Joostina CMS users component Blind SQL Injection Attempt
id: 22013713
description: |
  Detects blind SQL injection attempts targeting the Joostina CMS users component using substring functions.
  May trigger on legitimate database queries, but typically indicates malicious attempts to extract data through timing or boolean-based attacks.
type: detection
detection_id: 2013713
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the exact blind SQL injection payload using substring functions?
    context: Understanding the blind injection technique reveals the attacker's data extraction methodology and target information.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.method
        - url.full
        - http.request.body.content
        - rule.name

  - question: Is this a legitimate database query by an authorized Joostina administrator?
    context: System administrators may perform complex queries that could trigger blind injection signatures during maintenance.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: What reconnaissance activity preceded this blind injection attempt?
    context: Blind SQL injection typically follows initial probing to identify vulnerable parameters and database structure.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - url.full
        - http.response.status_code

  - question: What were the response times and patterns indicating blind injection success?
    context: Blind SQL injection relies on response timing differences or boolean responses to extract data character by character.
    range: +15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%dst_ip%'
          dst_ip|expand: '%src_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - http.response.body.content

  - question: Are there patterns of systematic data extraction through repeated queries?
    context: Successful blind injection involves multiple sequential requests to extract database contents character by character.
    range: +2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "com_users"
        condition: selection
      fields:
        - url.full
        - http.response.status_code
        - http.response.body.bytes

  - question: What is the threat intelligence profile of the attacking source?
    context: IP reputation and geolocation data help assess the sophistication and origin of the blind injection attack.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - src_ip
        - geoip.country_name
        - threat.indicator.type

  - question: Has this attacker employed multiple SQL injection techniques?
    context: Diverse injection methods including blind techniques indicate advanced attackers with sophisticated exploitation tools.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.category: "web-application-attack"
          rule.name|contains: "SQL Injection"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - url.path

  - question: Are there concurrent attempts to access user management functions?
    context: Blind injection against user components often aims to extract credentials or escalate privileges within the CMS.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains:
            - "admin"
            - "login"
            - "user"
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What is the vulnerability status of the targeted Joostina CMS installation?
    context: CMS version and patch level determine susceptibility to this specific blind injection vulnerability.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "joostina"
        condition: selection
      fields:
        - http.response.headers
        - url.path
        - http.response.body.content

  - question: Are multiple systems experiencing coordinated blind injection attacks?
    context: Widespread blind injection attempts suggest automated tools or organized threat actors targeting CMS infrastructure.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: "Blind SQL Injection"
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path

  - question: Is this attack part of a comprehensive CMS exploitation campaign?
    context: Multiple CMS attack vectors from the same source indicate systematic penetration testing or malicious campaigns.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.category: "web-application-attack"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - url.path