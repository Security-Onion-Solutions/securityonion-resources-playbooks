name: ET WEB_SPECIFIC_APPS Mole Group Vacation Estate Listing Script Blind SQL Injection Attempt
id: 22013872
description: |
  Detects blind SQL injection attempts targeting the Mole Group Vacation Estate Listing Script via the editid1 parameter.
  May indicate exploitation attempts using substring-based blind SQL injection techniques.
type: detection
detection_id: 2013872
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the complete SQL injection payload in the editid1 parameter?
    context: Analyzing the full injection string reveals the attack methodology and target database structure.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.full
        - url.query
        - http.request.method

  - question: What specific SQL functions and operators were used in the injection attempt?
    context: Functions like substring() and operators reveal the blind injection technique being employed.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.query
        - http.request.body.content
        - user_agent.original

  # Type 2: Triage Assessment
  - question: Is the Vacation Estate Listing Script legitimately installed on this server?
    context: Confirming application presence helps distinguish targeted attacks from automated scanning.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "properties_view.php"
            - "estate"
            - "vacation"
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.response.status_code

  - question: Are there legitimate administrative activities from this source?
    context: Authorized administrators may access property management functions during normal operations.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "admin"
            - "login"
            - "manage"
        condition: selection
      fields:
        - url.path
        - http.response.status_code
        - user_agent.original

  # Type 3: Activity Context
  - question: What reconnaissance preceded this SQL injection attempt?
    context: Attackers typically probe for vulnerable parameters before crafting injection payloads.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "properties_view.php"
            - ".php"
        condition: selection
      fields:
        - url.path
        - url.query
        - http.response.status_code

  - question: How did the application respond to this injection attempt?
    context: Response timing and content reveal if the blind injection was successful.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%dst_ip%'
          dst_ip|expand: '%src_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - network.bytes

  # Type 4: Impact Assessment
  - question: Did the blind SQL injection reveal database information?
    context: Successful blind injection may show repeated requests testing different conditions.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path: "/properties_view.php"
          url.query|contains: "editid1="
        condition: selection
      fields:
        - url.query
        - http.response.status_code
        - http.response.body.bytes

  - question: Are there signs of database enumeration or data extraction?
    context: Successful SQL injection often leads to systematic data extraction attempts.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - "union"
            - "select"
            - "table_name"
            - "information_schema"
        condition: selection
      fields:
        - url.path
        - url.query
        - http.response.body.bytes

  # Type 5: Forensic Deep-Dive
  - question: What database errors or responses were generated?
    context: Error messages may reveal database type, structure, and injection success.
    range: +15m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%src_ip%'
          src_ip|expand: '%dst_ip%'
          http.response.body.content|contains:
            - "mysql"
            - "sql"
            - "error"
            - "warning"
        condition: selection
      fields:
        - http.response.body.content
        - http.response.status_code
        - content_type

  - question: What automated tools or frameworks were used for this attack?
    context: User agent and request patterns may reveal SQL injection tools or frameworks.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - user_agent.original
        - http.request.headers.accept
        - http.request.headers.connection

  - question: Are there other SQL injection attempts against different parameters?
    context: Attackers often test multiple injection points to find successful attack vectors.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          rule.name|contains: "SQL Injection"
        condition: selection
      fields:
        - url.path
        - url.query
        - rule.name

  # Type 6: Enterprise Correlation
  - question: Are other web applications being targeted with SQL injection attacks?
    context: Attackers may scan multiple applications for SQL injection vulnerabilities.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: "SQL Injection"
        condition: selection
      fields:
        - dst_ip
        - url.path
        - rule.name

  - question: Is this part of a broader web application attack campaign?
    context: SQL injection attempts often occur alongside other web exploitation techniques.
    range: -3h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.category: "web-application-attack"
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - rule.category