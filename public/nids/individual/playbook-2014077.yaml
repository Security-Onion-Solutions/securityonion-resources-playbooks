name: ET WEB_SPECIFIC_APPS jbShop e107 CMS plugin item_id parameter INSERT INTO SQL Injection Attempt
id: 22014077
description: |
  Detects SQL injection attempts targeting the jbShop e107 CMS plugin's item_id parameter using INSERT INTO statements.
  May trigger on legitimate data insertion operations or automated security testing tools.
type: detection
detection_id: 2014077
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What malicious data was being inserted into the database via SQL injection?
    context: INSERT statements can add backdoor accounts, malicious content, or persistent access mechanisms.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.full
        - url.query
        - http.request.method

  - question: Is this legitimate data entry or content management activity?
    context: Content managers may perform authorized INSERT operations through administrative interfaces.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - user_agent.original
        - http.request.method

  - question: What type of persistent access mechanisms were attempted via INSERT injection?
    context: Attackers use INSERT statements to create backdoor accounts or inject web shells into databases.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - 'admin'
            - 'user'
            - 'password'
            - 'shell'
        condition: selection
      fields:
        - url.full
        - http.response.status_code

  - question: Did the INSERT injection successfully modify the database?
    context: Successful INSERT operations create persistent compromise that survives application restarts.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.body.bytes

  - question: Has a backdoor administrative account been created in the CMS?
    context: INSERT injections commonly create privileged accounts for persistent unauthorized access.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - 'admin'
            - 'user'
            - 'account'
          http.request.method: 'POST'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.response.status_code

  - question: Are there signs of web shell deployment via database insertion?
    context: Advanced attackers may insert PHP or other executable code into database fields for later execution.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.query|contains:
            - 'php'
            - 'eval'
            - 'exec'
            - 'system'
        condition: selection
      fields:
        - src_ip
        - url.full
        - http.response.status_code

  - question: What malicious content was injected into the website via INSERT statements?
    context: INSERT attacks may add malicious JavaScript, redirects, or phishing content to web pages.
    range: +2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          http.response.body.content|contains:
            - 'script'
            - 'iframe'
            - 'redirect'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.response.body.content

  - question: Has the attacker tested the newly inserted backdoor mechanisms?
    context: Attackers typically validate inserted backdoors by attempting to authenticate or execute commands.
    range: +3h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - 'login'
            - 'shell'
            - 'cmd'
        condition: selection
      fields:
        - url.path
        - http.request.method
        - http.response.status_code

  - question: Are there indicators of privilege escalation using inserted accounts?
    context: Backdoor accounts created via INSERT injection may have elevated privileges for system access.
    range: +4h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: 'admin'
          http.response.status_code: '200'
        condition: selection
      fields:
        - src_ip
        - url.path
        - user_agent.original

  - question: Have other CMS installations been compromised with similar INSERT injection techniques?
    context: Successful INSERT attacks may be replicated across multiple vulnerable systems in the network.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'INSERT INTO SQL Injection'
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path