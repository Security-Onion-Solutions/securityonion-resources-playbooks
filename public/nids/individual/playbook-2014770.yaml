name: ET WEB_SPECIFIC_APPS WordPress Download Monitor plugin uploader.php Cross-Site Scripting Attempt
id: 22014770
description: |
  Detects XSS attempts targeting WordPress Download Monitor plugin via tab and s parameters in uploader.php.
  May trigger on legitimate file upload configurations with special characters.
type: detection
detection_id: 2014770
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the exact XSS payload in the tab or s parameters?
    context: Understanding the injection pattern reveals the attacker's technique and file upload targeting.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - http.request.method

  - question: What script or event handler was used in the uploader XSS attempt?
    context: Identifying the specific JavaScript payload helps assess file upload exploitation risk.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/wp-content/plugins/download-monitor/uploader.php"
        condition: selection
      fields:
        - url.query
        - http.request.body.content

  # Type 2: Triage Assessment
  - question: Is this WordPress site actively using the Download Monitor plugin?
    context: Legitimate plugin usage may generate similar uploader traffic during file management.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/wp-content/plugins/download-monitor/"
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.response.status_code

  - question: Are there legitimate file upload sessions from this source IP?
    context: Valid users may trigger similar patterns during legitimate file upload operations.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.request.method: "POST"
          url.path|contains: "upload"
        condition: selection
      fields:
        - url.path
        - http.response.status_code
        - user_agent.original

  # Type 3: Activity Context
  - question: What was the reconnaissance sequence leading to this uploader XSS attempt?
    context: Understanding plugin discovery reveals if this was targeted file upload exploitation.
    range: -15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code
        - user_agent.original

  - question: How did the attacker discover the Download Monitor plugin uploader?
    context: Plugin file discovery methods indicate reconnaissance sophistication and upload targeting.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "/wp-content/plugins/download-monitor/"
            - "/uploader.php"
            - "/readme.txt"
        condition: selection
      fields:
        - url.full
        - http.response.status_code
        - http.response.body.bytes

  # Type 4: Impact Assessment
  - question: Did the XSS payload execute successfully in the uploader interface?
    context: Server response indicates if the file upload vulnerability was exploitable.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.mime_type

  - question: Are there signs of malicious file uploads following this XSS attempt?
    context: Successful uploader XSS may lead to webshell uploads or malicious file placement.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          http.request.method: "POST"
          url.path|contains:
            - "upload"
            - "/wp-content/"
        condition: selection
      fields:
        - url.full
        - http.request.body.bytes
        - http.response.status_code

  # Type 5: Forensic Deep-Dive
  - question: What other file upload vulnerabilities has this attacker attempted?
    context: Multiple upload-targeted attempts indicate systematic file upload exploitation.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains:
            - "upload"
            - "file"
            - "WordPress"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - rule.category

  - question: Are there attempts to access uploaded files or establish webshells?
    context: Post-XSS activity may include attempts to execute uploaded malicious files.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "/wp-content/uploads/"
            - ".php"
            - ".jsp"
            - ".asp"
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  # Type 6: Enterprise Correlation
  - question: Are other WordPress file upload interfaces being targeted across the organization?
    context: Coordinated upload-targeting attacks may indicate enterprise-wide file upload compromise attempts.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains:
            - "WordPress"
            - "upload"
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - rule.category