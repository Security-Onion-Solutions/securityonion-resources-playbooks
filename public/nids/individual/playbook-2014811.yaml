name: ET WEB_SPECIFIC_APPS WordPress Dynamic Widgets plugin id parameter Cross-Site Scripting Attempt
id: 22014811
description: |
  Detects cross-site scripting (XSS) attempts targeting the WordPress Dynamic Widgets plugin's id parameter.
  May trigger on legitimate administrative actions or automated security scans.
type: detection
detection_id: 2014811
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the exact XSS payload in the id parameter?
    context: Understanding the payload reveals the attacker's intent and potential impact.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - url.full
        - url.query
        - http.request.method
  - question: Is this legitimate WordPress administration activity?
    context: Authorized administrators may access the Dynamic Widgets configuration page.
    range: -30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - http.request.method
        - user_agent.original
  - question: What other WordPress admin activities occurred from this source?
    context: Legitimate users typically perform multiple admin actions, while attackers focus on exploitation.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/wp-admin/'
        condition: selection
      fields:
        - url.path
        - http.response.status_code
        - http.request.method
  - question: Did the XSS attempt succeed based on server response?
    context: HTTP response codes and content length indicate if the malicious payload was processed.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - http.response.mime_type
  - question: Are there signs of successful XSS exploitation in subsequent requests?
    context: Successful XSS may lead to session hijacking or further malicious requests.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.path
        - http.request.headers.cookie
        - http.request.headers.referer
  - question: What is the reputation and geolocation of the source IP?
    context: Malicious IPs often have poor reputation or originate from unexpected locations.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - src_ip
        - destination.geo.country_name
        - source.geo.country_name
  - question: Are there other XSS attempts against different WordPress plugins?
    context: Attackers often target multiple vulnerabilities in a single campaign.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'Cross-Site Scripting'
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - url.path
  - question: What user-agent string was used for this attack?
    context: Automated tools often use distinctive user-agent patterns.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - user_agent.original
        - http.request.headers.accept
        - http.request.headers.accept_language
  - question: Are there similar attacks against other WordPress sites in the network?
    context: Mass scanning campaigns often target multiple WordPress installations.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'WordPress'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - url.path
  - question: What processes were running on the web server during this attack?
    context: Compromised servers may show unusual process activity or new connections.
    range: +/-15m
    query: |
      aggregation: true
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - Image
        - CommandLine
        - User
        - ProcessGuid