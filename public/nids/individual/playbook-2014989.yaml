name: ET WEB_SPECIFIC_APPS WordPress Download Monitor thumbnail parameter Cross-Site Scripting Attempt
id: 22014989
description: |
  Detects XSS attempts targeting WordPress Download Monitor plugin via the thumbnail parameter.
  Legitimate usage involves file uploads, but script injection patterns indicate malicious exploitation.
type: detection
detection_id: 2014989
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the exact XSS payload injected in the thumbnail parameter?
    context: Understanding the script content reveals the attacker's intended client-side exploitation.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.full
        - url.query
        - http.request.method

  - question: What JavaScript events or functions were targeted in the XSS attempt?
    context: Analyzing the event handlers reveals the exploitation technique and trigger mechanism.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - url.query
        - http.request.headers

  # Type 2: Triage Assessment
  - question: Is this WordPress site actively using the Download Monitor plugin?
    context: Confirms if the target is a legitimate installation vulnerable to this specific attack.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "/wp-content/plugins/download-monitor/"
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.response.status_code

  - question: Are there legitimate file upload activities on this WordPress instance?
    context: Distinguishes between normal plugin usage and malicious exploitation attempts.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/uploader.php"
          http.request.method: "POST"
        condition: selection
      fields:
        - src_ip
        - http.response.status_code
        - http.request.body.bytes

  # Type 3: Activity Context
  - question: What WordPress reconnaissance occurred before this XSS attempt?
    context: Understanding the attack progression reveals how the attacker discovered the vulnerable plugin.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "/wp-"
            - "/plugins/"
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What other WordPress plugin vulnerabilities were tested in this session?
    context: Reveals the breadth of the attacker's WordPress exploitation attempts.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/wp-content/plugins/"
        condition: selection
      fields:
        - url.path
        - url.query
        - http.response.status_code

  # Type 4: Impact Assessment
  - question: Did the XSS payload successfully execute based on server responses?
    context: Determines if the vulnerability was exploited and script injection succeeded.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - http.response.headers

  - question: Were there subsequent requests indicating XSS payload execution?
    context: Identifies if the injected script triggered additional malicious activities.
    range: +15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "/wp-admin/"
            - "wp-login.php"
        condition: selection
      fields:
        - src_ip
        - url.full
        - http.request.headers

  # Type 5: Forensic Deep-Dive
  - question: What specific WordPress admin functions were targeted after XSS execution?
    context: Reveals the attacker's post-exploitation objectives within the WordPress environment.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "/wp-admin/"
            - "/wp-json/"
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: Were there attempts to upload malicious files through WordPress after XSS?
    context: Determines if the XSS was used as a stepping stone for further compromise.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          http.request.method: "POST"
          url.path|contains:
            - "/wp-admin/upload.php"
            - "/wp-admin/media-upload.php"
        condition: selection
      fields:
        - src_ip
        - http.request.body.bytes
        - http.response.status_code

  # Type 6: Enterprise Correlation
  - question: Are other WordPress installations showing similar XSS exploitation attempts?
    context: Identifies if this is part of a broader campaign targeting WordPress environments.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains:
            - "WordPress"
            - "Cross-Site Scripting"
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name