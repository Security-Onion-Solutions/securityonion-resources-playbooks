name: ET WEB_SPECIFIC_APPS WordPress Download Monitor tags parameter Cross-Site Scripting Attempt
id: 22014990
description: |
  Detects XSS attempts targeting WordPress Download Monitor plugin via the tags parameter.
  Legitimate tagging functionality may be exploited to inject malicious scripts into web pages.
type: detection
detection_id: 2014990
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the exact XSS payload injected in the tags parameter?
    context: Understanding the script content reveals the attacker's intended client-side exploitation method.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.full
        - url.query
        - http.request.method

  - question: What JavaScript event handlers were used in the tags XSS attempt?
    context: Analyzing the event triggers reveals how the attacker planned to execute the malicious script.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - url.query
        - http.request.headers

  # Type 2: Triage Assessment
  - question: Is the Download Monitor plugin actively used for file tagging on this WordPress site?
    context: Confirms if this is a legitimate installation with the vulnerable plugin functionality.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/wp-content/plugins/download-monitor/"
          url.query|contains: "tab="
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.response.status_code

  - question: Are there normal tagging operations performed by legitimate users?
    context: Helps distinguish between authorized plugin usage and malicious exploitation.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/uploader.php"
          url.query|contains: "tags="
        condition: selection
      fields:
        - src_ip
        - http.request.method
        - http.response.status_code

  # Type 3: Activity Context
  - question: What WordPress plugin enumeration occurred before this tags XSS attempt?
    context: Understanding the reconnaissance phase reveals how the attacker identified the vulnerability.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "/wp-content/plugins/"
            - "/readme.txt"
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: Were both thumbnail and tags parameters tested in the same attack session?
    context: Reveals if the attacker systematically tested multiple XSS vectors in the same plugin.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path|contains: "/uploader.php"
          url.query|contains:
            - "thumbnail="
            - "tags="
        condition: selection
      fields:
        - url.query
        - http.response.status_code

  # Type 4: Impact Assessment
  - question: Did the tags XSS payload execute successfully based on server responses?
    context: Determines if the vulnerability was exploited and malicious script was injected.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.bytes
        - http.response.headers

  - question: Were there subsequent WordPress admin activities indicating XSS exploitation?
    context: Identifies if the injected script was used to perform unauthorized administrative actions.
    range: +15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "/wp-admin/"
            - "/wp-login.php"
        condition: selection
      fields:
        - src_ip
        - url.full
        - http.request.method

  # Type 5: Forensic Deep-Dive
  - question: What WordPress content management functions were accessed after XSS execution?
    context: Reveals the attacker's post-exploitation activities within the WordPress CMS.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - "/wp-admin/post.php"
            - "/wp-admin/edit.php"
            - "/wp-admin/themes.php"
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: Were there attempts to modify WordPress files or install backdoors after XSS?
    context: Determines if the XSS was leveraged for persistent access or further compromise.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          http.request.method: "POST"
          url.path|contains:
            - "/wp-admin/theme-editor.php"
            - "/wp-admin/plugin-editor.php"
        condition: selection
      fields:
        - src_ip
        - http.request.body.bytes
        - http.response.status_code

  # Type 6: Enterprise Correlation
  - question: Are other systems showing similar Download Monitor plugin exploitation attempts?
    context: Identifies if this is part of a coordinated campaign targeting this specific WordPress plugin.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: "Download Monitor"
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name