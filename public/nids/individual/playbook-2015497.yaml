name: ET WEB_SPECIFIC_APPS WordPress Download Manager Cross-Site Scripting Attempt
id: 22015497
description: |
  Detects XSS attempts targeting WordPress Download Manager plugin via malicious JavaScript in the cid parameter.
  May trigger on legitimate file management activities with special characters in category names or descriptions.
type: detection
detection_id: 2015497
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the exact XSS payload in the Download Manager cid parameter?
    context: The injected script reveals attack sophistication and potential impact on file management system.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - url.full
        - url.query
        - http.request.body.content
        - http.request.method

  - question: Is this legitimate Download Manager administration?
    context: Site administrators may manage file categories with names containing special characters or symbols.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: 'file-manager'
        condition: selection
      fields:
        - src_ip
        - url.path
        - http.request.method

  - question: What other Download Manager functions were accessed?
    context: Understanding normal plugin workflow helps distinguish between attacks and legitimate file management.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: 'file-manager'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - http.response.status_code

  - question: What is the attack progression leading to this XSS attempt?
    context: Request sequence analysis reveals whether this is reconnaissance, exploitation, or post-exploitation activity.
    range: -15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - user_agent.original

  - question: Was the XSS payload successfully processed by the server?
    context: Response analysis indicates whether the malicious script was executed or blocked by security measures.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id|expand: '%community_id%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.bytes
        - http.response.body.content

  - question: Are there signs of successful XSS exploitation in file management?
    context: Successful XSS could compromise file access controls or enable unauthorized downloads.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - url.full
        - http.request.headers
        - http.request.body.content

  - question: What files and categories could be accessed through this vulnerability?
    context: Understanding plugin data structure helps assess potential data exposure and integrity risks.
    range: -1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          url.path|contains:
            - 'file-manager'
            - 'categories'
        condition: selection
      fields:
        - url.full
        - http.request.method
        - src_ip

  - question: Are there indicators of automated WordPress plugin vulnerability scanning?
    context: User agent patterns and timing help distinguish between automated tools and manual exploitation attempts.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/wp-admin/admin.php'
        condition: selection
      fields:
        - user_agent.original
        - url.query
        - http.response.status_code

  - question: What other WordPress admin functions were probed?
    context: Broad admin interface scanning suggests systematic vulnerability assessment across plugin ecosystem.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          url.path|contains: '/wp-admin/'
        condition: selection
      fields:
        - url.full
        - http.response.status_code

  - question: Are other systems experiencing similar Download Manager attacks?
    context: Coordinated attacks against specific file management plugins indicate targeted campaign activity.
    range: -4h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: 'Download Manager'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: Is this part of a broader WordPress file management attack campaign?
    context: Multiple file-related plugin attacks suggest focus on data access and file system compromise.
    range: -6h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains:
            - 'WordPress'
            - 'file'
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - rule.severity