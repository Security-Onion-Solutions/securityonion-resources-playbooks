name: ET ADWARE_PUP Win32/GameHack.COG Variant CnC Activity
id: 22029099
description: |
  Detects GameHack.COG variant communicating with command and control servers.
  This PUP typically targets gaming applications and may steal credentials.
  Could indicate unauthorized game cheating software or credential theft malware.
type: detection
detection_id: 2029099
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What system information was transmitted in the POST request?
    context: GameHack variants send HWID, username, and version data that reveals system compromise scope.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - http.request.body.content
        - http.request.method
        - url.full
        - http.content_type

  - question: What are the decoded HWID and user credentials being exfiltrated?
    context: Understanding transmitted data helps assess credential theft and system identification.
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          url.path: '/mUser.php'
          http.request.method: 'POST'
        condition: selection
      fields:
        - http.request.body.content
        - http.user_agent
        - http.request.headers

  - question: Is this GameHack activity associated with legitimate gaming software?
    context: Some game modification tools may trigger similar patterns during authorized use.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip|expand: '%src_ip%'
          Image|contains:
            - 'game'
            - 'Game'
            - 'steam'
            - 'Steam'
        condition: selection
      fields:
        - Image
        - CommandLine
        - User
        - ParentImage

  - question: What process initiated this C2 communication?
    context: Identifying the source process reveals the malware executable and infection vector.
    range: -15m
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip|expand: '%src_ip%'
        condition: selection
      fields:
        - Image
        - CommandLine
        - User
        - ProcessGuid

  - question: Are there signs of GameHack malware installation or persistence?
    context: File system analysis reveals malware binaries and persistence mechanisms.
    range: -1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip|expand: '%src_ip%'
          TargetFilename|contains:
            - 'hack'
            - 'cheat'
            - 'mod'
            - 'trainer'
        condition: selection
      fields:
        - TargetFilename
        - file.hash.md5
        - file.hash.sha256
        - EventType

  - question: What was the C2 server response to this registration?
    context: Server responses may contain commands, configuration updates, or additional payloads.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%dst_ip%'
          dst_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - http.response.status_code
        - http.response.body.content
        - http.response.headers

  - question: Are there additional C2 communications from this host?
    context: GameHack variants often maintain persistent communication channels for updates and commands.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          http.request.method: 'POST'
        condition: selection
      fields:
        - dst_ip
        - url.path
        - http.content_type

  - question: What gaming-related processes or files are present on the system?
    context: Understanding the gaming environment helps determine if this is targeted malware or incidental infection.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip|expand: '%src_ip%'
          Image|contains:
            - '.exe'
        condition: selection
      fields:
        - Image
        - User

  - question: Are there registry modifications for game hooks or persistence?
    context: GameHack malware often modifies registry to hook into games or maintain persistence.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: registry_event
      detection:
        selection:
          host.ip|expand: '%src_ip%'
          TargetObject|contains:
            - 'Run'
            - 'Game'
            - 'Steam'
        condition: selection
      fields:
        - TargetObject
        - Details
        - EventType

  - question: Are other systems showing similar GameHack C2 activity?
    context: GameHack campaigns may target multiple gaming systems in the network.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name: 'ET ADWARE_PUP Win32/GameHack.COG Variant CnC Activity'
        condition: selection
      fields:
        - src_ip
        - dst_ip

  - question: What DNS queries were made for the GameHack C2 domain?
    context: DNS resolution patterns help identify C2 infrastructure and potential domain generation algorithms.
    range: -15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: dns
      detection:
        selection:
          host.ip|expand: '%src_ip%'
          dns.resolved_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - dns.query.name
        - dns.query.type_name
        - dns.resolved_ip