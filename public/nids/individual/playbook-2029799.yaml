name: ET MALWARE Suspected CHAOS CnC Inbound (persistence enable)
id: 22029799
description: |
  Detects CHAOS RAT command and control traffic containing base64-encoded persistence enable command.
  The pattern "cGVyc2lzdGVuY2VfZW5hYmxl" decodes to "persistence_enable", indicating malware establishing persistence.
  May trigger on legitimate software installation or system administration tools configuring startup services.
type: detection
detection_id: 2029799
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What is the exact persistence command being transmitted to the endpoint?
    context: Understanding the specific command confirms malicious intent and reveals persistence methodology.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - payload
        - rule.name

  - question: Is this persistence configuration part of legitimate software installation?
    context: Authorized applications and system updates may configure startup services or registry entries.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
          Image|contains:
            - 'msiexec'
            - 'setup'
            - 'install'
            - 'update'
        condition: selection
      fields:
        - User
        - Image
        - CommandLine
        - ProcessGuid

  - question: What process is receiving and executing the persistence command?
    context: Identifying the target process helps determine if this is malware or legitimate software.
    range: -15m
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - User
        - Image
        - CommandLine
        - ProcessGuid
        - ParentImage

  - question: What other CHAOS commands preceded the persistence activation?
    context: Understanding the sequence of C2 commands reveals the attacker's operational workflow.
    range: -2h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          rule.name|contains: 'CHAOS'
        condition: selection
      fields:
        - rule.name
        - payload
        - rule.category

  - question: What registry modifications are being made for persistence?
    context: CHAOS typically uses registry Run keys or service entries to maintain persistence across reboots.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: registry_event
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
          TargetObject|contains:
            - 'Run'
            - 'RunOnce'
            - 'Services'
            - 'Startup'
        condition: selection
      fields:
        - TargetObject
        - Details
        - ProcessGuid
        - EventType

  - question: Are files being created or modified to establish persistence?
    context: Malware may create startup scripts, scheduled tasks, or service binaries for persistence.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
          TargetFilename|contains:
            - 'Startup'
            - 'System32'
            - 'AppData'
            - 'ProgramData'
        condition: selection
      fields:
        - TargetFilename
        - file.hash.md5
        - ProcessGuid

  - question: What network connections follow the persistence establishment?
    context: After establishing persistence, malware typically tests connectivity or downloads additional payloads.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - dst_ip
        - dst_port
        - protocol
        - bytes_toserver
        - bytes_toclient

  - question: Has the persistence mechanism been successfully activated?
    context: Confirming successful persistence helps assess the completeness of the compromise.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip|expand: '%dst_ip%'
          User: 'SYSTEM'
        condition: selection
      fields:
        - Image
        - CommandLine
        - ProcessGuid
        - ParentImage

  - question: What additional capabilities are being deployed after persistence?
    context: Understanding post-persistence activities reveals the attacker's ultimate objectives.
    range: +4h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          rule.category|contains:
            - 'trojan'
            - 'malware'
            - 'command-and-control'
        condition: selection
      fields:
        - rule.name
        - src_ip
        - rule.category

  - question: Are other systems receiving similar persistence commands?
    context: Determining if this is part of a coordinated campaign establishing persistence across multiple endpoints.
    range: +/-4h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: 'persistence'
        condition: selection
      fields:
        - dst_ip
        - rule.name
        - host.hostname

  - question: What C2 infrastructure supports this persistent CHAOS deployment?
    context: Identifying the complete C2 infrastructure helps with blocking and threat attribution.
    range: +/-8h
    query: |
      aggregation: true
      logsource:
        category: network
        service: dns
      detection:
        selection:
          dns.resolved_ip|expand: '%src_ip%'
        condition: selection
      fields:
        - dns.query.name
        - dns.query.type_name
        - host.ip