name: GPL RPC CMSD UDP CMSD_CREATE buffer overflow attempt
id: 22101907
description: |
  Detects potential buffer overflow attempts against the Calendar Manager Service Daemon (CMSD)
  via the CMSD_CREATE RPC call. This targets CVE-1999-0696, a vulnerability in CDE calendar
  services where excessively long parameters can cause buffer overflows. CMSD is a legacy
  service rarely used in modern environments, making this activity highly suspicious.
type: detection
detection_id: 2101907
detection_category:
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  # Type 1: Artifact Analysis
  - question: What was the complete RPC CMSD_CREATE call structure that triggered the overflow detection?
    context: Analyzing the full RPC payload reveals the exploitation attempt and target calendar service.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - payload
        - payload_printable
        - rule.name

  - question: What specific buffer size and parameters were detected in the CMSD_CREATE call?
    context: The rule detects buffers larger than 1024 bytes, indicating potential overflow exploitation.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - flow.bytes_toserver
        - alert.signature
        - proto

  # Type 2: Triage Assessment
  - question: Is the Calendar Manager Service legitimately running on this system?
    context: CMSD is a legacy CDE service rarely found in modern environments, making this highly suspicious.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          proto: UDP
        condition: selection
      fields:
        - src_ip
        - dst_port
        - app_proto
        - conn_state

  - question: Are there legitimate CDE or calendar services that would use CMSD RPC calls?
    context: Modern calendar systems use different protocols, making RPC CMSD calls obsolete.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
          proto: UDP
        condition: selection
      fields:
        - src_ip
        - dst_port
        - flow.bytes_toserver

  # Type 3: Activity Context
  - question: What RPC enumeration or reconnaissance preceded this CMSD exploitation attempt?
    context: CMSD exploits are typically preceded by RPC service discovery and enumeration.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
          dst_port: 111
          proto: UDP
        condition: selection
      fields:
        - flow.bytes_toserver
        - flow.bytes_toclient
        - conn_state

  - question: Were there other RPC service attacks or exploits from this source?
    context: Attackers often target multiple RPC services in coordinated campaigns.
    range: -2h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.category|contains:
            - "rpc"
            - "misc-attack"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - dst_port

  - question: What was the sequence of network activity leading to the CMSD attack?
    context: Understanding the attack progression reveals the attacker's methodology and objectives.
    range: -30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - dst_port
        - proto
        - flow.pkts_toserver
        - conn_state

  # Type 4: Impact Assessment
  - question: Did the target system respond to the CMSD buffer overflow attempt?
    context: Response patterns indicate if the CMSD service is running and potentially vulnerable.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip|expand: '%dst_ip%'
          dst_ip|expand: '%src_ip%'
          proto: UDP
        condition: selection
      fields:
        - flow.bytes_toclient
        - conn_state
        - flow.reason

  - question: Are there signs of successful RPC service compromise or code execution?
    context: Successful CMSD exploitation may lead to remote code execution and system compromise.
    range: +30m
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - src_ip
        - dst_port
        - app_proto
        - conn_state

  - question: Has the system exhibited unusual behavior following the exploitation attempt?
    context: Successful buffer overflows may result in backdoor installation or lateral movement.
    range: +1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip|expand: '%dst_ip%'
        condition: selection
      fields:
        - rule.name
        - src_ip
        - rule.category

  # Type 5: Forensic Deep-Dive
  - question: Does the payload contain shellcode or executable content patterns?
    context: CMSD buffer overflow exploits typically include shellcode for remote code execution.
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          document_id|expand: '%document_id%'
        condition: selection
      fields:
        - payload_printable
        - flow.bytes_toserver

  - question: What is the source IP's attack profile and infrastructure characteristics?
    context: CMSD exploits often originate from specialized attack tools targeting legacy Unix systems.
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.category|contains:
            - "attempted-admin"
            - "misc-attack"
        condition: selection
      fields:
        - src_ip
        - geoip.country_name
        - rule.name

  - question: Is this a known CVE-1999-0696 exploit variant or custom payload?
    context: Identifying the specific exploit helps determine the attacker's tools and sophistication.
    range: -1h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.name|contains: "CMSD"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - alert.signature

  # Type 6: Enterprise Correlation
  - question: Are other systems being targeted with similar RPC CMSD exploits?
    context: Coordinated CMSD attacks indicate a campaign targeting legacy Unix/CDE systems.
    range: -24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          rule.name|contains: "CMSD"
          rule.category: "attempted-admin"
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - rule.name

  - question: Is this part of broader legacy Unix service exploitation campaign?
    context: CMSD exploits are often part of campaigns targeting older Unix systems and RPC services.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          src_ip|expand: '%src_ip%'
          rule.category|contains:
            - "rpc"
            - "attempted-admin"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - rule.category