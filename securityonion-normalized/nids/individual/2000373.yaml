name: ET EXPLOIT MS-SQL SQL Injection line comment
id: 1243207
description: |
  Detects SQL injection attempts against MS-SQL servers using line comment syntax.
  May trigger on legitimate database administration tools or applications using comment syntax in queries.
type: detection
detection_id: 2000373
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload sent to the database server?
    context: Reveals the specific injection syntax and potential SQL commands being executed.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this client normally connect to SQL Server port 1433?
    context: Determines if this database connection represents normal application behavior.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What application or process initiated the connection to the SQL server?
    context: Identifies whether the connection originates from legitimate database clients or suspicious processes.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What other database connections occurred from this source IP?
    context: Identifies additional database targeting that may indicate systematic SQL injection attempts.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
          dst_port: [1433, 3306, 5432, 1521, 27017]
        condition: selection
      fields:
        - dst_ip
        - dst_port
        - connection.state
        - network.bytes_sent
        - network.bytes_received
  - question: Are other hosts being targeted with similar SQL injection attempts?
    context: Determines scope of potential database compromise campaign.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What DNS queries preceded this database connection attempt?
    context: Reveals reconnaissance or targeting patterns that led to the SQL injection attempt.
    range: -5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: dns
      detection:
        selection:
          src_ip: '{source.ip}'
        condition: selection
      fields:
        - dns.query.name
        - dns.query.type_name
        - dns.resolved_ip
  - question: Did any database administration tools get executed after this connection?
    context: Identifies potential post-exploitation database management activity.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip: '{network.private_ip}'
          Image|contains:
          - sqlcmd.exe
          - osql.exe
          - isql.exe
          - mysql.exe
          - psql.exe
        condition: selection
      fields:
        - User
        - Image
        - CommandLine
        - ParentImage
        - ProcessGuid
  - question: Were any database files or scripts created following this injection attempt?
    context: Detects file-based evidence of successful SQL injection exploitation.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .py
          - .pl
          - .sh
          - .php
          - .asp
          - .aspx
          - .js
          - .vbs
          - .ps1
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Are there related SQL injection alerts across the organization?
    context: Identifies broader campaign patterns targeting database infrastructure.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: Did the source IP attempt connections to other database ports?
    context: Reveals systematic database service discovery and targeting patterns.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
          dst_port: [1433, 1434, 3306, 5432, 1521, 1522, 27017, 6379, 5984]
        filter:
          dst_ip: '{destination.ip}'
          dst_port: '{destination.port}'
        condition: selection and not filter
      fields:
        - dst_ip
        - dst_port
        - connection.state
        - connection.state_description
  - question: What is the pattern of SQL injection attempts from this source?
    context: Analyzes timing and frequency to distinguish automated tools from manual exploitation.
    range: +/-4h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          src_ip: '{source.ip}'
          rule.category: "attempted-user"
        sql_injection:
          rule.name|contains:
            - "SQL"
            - "injection"
            - "database"
        condition: selection and sql_injection
      fields:
        - rule.name
        - dst_ip
        - dst_port
        - alert.severity_label
