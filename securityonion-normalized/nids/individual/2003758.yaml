name: ET WEB_SPECIFIC_APPS John Mordo Jobs SQL Injection Attempt
id: 1246099
description: |
  Detects SQL injection attempts against John Mordo Jobs application targeting the cid parameter.
  May trigger on legitimate database queries or security testing tools scanning for CVE-2007-2370.
type: detection
detection_id: 2003758
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload in the HTTP request?
    context: Reveals the exact SELECT statement and injection technique used against the cid parameter.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally access the John Mordo Jobs application?
    context: Determines if HTTP requests to this web application are typical for this source.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What other SQL injection attempts occurred against this web server?
    context: Identifies additional injection vectors or scanning activity targeting the same application.
    range: +/-2h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    dst_ip: '{destination.ip}'\n    http.uri|contains:\n      - \"SELECT\"\n      - \"UNION\"\n      - \"INSERT\"\n      - \"UPDATE\"\n      - \"DELETE\"\n      - \"DROP\"\n  condition: selection\nfields:\n  - src_ip\n  - http.uri\n  - http.user_agent\n  - http.method\n  \n"
  - question: Were other parameters in the John Mordo Jobs application targeted?
    context: Assesses the scope of SQL injection testing against different application entry points.
    range: +/-2h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    src_ip: '{source.ip}'\n    dst_ip: '{destination.ip}'\n    http.uri|contains: \"/index.php?\"\n  condition: selection\nfields:\n  - http.uri\n  - http.method\n  - http.status_code\n  \n"
  - question: What was the web server's response to the SQL injection attempt?
    context: Determines if the injection was successful based on HTTP status codes and response patterns.
    range: +/-15m
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    community_id: '{network.community_id}'\n  condition: selection\nfields:\n  - http.status_code\n  - http.response.body.length\n  - http.method\n  - http.uri\n  \n"
  - question: Are other hosts attempting SQL injection against this web server?
    context: Identifies coordinated attacks or broader scanning campaigns targeting the application.
    range: +/-24h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    dst_ip: '{destination.ip}'\n    http.uri|contains: \"cid=\"\n  filter:\n    src_ip: '{source.ip}'\n  condition: selection and not filter\nfields:\n  - src_ip\n  - http.uri\n  - http.user_agent\n  \n"
  - question: What user agent was used for the SQL injection attempt?
    context: Reveals automated tools or browsers used in the attack for attribution analysis.
    range: +/-15m
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    community_id: '{network.community_id}'\n  condition: selection\nfields:\n  - http.user_agent\n  - src_ip\n  - http.uri\n  \n"
  - question: Did this source IP attempt authentication bypass techniques?
    context: Assesses whether SQL injection is part of broader authentication circumvention attempts.
    range: +/-2h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    src_ip: '{source.ip}'\n    dst_ip: '{destination.ip}'\n  bypass_patterns:\n    http.uri|contains:\n      - \"admin\"\n      - \"login\"\n      - \"auth\"\n      - \"' OR '1'='1\"\n      - \"' OR 1=1\"\n      - \"admin'--\"\n  condition: selection and bypass_patterns\nfields:\n  - http.uri\n  - http.method\n  - http.status_code\n  \n"
  - question: Were there successful database connections from the web server after the injection attempt?
    context: Identifies potential data exfiltration or unauthorized database access following injection.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{destination.ip}'
          dst_port:
            - 3306
            - 1433
            - 5432
            - 1521
        condition: selection
      fields:
        - dst_ip
        - dst_port
        - connection.state
        - network.protocol
