name: ET WEB_SPECIFIC_APPS WordPress SQL Injection Attempt -- admin-functions.php INSERT
id: 1221455
description: |
  Detects SQL injection attempts targeting WordPress admin-functions.php with INSERT statements.
  May trigger on legitimate administrative database operations or security testing activities.
type: detection
detection_id: 2004405
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload in the admin-functions.php request?
    context: Reveals the specific INSERT statement and injection technique being attempted.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Is this WordPress admin area normally accessed from external sources?
    context: Determines if external access to WordPress admin functions represents normal usage.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What other WordPress admin pages were accessed from this source?
    context: Identifies broader WordPress admin enumeration or exploitation attempts.
    range: +/-2h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    src_ip: '{source.ip}'\n    http.uri|contains: \"/wp-admin/\"\n  condition: selection\nfields:\n  - http.uri\n  - http.method\n  - http.status_code\n  - http.user_agent\n  \n"
  - question: What process initiated the connection to the WordPress server?
    context: Identifies the web server or application handling the malicious request.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What other external connections occurred from the WordPress server?
    context: Identifies potential data exfiltration or additional compromise indicators.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Were any files created or modified on the WordPress server after this request?
    context: Assesses whether the SQL injection attempt resulted in file system changes.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .exe
          - .dll
          - .bat
          - .cmd
          - .ps1
          - .vbs
          - .js
          - .scr
          - .com
          - .pif
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Did the source IP attempt SQL injection against other WordPress installations?
    context: Determines if this is part of a broader WordPress targeting campaign.
    range: +/-24h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    src_ip: '{source.ip}'\n    http.uri|contains: \"wp-\"\n  sql_injection:\n    http.uri|contains:\n      - \"INSERT\"\n      - \"SELECT\"\n      - \"UPDATE\"\n      - \"DELETE\"\n      - \"UNION\"\n  condition: selection and sql_injection\nfields:\n  - dst_ip\n  - http.virtual_host\n  - http.uri\n  - http.method\n  \n"
  - question: Are other hosts being targeted with similar WordPress SQL injection attempts?
    context: Identifies the scope of the SQL injection campaign across the organization.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What was the response status code for the SQL injection attempt?
    context: Determines if the injection attempt was successful or blocked.
    range: +/-15m
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    src_ip: '{source.ip}'\n    dst_ip: '{destination.ip}'\n    http.uri|contains: \"admin-functions.php\"\n  condition: selection\nfields:\n  - http.status_code\n  - http.response.body.length\n  - http.method\n  - http.uri\n  \n"
  - question: Did the attacker attempt to access any database files or backups?
    context: Identifies attempts to directly access WordPress database files after injection.
    range: +2h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    src_ip: '{source.ip}'\n  database_files:\n    http.uri|contains:\n      - \".sql\"\n      - \".db\"\n      - \"wp-config.php\"\n      - \"database\"\n      - \"backup\"\n  condition: selection and database_files\nfields:\n  - http.uri\n  - http.method\n  - http.status_code\n  - dst_ip\n  \n"
  - question: Was any persistence mechanism established through the WordPress admin interface?
    context: Determines if the SQL injection led to persistent access methods.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
        persistence:
          http.uri|contains:
            - "plugin"
            - "theme"
            - "upload"
            - "install"
            - "user"
        condition: selection and persistence
      fields:
        - http.uri
        - http.method
        - http.status_code
        - http.user_agent