name: ET WEB_SPECIFIC_APPS DGNews SQL Injection Attempt -- news.php newsid ASCII
id: 1206508
description: |
  Detects SQL injection attempts targeting DGNews application through news.php newsid parameter using ASCII function.
  May trigger on legitimate database queries using ASCII functions or security testing tools.
type: detection
detection_id: 2004460
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload in the news.php request?
    context: Reveals the specific injection technique and SQL commands being attempted.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally access the DGNews application?
    context: Determines if this represents unusual access to the web application.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What other requests were made to news.php around this time?
    context: Identifies potential reconnaissance or multiple injection attempts.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains: "news.php"
        condition: selection
      fields:
        - http.uri
        - http.method
        - http.user_agent
        - http.status_code
  - question: Were there successful database responses after the SQL injection attempt?
    context: Assesses whether the injection attempt succeeded in querying the database.
    range: +15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          src_ip: '{source.ip}'
          http.status_code: [200, 500]
        condition: selection
      fields:
        - http.status_code
        - http.response.body.length
        - http.uri
  - question: What other web application attacks originated from this source?
    context: Identifies patterns of web application scanning or exploitation attempts.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          src_ip: '{source.ip}'
          rule.category: "web-application-attack"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - http.uri
        - alert.severity_label
  - question: Are other hosts being targeted with similar SQL injection patterns?
    context: Determines scope of SQL injection campaign across the environment.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What web server process handled the malicious news.php request?
    context: Identifies the web application server that processed the injection attempt.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: Did any database-related processes show unusual activity after this request?
    context: Identifies database processes that may have executed the injected SQL commands.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip: '{destination.ip}'
          Image|contains:
            - "mysql"
            - "postgres"
            - "sqlserver"
            - "oracle"
            - "sqlite"
        condition: selection
      fields:
        - Image
        - CommandLine
        - User
        - ProcessGuid
  - question: Were any database or configuration files accessed after the injection attempt?
    context: Identifies potential data access or configuration changes resulting from successful injection.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{destination.ip}'
          file.name|contains:
            - ".sql"
            - ".db"
            - ".mdb"
            - "config"
            - "database"
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
  - question: What user-agent was used for the SQL injection attempt?
    context: Reveals tools or browsers used for the attack and aids in attribution.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.user_agent
        - http.method
        - http.uri
  - question: Are there signs of data exfiltration following the SQL injection attempt?
    context: Identifies potential data theft through large response sizes or external connections.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{destination.ip}'
          dst_ip: '{source.ip}'
          http.response.body.length|gte: 10000
        condition: selection
      fields:
        - http.response.body.length
        - http.status_code
        - http.uri