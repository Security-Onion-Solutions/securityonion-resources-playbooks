name: ET WEB_SPECIFIC_APPS Sphider SQL Injection Attempt -- search.php category SELECT
id: 1222966
description: |
  Detects SQL injection attempts against Sphider search.php targeting the category parameter.
  May trigger on legitimate database queries or security testing of the Sphider application.
type: detection
detection_id: 2004816
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload in the search.php request?
    context: Reveals the exact malicious SQL syntax used in the exploitation attempt.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally receive requests to the Sphider search application?
    context: Determines if access to this web application is typical for this server.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What web server process handled the SQL injection request?
    context: Identifies the specific web application service processing the malicious request.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What other HTTP requests occurred from this source IP?
    context: Identifies additional web application attack attempts or reconnaissance activity.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
        condition: selection
      fields:
        - http.method
        - http.uri
        - http.user_agent
        - http.status_code
  - question: Were any database-related files accessed after the SQL injection attempt?
    context: Identifies potential data exfiltration or database file manipulation.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{destination.ip}'
        db_files:
          file.name|contains:
            - '.db'
            - '.sql'
            - '.mdb'
            - '.sqlite'
            - 'database'
        condition: selection and db_files
      fields:
        - file.path
        - file.name
        - Image
        - User
  - question: Did this source IP attempt SQL injection against other web applications?
    context: Determines if this is part of broader web application scanning or attack campaign.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
        sql_patterns:
          http.uri|contains:
            - 'SELECT'
            - 'UNION'
            - 'INSERT'
            - 'UPDATE'
            - 'DELETE'
            - 'DROP'
        condition: selection and sql_patterns
      fields:
        - http.method
        - http.uri
        - http.virtual_host
        - dst_ip
  - question: Are other hosts receiving similar SQL injection attempts?
    context: Identifies if this attack pattern is targeting multiple servers in the environment.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What was the web server's response to the SQL injection attempt?
    context: Determines if the injection was successful based on HTTP response codes and content.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          dst_ip: '{destination.ip}'
          http.uri|contains: 'search.php'
        condition: selection
      fields:
        - http.status_code
        - http.response.body.length
        - http.method
        - http.uri
  - question: Did the web server process create any new files after the SQL injection attempt?
    context: Identifies potential webshell creation or file system compromise.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          ProcessGuid: '{event_data.process.entity_id}'
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - User
  - question: Were there any database connection attempts from the web server after the injection?
    context: Assesses whether the SQL injection resulted in unauthorized database access.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{destination.ip}'
        db_ports:
          dst_port:
            - 3306  # MySQL
            - 5432  # PostgreSQL
            - 1433  # SQL Server
            - 1521  # Oracle
            - 5984  # CouchDB
        condition: selection and db_ports
      fields:
        - dst_ip
        - dst_port
        - network.protocol
        - connection.state
  - question: What user-agent pattern was used in the SQL injection request?
    context: Identifies automated tools or specific attack frameworks being used.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          dst_ip: '{destination.ip}'
          http.uri|contains: 'search.php'
        condition: selection
      fields:
        - http.user_agent
        - http.method
        - http.uri