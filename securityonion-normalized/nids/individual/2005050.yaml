name: ET WEB_SPECIFIC_APPS EasyMoblog SQL Injection Attempt -- add_comment.php post_id UPDATE
id: 1223440
description: |
  Detects SQL injection attempts targeting EasyMoblog's add_comment.php script using UPDATE queries in the post_id parameter.
  May trigger on legitimate database maintenance scripts or automated testing tools.
type: detection
detection_id: 2005050
detection_category: ''
detection_type: nids
contributors:
- SecurityOnionSolutions
created: 2024-01-15
questions:
- question: What was the complete SQL injection payload in the add_comment.php request?
  context: Reveals the specific UPDATE statement and injection technique used against the post_id parameter.
  range: +/-15m
  query: |
    aggregation: false
    logsource:
      category: network
      service: http
    detection:
      selection:
        community_id: '{network.community_id}'
      condition: selection
    fields:
      - http.method
      - http.useragent
      - http.virtual_host
      - http.uri
      - http.status_code
- question: Does this host normally access the EasyMoblog application?
  context: Determines if this represents unusual access to the vulnerable web application.
  range: -7d
  query: |
    aggregation: true
    logsource:
      category: network
      service: http
    detection:
      selection:
        dst_ip: '{destination.ip}'
      condition: selection
    fields:
      - dst_ip
- question: What web server process handled the SQL injection request?
  context: Identifies the specific web application service processing the malicious request.
  range: +/-15m
  query: |
    aggregation: false
    logsource:
      category: network
    detection:
      selection:
        community_id: '{network.community_id}'
      filter:
        Image|exists: true
      condition: selection and filter
    fields:
      - hostname
      - User
      - Image
      - CommandLine
      - ProcessGuid
- question: What other HTTP requests occurred from this source around the same time?
  context: Identifies additional web application attack attempts or reconnaissance activity.
  range: +/-30m
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        src_ip: '{source.ip}'
    fields:
    - http.method
    - http.uri
    - http.user_agent
    - http.status_code
    - dst_ip
    - dst_port
    logsource:
      category: network
      service: http
- question: Are there signs of successful database manipulation after the injection attempt?
  context: Assesses whether the SQL injection resulted in database modifications or data access.
  range: +1h
  query: |
    aggregation: false
    logsource:
      category: file_event
    detection:
      selection:
        host.ip: '{network.private_ip}'
        file.name|endswith:
        - .doc
        - .docx
        - .xls
        - .xlsx
        - .pdf
        - .rtf
        - .ppt
        - .pptx
      condition: selection
    fields:
      - file.path
      - file.name
      - Image
      - ProcessGuid
      - User
- question: Did the web application create any new files following the injection attempt?
  context: Identifies potential web shells or malicious files created through SQL injection.
  range: +2h
  query: |
    aggregation: false
    logsource:
      category: file_event
    detection:
      selection:
        host.ip: '{network.private_ip}'
        file.name|endswith:
        - .exe
        - .dll
        - .bat
        - .cmd
        - .ps1
        - .vbs
        - .js
        - .scr
        - .com
        - .pif
      condition: selection
    fields:
      - file.path
      - file.name
      - Image
      - ProcessGuid
      - User
- question: Are other hosts attempting similar SQL injection attacks against EasyMoblog?
  context: Determines if this is part of a coordinated campaign targeting the application.
  range: +/-24h
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        http.uri|contains: UPDATE
    fields:
    - src_ip
    - http.uri
    - http.user_agent
    - dst_ip
    logsource:
      category: network
      service: http
- question: What other web applications on the same server received requests from this source?
  context: Identifies broader web application attack patterns against the targeted server.
  range: +/-2h
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        dst_ip: '{destination.ip}'
        src_ip: '{source.ip}'
    fields:
    - http.method
    - http.uri
    - http.user_agent
    - http.status_code
    logsource:
      category: network
      service: http
- question: Are there related alerts indicating successful compromise of the web application?
  context: Determines if the SQL injection attempt was part of a successful attack chain.
  range: +/-6h
  query: |
    aggregation: false
    logsource:
      category: alert
    detection:
      selection:
        related_ip: '{related.ip}'
      filter:
        document_id: '{soc_id}'
      condition: selection and not filter
    fields:
      - rule.name
      - rule.category
      - src_ip
      - dst_ip
- question: Did lateral movement occur from the web server after the injection attempt?
  context: Identifies potential movement from the compromised web application to other systems.
  range: +4h
  query: |
    aggregation: false
    logsource:
      category: network
      service: connection
    detection:
      selection:
        src_ip: '{network.private_ip}'
        dst_port:
        - 445    # SMB
        - 139    # NetBIOS
        - 3389   # RDP
        - 5985   # WinRM HTTP
        - 5986   # WinRM HTTPS
        - 22     # SSH
        - 23     # Telnet
        - 135    # RPC
        - 5900   # VNC
      condition: selection
    fields:
      - src_ip
      - src_port
      - dst_ip
      - dst_port
      - network.transport