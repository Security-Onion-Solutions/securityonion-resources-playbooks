name: ET WEB_SPECIFIC_APPS SpoonLabs Vivvo Article Management CMS SQL Injection Attempt
id: 1220483
description: |
  Detects SQL injection attempts targeting show_webfeed.php in SpoonLabs Vivvo CMS through the wcHeadlines parameter.
  May trigger on legitimate RSS feed requests with complex query parameters or security testing.
type: detection
detection_id: 2005156
detection_category: ''
detection_type: nids
contributors:
- SecurityOnionSolutions
created: 2024-01-15
questions:
- question: What was the complete HTTP request containing the SQL injection attempt?
  context: Reveals the full injection payload and attack vector targeting the wcHeadlines parameter.
  range: +/-15m
  query: |
    aggregation: false
    logsource:
      category: network
      service: http
    detection:
      selection:
        community_id: '{network.community_id}'
      condition: selection
    fields:
      - http.method
      - http.useragent
      - http.virtual_host
      - http.uri
      - http.status_code
- question: Does this host normally access RSS feeds or web applications on this server?
  context: Determines if HTTP requests to this web server represent normal usage patterns.
  range: -7d
  query: |
    aggregation: true
    logsource:
      category: network
      service: http
    detection:
      selection:
        dst_ip: '{destination.ip}'
      condition: selection
    fields:
      - dst_ip
- question: What web application or process handled this SQL injection attempt?
  context: Identifies the web server or application that processed the malicious request.
  range: +/-15m
  query: |
    aggregation: false
    logsource:
      category: network
    detection:
      selection:
        community_id: '{network.community_id}'
      filter:
        Image|exists: true
      condition: selection and filter
    fields:
      - hostname
      - User
      - Image
      - CommandLine
      - ProcessGuid
- question: What other external connections occurred from the requesting host?
  context: Identifies additional reconnaissance or attack activity from the same source.
  range: +/-10m
  query: |
    aggregation: false
    logsource:
      category: network
      service: connection
    detection:
      selection:
        src_ip: '{source.ip}'
      private:
        dst_ip|cidr:
          - '10.0.0.0/8'
          - '127.0.0.0/8'
          - '172.16.0.0/12'
          - '192.168.0.0/16'
          - '169.254.0.0/16'
      filter:
        dst_ip: '{network.public_ip}'
      condition: selection and not (private or filter)
    fields:
      - dst_ip
      - dst_port
      - network.transport
      - connection.state_description
- question: Are other hosts attempting similar SQL injection attacks against web applications?
  context: Determines if this represents coordinated web application scanning or exploitation.
  range: +/-24h
  query: |
    aggregation: false
    logsource:
      category: network
      service: connection
    detection:
      selection:
        dst_ip: '{network.public_ip}'
      filter:
        src_ip: '{source.ip}'
      condition: selection and not filter
    fields:
      - src_ip
      - dst_port
      - network.transport
      - connection.state_description
- question: What files were created on the web server after this SQL injection attempt?
  context: Identifies potential web shells or malicious files uploaded through successful exploitation.
  range: +1h
  query: |
    aggregation: false
    logsource:
      category: file_event
    detection:
      selection:
        host.ip: '{network.private_ip}'
        file.name|endswith:
        - .py
        - .pl
        - .sh
        - .php
        - .asp
        - .aspx
        - .js
        - .vbs
        - .ps1
      condition: selection
    fields:
      - file.path
      - file.name
      - Image
      - ProcessGuid
      - User
- question: Were any database-related processes executed following this request?
  context: Reveals whether the SQL injection attempt successfully interacted with backend databases.
  range: +30m
  query: |
    aggregation: false
    logsource:
      category: process_creation
    detection:
      selection:
        host.ip: '{network.private_ip}'
        Image|contains:
        - mysql.exe
        - mysqld.exe
        - sqlservr.exe
        - postgres.exe
        - oracle.exe
      condition: selection
    fields:
      - User
      - Image
      - CommandLine
      - ParentImage
      - ProcessGuid
- question: Did any lateral movement occur from the web server after this attack?
  context: Assesses whether successful exploitation led to internal network access.
  range: +2h
  query: |
    aggregation: false
    logsource:
      category: network
      service: connection
    detection:
      selection:
        src_ip: '{network.private_ip}'
        dst_port:
        - 445    # SMB
        - 139    # NetBIOS
        - 3389   # RDP
        - 5985   # WinRM HTTP
        - 5986   # WinRM HTTPS
        - 22     # SSH
        - 23     # Telnet
        - 135    # RPC
        - 5900   # VNC
      condition: selection
    fields:
      - src_ip
      - src_port
      - dst_ip
      - dst_port
      - network.transport
- question: Are there other SQL injection attempts targeting different web applications?
  context: Identifies broader web application attack campaigns across the organization.
  range: +/-6h
  query: |
    aggregation: true
    logsource:
      category: alert
    detection:
      selection:
        dst_ip: '{network.public_ip}'
      condition: selection
    fields:
      - src_ip
      - rule.name
      - rule.category
- question: Did the attacking host attempt to access other vulnerable web application endpoints?
  context: Reveals scanning patterns for additional CMS or web application vulnerabilities.
  range: +/-2h
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        http.uri|contains:
        - .php?
        - admin
        - wp-admin
        - wp-content
        - upload
        - install
        - config
        src_ip: '{source.ip}'
    fields:
    - http.uri
    - http.method
    - http.user_agent
    - dst_ip
    logsource:
      category: network
      service: http
- question: What was the response pattern from the web server to these injection attempts?
  context: Determines if the SQL injection was successful based on server response codes and content length.
  range: +/-15m
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        dst_ip: '{destination.ip}'
        http.uri|contains: show_webfeed.php
        src_ip: '{source.ip}'
    fields:
    - http.status_code
    - http.request.body.length
    - http.response.body.length
    - http.uri
    logsource:
      category: network
      service: http