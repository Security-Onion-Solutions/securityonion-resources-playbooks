name: ET WEB_SPECIFIC_APPS PHP-Update SQL Injection Attempt -- guestadd.php newemail UPDATE
id: 1201990
description: |
  Detects SQL injection attempts targeting the PHP-Update application's guestadd.php script via the newemail parameter.
  May trigger on legitimate database operations or security testing activities targeting this specific application.
type: detection
detection_id: 2005924
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete HTTP request containing the SQL injection attempt?
    context: Reveals the exact payload and injection technique used against the guestadd.php script.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally receive requests to PHP-Update applications?
    context: Determines if access to this legacy PHP application represents normal usage patterns.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What other PHP scripts were accessed from the same source IP?
    context: Identifies broader enumeration or exploitation attempts against the web application.
    range: +/-2h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    src_ip: '{source.ip}'\n    dst_ip: '{destination.ip}'\n    http.uri|contains: \".php\"\n  condition: selection\nfields:\n  - http.uri\n  - http.method\n  - http.status_code\n  - http.user_agent\n  \n"
  - question: Were there successful HTTP responses to requests containing SQL injection patterns?
    context: Indicates whether the injection attempts may have succeeded against the database.
    range: +/-30m
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    src_ip: '{source.ip}'\n    dst_ip: '{destination.ip}'\n    http.uri|contains: \"guestadd.php\"\n    http.status_code: [200, 302]\n  condition: selection\nfields:\n  - http.status_code\n  - http.uri\n  - http.response.body.length\n  \n"
  - question: What web server process handled the request to guestadd.php?
    context: Identifies the specific web application service that processed the SQL injection attempt.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What other external connections occurred from this web server?
    context: Identifies potential data exfiltration or additional attack vectors following the injection attempt.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Were any PHP or database-related files created after the injection attempt?
    context: Reveals web shells, backdoors, or other malicious files that may have been uploaded.
    range: +2h
    query: "aggregation: false\nlogsource:\n  category: file_event\ndetection:\n  file_selection:\n    host.ip: '{destination.ip}'\n    file.name|endswith:\n      - \".php\"\n      - \".pht\"\n      - \".phtml\"\n      - \".sql\"\n      - \".txt\"\n  condition: file_selection\nfields:\n  - file.path\n  - file.name\n  - Image\n  - User\n  \n"
  - question: Are other hosts targeting the same PHP-Update application?
    context: Determines if this is part of a coordinated attack against vulnerable PHP applications.
    range: +/-24h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    dst_ip: '{destination.ip}'\n    http.uri|contains: \"guestadd.php\"\n  filter:\n    src_ip: '{source.ip}'\n  condition: selection and not filter\nfields:\n  - src_ip\n  - http.uri\n  - http.user_agent\n  \n"
  - question: Did any lateral movement occur from this web server host?
    context: Identifies attempts to pivot from the web server to internal systems following exploitation.
    range: +4h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{network.private_ip}'
          dst_port:
          - 445    # SMB
          - 139    # NetBIOS
          - 3389   # RDP
          - 5985   # WinRM HTTP
          - 5986   # WinRM HTTPS
          - 22     # SSH
          - 23     # Telnet
          - 135    # RPC
          - 5900   # VNC
        condition: selection
      fields:
        - src_ip
        - src_port
        - dst_ip
        - dst_port
        - network.transport
  - question: Are there related alerts involving SQL injection attempts across the organization?
    context: Reveals broader SQL injection campaign patterns targeting multiple applications.
    range: +/-24h
    query: "aggregation: false\nlogsource:\n  category: alert\ndetection:\n  selection:\n    rule.name|contains:\n      - \"SQL Injection\"\n      - \"SQLi\"\n      - \"UPDATE\"\n      - \"INSERT\"\n      - \"SELECT\"\n  filter:\n    document_id: '{soc_id}'\n  condition: selection and not filter\nfields:\n  - rule.name\n  - src_ip\n  - dst_ip\n  - rule.category\n  \n"
  - question: What is the pattern of requests to database-driven PHP applications from this source?
    context: Analyzes systematic targeting of database-backed web applications for exploitation.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains:
            - "UPDATE"
            - "SELECT"
            - "INSERT"
            - "DELETE"
            - "UNION"
        condition: selection
      fields:
        - http.uri
        - http.virtual_host
        - dst_ip
        - http.status_code