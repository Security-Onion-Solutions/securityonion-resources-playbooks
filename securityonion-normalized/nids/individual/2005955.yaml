name: ET WEB_SPECIFIC_APPS While You Were Out (WYWO) InOut Board SQL Injection Attempt
id: 1221239
description: |
  Detects SQL injection attempts targeting the WYWO InOut Board phonemessage.asp script.
  May trigger on legitimate database queries or security testing of web applications.
type: detection
detection_id: 2005955
detection_category: ''
detection_type: nids
contributors:
- SecurityOnionSolutions
created: 2024-01-15
questions:
- question: What was the complete SQL injection payload in the phonemessage.asp request?
  context: Reveals the specific SQL syntax and injection technique being attempted.
  range: +/-15m
  query: |
    aggregation: false
    logsource:
      category: network
      service: http
    detection:
      selection:
        community_id: '{network.community_id}'
      condition: selection
    fields:
      - http.method
      - http.useragent
      - http.virtual_host
      - http.uri
      - http.status_code
- question: Does this host normally access the WYWO InOut Board application?
  context: Determines if this web application access represents normal user behavior.
  range: -7d
  query: |
    aggregation: true
    logsource:
      category: network
      service: http
    detection:
      selection:
        dst_ip: '{destination.ip}'
      condition: selection
    fields:
      - dst_ip
- question: What web server process handled the SQL injection request?
  context: Identifies the web application service processing the malicious request.
  range: +/-15m
  query: |
    aggregation: false
    logsource:
      category: network
    detection:
      selection:
        community_id: '{network.community_id}'
      filter:
        Image|exists: true
      condition: selection and filter
    fields:
      - hostname
      - User
      - Image
      - CommandLine
      - ProcessGuid
- question: What other HTTP requests occurred from this source during the attack timeframe?
  context: Identifies additional web application testing or exploitation attempts.
  range: +/-30m
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        src_ip: '{source.ip}'
    fields:
    - http.method
    - http.uri
    - http.user_agent
    - http.status_code
    logsource:
      category: network
      service: http
- question: Were there successful responses to SQL injection attempts against this application?
  context: Determines if the SQL injection attempts returned database content.
  range: +/-30m
  query: |
    aggregation: false
    logsource:
      category: network
      service: http
    detection:
      selection:
        dst_ip: '{destination.ip}'
        http.uri|contains: "phonemessage.asp"
        http.status_code: 200
      condition: selection
    fields:
      - http.uri
      - http.status_code
      - http.response.body.length
- question: Are other hosts attempting SQL injection against this web application?
  context: Assesses whether multiple sources are targeting the same vulnerability.
  range: +/-24h
  query: |
    aggregation: false
    logsource:
      category: network
      service: http
    detection:
      selection:
        dst_ip: '{destination.ip}'
        http.uri|contains: "phonemessage.asp"
        http.uri|contains: "SELECT"
      filter:
        src_ip: '{source.ip}'
      condition: selection and not filter
    fields:
      - src_ip
      - http.uri
      - http.user_agent
- question: What database-related files were accessed after the SQL injection attempt?
  context: Identifies potential database file access or backup creation following the attack.
  range: +1h
  query: |
    aggregation: false
    logsource:
      category: file_event
    detection:
      selection:
        host.ip: '{destination.ip}'
        file.name|endswith:
          - ".mdb"
          - ".db"
          - ".sql"
          - ".bak"
      condition: selection
    fields:
      - file.path
      - file.name
      - Image
- question: Did the web server establish any external database connections after this request?
  context: Detects potential data exfiltration or remote database access following SQL injection.
  range: +/-10m
  query: |
    aggregation: false
    logsource:
      category: network
      service: connection
    detection:
      selection:
        src_ip: '{source.ip}'
      private:
        dst_ip|cidr:
          - '10.0.0.0/8'
          - '127.0.0.0/8'
          - '172.16.0.0/12'
          - '192.168.0.0/16'
          - '169.254.0.0/16'
      filter:
        dst_ip: '{network.public_ip}'
      condition: selection and not (private or filter)
    fields:
      - dst_ip
      - dst_port
      - network.transport
      - connection.state_description
- question: Are there other SQL injection attempts targeting different applications on this server?
  context: Determines if this is part of broader web application enumeration and exploitation.
  range: +/-6h
  query: |
    aggregation: false
    logsource:
      category: network
      service: http
    detection:
      selection:
        dst_ip: '{destination.ip}'
        http.uri|contains:
          - "SELECT"
          - "UNION"
          - "INSERT"
          - "UPDATE"
          - "DELETE"
      filter:
        http.uri|contains: "phonemessage.asp"
      condition: selection and not filter
    fields:
      - http.uri
      - http.method
      - src_ip
- question: What user agent patterns are associated with these SQL injection attempts?
  context: Identifies automated tools or frameworks being used for web application attacks.
  range: +/-2h
  query: |
    aggregation: false
    logsource:
      category: network
      service: http
    detection:
      selection:
        src_ip: '{source.ip}'
        http.uri|contains: "SELECT"
      condition: selection
    fields:
      - http.user_agent
      - http.uri
      - dst_ip
- question: Are there related alerts indicating broader web application compromise?
  context: Identifies additional security events that may indicate successful exploitation.
  range: +/-24h
  query: |
    aggregation: false
    logsource:
      category: alert
    detection:
      selection:
        related_ip: '{related.ip}'
      filter:
        document_id: '{soc_id}'
      condition: selection and not filter
    fields:
      - rule.name
      - rule.category
      - src_ip
      - dst_ip