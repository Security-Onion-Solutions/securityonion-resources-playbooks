name: ET WEB_SPECIFIC_APPS VerliAdmin SQL Injection Attempt -- repass.php nick_mod UPDATE
id: 1223018
description: |
  Detects SQL injection attempts targeting VerliAdmin repass.php with UPDATE commands in the nick_mod parameter.
  May trigger on legitimate database operations or security testing of VerliAdmin installations.
type: detection
detection_id: 2006284
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload in the repass.php request?
    context: Reveals the specific UPDATE statement and injection technique used against VerliAdmin.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally receive requests to VerliAdmin application paths?
    context: Determines if VerliAdmin access represents normal administrative activity.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What web server process handled the VerliAdmin SQL injection request?
    context: Identifies the web application server processing potentially malicious database queries.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What other HTTP requests occurred from the same source during this timeframe?
    context: Identifies additional web application attacks or reconnaissance activity.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          dst_port: '{destination.port}'
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - http.method
        - http.uri
        - http.user_agent
        - http.status_code
  - question: Did the database process create or modify any files after the SQL injection attempt?
    context: Assesses whether the injection resulted in file system modifications.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .exe
          - .dll
          - .bat
          - .cmd
          - .ps1
          - .vbs
          - .js
          - .scr
          - .com
          - .pif
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Are other hosts receiving similar VerliAdmin SQL injection attempts?
    context: Determines if this is part of a coordinated attack against multiple VerliAdmin installations.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What database-related processes were active during the injection attempt?
    context: Identifies database engines that may have processed the malicious SQL commands.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip: '{network.private_ip}'
          Image|contains:
          - mysql.exe
          - mysqld.exe
          - postgres.exe
          - sqlservr.exe
          - oracle.exe
        condition: selection
      fields:
        - User
        - Image
        - CommandLine
        - ParentImage
        - ProcessGuid
  - question: Did any authentication-related files get modified after the password reset attempt?
    context: Assesses whether the SQL injection successfully modified user credentials.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{destination.ip}'
        password_files:
          file.name|contains:
            - "passwd"
            - "shadow"
            - "user"
            - "account"
            - "credential"
        condition: selection and password_files
      fields:
        - file.path
        - file.name
        - Image
        - User
  - question: Were there any successful authentication events following the injection attempt?
    context: Determines if the password manipulation was successful for account access.
    range: +4h
    query: |
      aggregation: false
      logsource:
        category: authentication
      detection:
        selection:
          src_ip: '{source.ip}'
          event.outcome: "success"
        condition: selection
      fields:
        - user.name
        - event.action
        - source.ip
        - user_agent.original