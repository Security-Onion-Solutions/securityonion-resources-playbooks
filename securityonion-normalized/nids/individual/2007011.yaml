name: ET WEB_SPECIFIC_APPS MidiCart ASP Shopping Cart SQL Injection Attempt
id: 1202173
description: |
  Detects SQL injection attempts targeting MidiCart ASP Shopping Cart applications through the item_show.asp id2006quant parameter.
  May trigger on legitimate database operations or security testing activities.
type: detection
detection_id: 2007011
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload in the item_show.asp request?
    context: Reveals the exact injection string and SQL commands attempted against the shopping cart.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally access the MidiCart shopping cart application?
    context: Determines if this represents typical user behavior or external targeting.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What other requests were made to the shopping cart application around this time?
    context: Identifies broader attack patterns or enumeration attempts.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains: ".asp"
        condition: selection
      fields:
        - http.method
        - http.uri
        - http.user_agent
        - http.status_code
  - question: Did the web server respond with database error messages?
    context: Indicates whether the SQL injection attempt was successful or blocked.
    range: +15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          http.status_code: [500, 503]
        condition: selection
      fields:
        - http.status_code
        - http.response.body.length
        - http.uri
  - question: Are other hosts attempting similar SQL injection attacks on the shopping cart?
    context: Determines if this is part of a coordinated attack campaign.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          http.uri|contains: "item_show.asp"
          http.uri|contains: "UPDATE"
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - http.uri
        - http.user_agent
  - question: What user-agent was used for the SQL injection attempt?
    context: Identifies the tool or browser used which may indicate automated attacks.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.user_agent
        - http.method
        - src_ip
  - question: Did the attacker make requests to other ASP applications on the server?
    context: Assesses whether this is targeted specifically at MidiCart or part of broader web application scanning.
    range: +/-1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          dst_ip: '{destination.ip}'
          http.uri|contains: ".asp"
        filter:
          http.uri|contains: "item_show.asp"
        condition: selection and not filter
      fields:
        - http.uri
        - http.method
        - http.status_code
  - question: Were there any successful authentication attempts before the SQL injection?
    context: Determines if the attacker had legitimate access or was attempting unauthorized access.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          dst_ip: '{destination.ip}'
          http.method: "POST"
          http.uri|contains: "login"
        condition: selection
      fields:
        - http.uri
        - http.status_code
        - http.response.body.length
  - question: What files were accessed on the web server after the SQL injection attempt?
    context: Identifies potential data exfiltration or system compromise following the attack.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .doc
          - .docx
          - .xls
          - .xlsx
          - .pdf
          - .rtf
          - .ppt
          - .pptx
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Are there related alerts from web application firewalls or intrusion detection systems?
    context: Provides additional security context and potential blocking actions.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          related_ip: '{related.ip}'
        filter:
          document_id: '{soc_id}'
        condition: selection and not filter
      fields:
        - rule.name
        - rule.category
        - src_ip
        - dst_ip