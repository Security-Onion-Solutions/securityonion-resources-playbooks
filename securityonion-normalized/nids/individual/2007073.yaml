name: ET WEB_SPECIFIC_APPS WarHound General Shopping Cart SQL Injection Attempt
id: 1202026
description: |
  Detects SQL injection attempts targeting WarHound General Shopping Cart application via item.asp ItemID parameter containing DELETE statements.
  May trigger on legitimate database administration tools or security testing activities.
type: detection
detection_id: 2007073
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload in the item.asp request?
    context: Reveals the exact DELETE statement and SQL injection technique used.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally access the WarHound shopping cart application?
    context: Determines if HTTP access to this web application is typical for this source.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What other requests were made to item.asp or similar shopping cart pages?
    context: Identifies broader enumeration or exploitation attempts against the application.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains:
            - "item.asp"
            - "product.asp"
            - "cart.asp"
            - "ItemID="
            - "ProductID="
        condition: selection
      fields:
        - http.uri
        - http.method
        - http.user_agent
  - question: Were other SQL injection patterns attempted against this web server?
    context: Assesses whether this is part of broader SQL injection testing.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          http.uri|contains:
            - "DELETE"
            - "DROP"
            - "INSERT"
            - "UPDATE"
            - "UNION"
            - "SELECT"
            - "'"
            - "--"
        condition: selection
      fields:
        - src_ip
        - http.uri
        - http.user_agent
  - question: What is the user-agent pattern of requests containing SQL injection attempts?
    context: Identifies automated tools or specific browsers used for injection attempts.
    range: +/-1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains:
            - "DELETE"
            - "ItemID="
        condition: selection
      fields:
        - http.user_agent
        - http.uri
  - question: Are other hosts attempting similar SQL injection against shopping cart applications?
    context: Determines scope of potential campaign targeting e-commerce platforms.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What web application processes handled the SQL injection attempt?
    context: Identifies the specific service that may be vulnerable to CVE-2006-6206.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What other external connections occurred from this host after the injection attempt?
    context: Identifies potential data exfiltration or additional malicious activity.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Were any database-related files or scripts created after the injection attempt?
    context: Assesses whether the SQL injection resulted in file system access.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .py
          - .pl
          - .sh
          - .php
          - .asp
          - .aspx
          - .js
          - .vbs
          - .ps1
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Did any error pages or database responses follow the injection attempt?
    context: Determines if the SQL injection was successful or blocked.
    range: +5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          src_ip: '{source.ip}'
          http.status_code:
            - 500
            - 403
            - 200
        condition: selection
      fields:
        - http.status_code
        - http.uri
        - http.response.body.length
  - question: Are there patterns indicating automated scanning tools targeting this application?
    context: Identifies whether this represents automated vulnerability scanning.
    range: +/-4h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          http.uri|contains:
            - ".asp"
            - ".php"
            - ".jsp"
        rapid_requests:
          src_ip: '{source.ip}'
        condition: selection and rapid_requests
      fields:
        - http.uri
        - http.user_agent
        - http.method