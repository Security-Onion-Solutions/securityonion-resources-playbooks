name: ET WEB_SPECIFIC_APPS Alan Ward A-Cart Pro SQL Injection Attempt
id: 1223329
description: |
  Detects SQL injection attempts targeting A-Cart Pro search functionality via UNION SELECT statements.
  May trigger on legitimate database queries or penetration testing activities.
type: detection
detection_id: 2007399
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload in the search parameter?
    context: Reveals the exact UNION SELECT statement and injection technique used.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally receive requests to A-Cart Pro search functionality?
    context: Determines if this represents normal e-commerce application usage patterns.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What web application process handled this SQL injection attempt?
    context: Identifies the specific web server or application processing the malicious request.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What other HTTP requests occurred from the same source IP?
    context: Identifies additional web application testing or attack attempts.
    range: +/-6h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    src_ip: '{source.ip}'\n  condition: selection\nfields:\n  - http.method\n  - http.uri\n  - http.user_agent\n  - http.status_code\n  \n"
  - question: Were other SQL injection patterns attempted against this web application?
    context: Reveals broader SQL injection attack campaigns targeting the same application.
    range: +/-24h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    dst_ip: '{destination.ip}'\n    http.uri|contains:\n      - \"UNION\"\n      - \"SELECT\"\n      - \"ORDER BY\"\n      - \"GROUP BY\"\n      - \"INSERT\"\n      - \"UPDATE\"\n      - \"DELETE\"\n  condition: selection\nfields:\n  - src_ip\n  - http.method\n  - http.uri\n  - http.user_agent\n  \n"
  - question: What database-related files were accessed after the injection attempt?
    context: Determines if the SQL injection resulted in unauthorized database file access.
    range: +1h
    query: "aggregation: false\nlogsource:\n  category: file_event\ndetection:\n  selection:\n    host.ip: '{destination.ip}'\n    file.path|contains:\n      - \".db\"\n      - \".sql\"\n      - \".mdb\"\n      - \".accdb\"\n      - \"database\"\n  condition: selection\nfields:\n  - file.path\n  - file.name\n  - Image\n  - User\n  \n"
  - question: Are other hosts receiving similar A-Cart Pro SQL injection attempts?
    context: Identifies coordinated attacks targeting A-Cart Pro installations across the network.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What was the application response to the SQL injection attempt?
    context: Determines if the injection was successful based on HTTP response codes and content.
    range: +/-15m
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    community_id: '{network.community_id}'\n  condition: selection\nfields:\n  - http.status_code\n  - http.response.body.length\n  - src_ip\n  - dst_ip\n  - http.method\n  \n"
  - question: Did the source IP attempt to access administrative or sensitive areas after the injection?
    context: Reveals post-exploitation attempts to access restricted application functionality.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains:
            - "admin"
            - "login"
            - "config"
            - "setup"
            - "install"
            - "backup"
        condition: selection
      fields:
        - http.method
        - http.uri
        - http.status_code
        - dst_ip