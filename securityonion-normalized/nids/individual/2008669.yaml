name: ET WEB_SPECIFIC_APPS AstroSPACES profile.php SQL Injection
id: 1220936
description: |
  Detects SQL injection attempts targeting AstroSPACES profile.php using UNION SELECT statements.
  May trigger on legitimate database queries or security testing tools containing similar SQL patterns.
type: detection
detection_id: 2008669
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete SQL injection payload in the profile.php request?
    context: Reveals the specific UNION SELECT statement used in the exploitation attempt.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally access the AstroSPACES application?
    context: Determines if HTTP requests to this web application are typical from this source.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What web server process handled the SQL injection request?
    context: Identifies the specific web application service processing these requests.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What other HTTP requests occurred from this source around the same time?
    context: Identifies additional web application attack attempts or reconnaissance activity.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Are other hosts attempting SQL injection against the same web application?
    context: Determines scope of attacks targeting this AstroSPACES installation.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What files were accessed by the web server process during this activity?
    context: Identifies database files or configuration files accessed during SQL injection attempts.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          ProcessGuid: '{event_data.process.entity_id}'
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - User
  - question: Did any lateral movement occur from the web server host?
    context: Assesses whether successful SQL injection led to further network access.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{network.private_ip}'
          dst_port:
          - 445    # SMB
          - 139    # NetBIOS
          - 3389   # RDP
          - 5985   # WinRM HTTP
          - 5986   # WinRM HTTPS
          - 22     # SSH
          - 23     # Telnet
          - 135    # RPC
          - 5900   # VNC
        condition: selection
      fields:
        - src_ip
        - src_port
        - dst_ip
        - dst_port
        - network.transport
  - question: Are there similar SQL injection patterns targeting other web applications?
    context: Identifies broader SQL injection campaigns across the organization.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What other profile.php requests with different SQL injection techniques occurred?
    context: Reveals additional SQL injection methods targeting the same vulnerable endpoint.
    range: +/-6h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    dst_ip: '{destination.ip}'\n    http.uri|contains: \"profile.php\"\n    http.uri|contains: \"id=\"\n  sql_patterns:\n    http.uri|contains:\n      - \"SELECT\"\n      - \"INSERT\"\n      - \"UPDATE\" \n      - \"DELETE\"\n      - \"DROP\"\n      - \"CREATE\"\n      - \"ALTER\"\n      - \"'\"\n      - \"\\\"\"\n      - \"--\"\n      - \"/*\"\n  condition: selection and sql_patterns\nfields:\n  - src_ip\n  - http.uri\n  - http.user_agent\n  - http.method\n"
  - question: Were any database-related error messages returned in HTTP responses?
    context: Identifies information disclosure that confirms SQL injection vulnerability.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{destination.ip}'
          dst_ip: '{source.ip}'
        error_patterns:
          http.response.body|contains:
            - "mysql"
            - "sql"
            - "database"
            - "syntax error"
            - "ORA-"
            - "PostgreSQL"
            - "Microsoft JET"
        condition: selection and error_patterns
      fields:
        - http.status_code
        - http.response.body
        - http.uri