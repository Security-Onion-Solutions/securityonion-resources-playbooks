name: ET WEB_SPECIFIC_APPS beLive arch.php arch Parameter Local File Inclusion
id: 1210041
description: |
  Detects GET requests to arch.php with directory traversal patterns in the arch parameter.
  May trigger on legitimate file access or security testing tools scanning for LFI vulnerabilities.
type: detection
detection_id: 2009790
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete HTTP request containing the arch.php directory traversal attempt?
    context: Reveals the full LFI payload and any additional parameters or headers.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally access arch.php or similar web applications?
    context: Determines if this represents normal application usage or reconnaissance activity.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What other URIs with directory traversal patterns were requested by this source?
    context: Identifies broader LFI scanning activity targeting multiple applications.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains:
            - "../"
            - "..%2f"
            - "..%5c"
            - "%2e%2e%2f"
            - "%2e%2e%5c"
        condition: selection
      fields:
        - http.uri
        - http.virtual_host
        - http.user_agent
        - dst_ip
  - question: What web application or process handled these arch.php requests?
    context: Identifies the specific service that may be vulnerable to LFI attacks.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: Were any sensitive files accessed or created after the LFI attempt?
    context: Assesses whether the directory traversal was successful in accessing system files.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .doc
          - .docx
          - .xls
          - .xlsx
          - .pdf
          - .rtf
          - .ppt
          - .pptx
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: What other external connections occurred from the targeted web server?
    context: Identifies potential data exfiltration or additional compromise indicators.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Are other web servers receiving similar arch.php exploitation attempts?
    context: Determines scope of LFI scanning or exploitation campaign.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What User-Agent patterns are associated with these directory traversal attempts?
    context: Reveals automated scanning tools or manual exploitation characteristics.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          http.uri|contains: "arch.php"
          http.uri|contains:
            - "../"
            - "%2e%2e%2f"
        condition: selection
      fields:
        - http.user_agent
        - src_ip
        - http.uri
  - question: Did the web server process attempt to access system configuration files?
    context: Identifies successful LFI exploitation accessing sensitive system files.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{destination.ip}'
          file.path|contains:
            - "/etc/passwd"
            - "/etc/shadow"
            - "web.config"
            - ".htaccess"
            - "wp-config"
            - "config.php"
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
  - question: Are there related alerts indicating successful file inclusion or code execution?
    context: Correlates with other security events that may indicate LFI exploitation success.
    range: +/-4h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          related_ip: '{related.ip}'
        filter:
          document_id: '{soc_id}'
        condition: selection and not filter
      fields:
        - rule.name
        - rule.category
        - src_ip
        - dst_ip