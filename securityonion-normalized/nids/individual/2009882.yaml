name: ET SCAN Default Mysqloit User Agent Detected - Mysql Injection Takover Tool
id: 1201831
description: |
  Detects HTTP requests with the "Mysqloit" user agent string indicating use of the MySQL injection takeover tool.
  May trigger on legitimate security testing or research activities using this tool.
type: detection
detection_id: 2009882
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete HTTP request containing the Mysqloit user agent?
    context: Reveals the full request details including URI, method, and headers from the injection tool.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally receive requests from external scanning tools?
    context: Determines if this represents a change from normal web application traffic patterns.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What web application process received the Mysqloit requests?
    context: Identifies the specific web service being targeted by the SQL injection tool.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What other HTTP requests occurred from the same source IP?
    context: Identifies additional scanning or exploitation attempts from the same source.
    range: +/-6h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    src_ip: '{source.ip}'\n  condition: selection\nfields:\n  - http.method\n  - http.uri\n  - http.user_agent\n  - http.status_code\n  - dst_ip\n  - dst_port\n  \n"
  - question: Are other hosts receiving requests with the same Mysqloit user agent?
    context: Determines the scope of the SQL injection scanning campaign.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What database-related files were accessed after the Mysqloit requests?
    context: Identifies potential database file access resulting from SQL injection attempts.
    range: +1h
    query: "aggregation: false\nlogsource:\n  category: file_event\ndetection:\n  selection:\n    host.ip: '{destination.ip}'\n    file.name|contains:\n      - \".sql\"\n      - \".db\"\n      - \".mdb\"\n      - \".sqlite\"\n      - \"mysql\"\n      - \"database\"\n  condition: selection\nfields:\n  - file.path\n  - file.name\n  - Image\n  - ProcessGuid\n  \n"
  - question: Were any database connection attempts made from the web server after the injection requests?
    context: Assesses whether the SQL injection tool successfully established database connections.
    range: +1h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: connection\ndetection:\n  selection:\n    src_ip: '{destination.ip}'\n    dst_port:\n      - 3306  # MySQL\n      - 1433  # SQL Server\n      - 5432  # PostgreSQL\n      - 1521  # Oracle\n  condition: selection\nfields:\n  - dst_ip\n  - dst_port\n  - connection.state\n  - connection.state_description\n  - network.protocol\n  \n"
  - question: Are there other SQL injection tool user agents detected across the organization?
    context: Identifies broader SQL injection scanning campaigns using different tools.
    range: +/-24h
    query: "aggregation: false\nlogsource:\n  category: network\n  service: http\ndetection:\n  selection:\n    http.user_agent|contains:\n      - \"sqlmap\"\n      - \"sqlninja\"\n      - \"havij\"\n      - \"pangolin\"\n      - \"sqlinjector\"\n      - \"bsqlbf\"\n  condition: selection\nfields:\n  - http.user_agent\n  - src_ip\n  - dst_ip\n  - http.uri\n  - http.method\n  \n"
  - question: Did any lateral movement occur from the targeted web server?
    context: Determines if successful SQL injection led to further network compromise.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{network.private_ip}'
          dst_port:
          - 445    # SMB
          - 139    # NetBIOS
          - 3389   # RDP
          - 5985   # WinRM HTTP
          - 5986   # WinRM HTTPS
          - 22     # SSH
          - 23     # Telnet
          - 135    # RPC
          - 5900   # VNC
        condition: selection
      fields:
        - src_ip
        - src_port
        - dst_ip
        - dst_port
        - network.transport