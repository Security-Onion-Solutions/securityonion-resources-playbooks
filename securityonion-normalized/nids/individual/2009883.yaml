name: ET SCAN Possible Mysqloit Operating System Fingerprint/SQL Injection Test Scan Detected
id: 1201870
description: |
  Detects HTTP requests containing MySQL BENCHMARK functions with UNION SELECT statements.
  May indicate SQL injection testing tools like Mysqloit or legitimate database performance testing.
type: detection
detection_id: 2009883
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete HTTP request containing the BENCHMARK SQL injection payload?
    context: Reveals the full exploitation attempt and request structure.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally access the targeted web application?
    context: Determines if this represents scanning from an unusual source.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What other SQL injection patterns were attempted from this source?
    context: Identifies the scope of SQL injection testing activities.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains:
            - "UNION"
            - "SELECT"
            - "BENCHMARK"
            - "ORDER BY"
            - "GROUP BY"
            - "HAVING"
            - "WAITFOR"
            - "SLEEP("
            - "DELAY"
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - http.method
        - http.virtual_host
        - http.uri
        - http.user_agent
  - question: What web applications on this server received SQL injection attempts?
    context: Determines which applications may be targeted for vulnerability assessment.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          http.uri|contains:
            - "UNION"
            - "SELECT"
            - "BENCHMARK"
            - "SLEEP("
            - "WAITFOR"
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - http.virtual_host
        - http.uri
        - http.method
  - question: What other external connections occurred from the scanning host?
    context: Identifies additional reconnaissance or attack infrastructure usage.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Are other hosts performing similar SQL injection testing activities?
    context: Determines if this is part of a coordinated scanning campaign.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What user-agent patterns are associated with these SQL injection attempts?
    context: Identifies automated tools or browsers used for testing.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains:
            - "BENCHMARK"
            - "UNION+select"
        condition: selection
      fields:
        - src_ip
        - http.user_agent
        - http.uri
        - http.virtual_host
  - question: What timing patterns exist in the SQL injection testing sequence?
    context: Reveals whether this is automated scanning or manual testing.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{related.ip}'
          dst_ip: '{related.ip}'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - dst_port
        - network.protocol
        - event.duration
        - client.ip_bytes
        - server.ip_bytes
        - connection.state_description
  - question: Did any application errors or database responses occur during the injection attempts?
    context: Assesses whether the SQL injection attempts generated visible responses.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          dst_ip: '{destination.ip}'
          http.status_code:
            - 500
            - 503
            - 400
            - 403
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - http.status_code
        - http.virtual_host
        - http.uri
  - question: Are there related alerts involving the same source IP across the organization?
    context: Identifies other security events associated with this scanning activity.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          related_ip: '{related.ip}'
        filter:
          document_id: '{soc_id}'
        condition: selection and not filter
      fields:
        - rule.name
        - rule.category
        - src_ip
        - dst_ip