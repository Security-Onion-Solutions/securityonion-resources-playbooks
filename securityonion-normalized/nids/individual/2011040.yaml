name: ET WEB_SERVER Possible Usage of MYSQL Comments in URI for SQL Injection
id: 1246587
description: |
  Detects HTTP requests containing MySQL comment syntax (/*...*/) in URIs, commonly used in SQL injection attacks.
  May trigger on legitimate applications that pass SQL-like syntax in parameters or web development tools.
type: detection
detection_id: 2011040
detection_category: ''
detection_type: nids
contributors:
- SecurityOnionSolutions
created: 2024-01-15
questions:
- question: What was the complete HTTP request containing the MySQL comment syntax?
  context: Reveals the full URI structure and comment patterns used in the potential injection attempt.
  range: +/-15m
  query: |
    aggregation: false
    logsource:
      category: network
      service: http
    detection:
      selection:
        community_id: '{network.community_id}'
      condition: selection
    fields:
      - http.method
      - http.useragent
      - http.virtual_host
      - http.uri
      - http.status_code
- question: Does this web server normally receive requests with SQL-like syntax in URIs?
  context: Determines if MySQL comment patterns in URIs are typical for this application.
  range: -7d
  query: |
    aggregation: true
    logsource:
      category: network
      service: http
    detection:
      selection:
        dst_ip: '{destination.ip}'
      condition: selection
    fields:
      - dst_ip
- question: What web application process handled this request with MySQL comments?
  context: Identifies the specific web server or application that processed the suspicious request.
  range: +/-15m
  query: |
    aggregation: false
    logsource:
      category: network
    detection:
      selection:
        community_id: '{network.community_id}'
      filter:
        Image|exists: true
      condition: selection and filter
    fields:
      - hostname
      - User
      - Image
      - CommandLine
      - ProcessGuid
- question: What other HTTP requests occurred from this source IP around the same time?
  context: Reveals additional web application testing or attack attempts from the same source.
  range: +/-30m
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        src_ip: '{source.ip}'
    fields:
    - http.uri
    - http.method
    - http.status_code
    - http.user_agent
    - dst_ip
    - dst_port
    logsource:
      category: network
      service: http
- question: Are other web servers receiving similar requests with MySQL comment syntax?
  context: Determines if this is part of a broader SQL injection campaign against multiple targets.
  range: +/-24h
  query: |
    aggregation: true
    logsource:
      category: alert
    detection:
      selection:
        dst_ip: '{network.public_ip}'
      condition: selection
    fields:
      - src_ip
      - rule.name
      - rule.category
- question: What HTTP status codes were returned for requests containing MySQL comments?
  context: Indicates whether the injection attempts were successful or blocked by the application.
  range: +/-1h
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        dst_ip: '{destination.ip}'
        http.uri|contains:
        - /*
        - '*/'
    fields:
    - http.status_code
    - http.uri
    - src_ip
    - http.method
    logsource:
      category: network
      service: http
- question: Did the web application create or modify any database-related files after this request?
  context: Identifies potential file system changes that could indicate successful SQL injection.
  range: +1h
  query: |
    aggregation: false
    logsource:
      category: file_event
    detection:
      selection:
        host.ip: '{network.private_ip}'
        file.name|endswith:
        - .doc
        - .docx
        - .xls
        - .xlsx
        - .pdf
        - .rtf
        - .ppt
        - .pptx
      condition: selection
    fields:
      - file.path
      - file.name
      - Image
      - ProcessGuid
      - User
- question: Were any database processes or SQL-related commands executed following this request?
  context: Reveals process execution that might indicate successful database compromise.
  range: +30m
  query: |
    aggregation: false
    logsource:
      category: process_creation
    detection:
      selection:
        host.ip: '{network.private_ip}'
        Image|contains:
        - mysql.exe
        - mysqld.exe
        - sqlcmd.exe
        - osql.exe
        - powershell.exe
        - cmd.exe
      condition: selection
    fields:
      - User
      - Image
      - CommandLine
      - ParentImage
      - ProcessGuid
- question: What other external connections occurred from the web server after this request?
  context: Identifies potential data exfiltration or command and control communications.
  range: +/-10m
  query: |
    aggregation: false
    logsource:
      category: network
      service: connection
    detection:
      selection:
        src_ip: '{source.ip}'
      private:
        dst_ip|cidr:
          - '10.0.0.0/8'
          - '127.0.0.0/8'
          - '172.16.0.0/12'
          - '192.168.0.0/16'
          - '169.254.0.0/16'
      filter:
        dst_ip: '{network.public_ip}'
      condition: selection and not (private or filter)
    fields:
      - dst_ip
      - dst_port
      - network.transport
      - connection.state_description
- question: Are there similar SQL injection patterns targeting other web applications?
  context: Reveals the scope and methodology of potential SQL injection campaigns.
  range: +/-6h
  query: |-
    aggregation: false
    detection:
      condition: selection
      selection:
        http.uri|contains:
        - union select
        - 1=1
        - ''' or '
        - ''' and '
        - /*
        - xp_
        - sp_
        - '@@'
        - information_schema
    fields:
    - http.uri
    - src_ip
    - dst_ip
    - http.user_agent
    - http.status_code
    logsource:
      category: network
      service: http
- question: Did any lateral movement attempts occur from the web server host?
  context: Determines if successful compromise led to internal network reconnaissance or access.
  range: +2h
  query: |
    aggregation: false
    logsource:
      category: network
      service: connection
    detection:
      selection:
        src_ip: '{network.private_ip}'
        dst_port:
        - 445    # SMB
        - 139    # NetBIOS
        - 3389   # RDP
        - 5985   # WinRM HTTP
        - 5986   # WinRM HTTPS
        - 22     # SSH
        - 23     # Telnet
        - 135    # RPC
        - 5900   # VNC
      condition: selection
    fields:
      - src_ip
      - src_port
      - dst_ip
      - dst_port
      - network.transport
