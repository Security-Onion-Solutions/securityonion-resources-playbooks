name: ET WEB_SPECIFIC_APPS BLOG CMS nsextt parameter Cross Site Scripting Vulnerability
id: 1209420
description: |
  Detects HTTP requests to BLOG CMS confirm.tpl.php containing XSS payloads in the nsextt parameter.
  May trigger on legitimate testing, security scanning, or applications using similar URL patterns.
type: detection
detection_id: 2013085
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete HTTP request containing the nsextt parameter?
    context: Reveals the full XSS payload and attack vector targeting the BLOG CMS vulnerability.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally access BLOG CMS admin interfaces?
    context: Determines if access to admin templates represents normal usage patterns.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What other XSS attempts occurred from this source IP?
    context: Identifies broader cross-site scripting attack patterns.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains:
            - "script"
            - "onmouse"
            - "onkey"
            - "onload"
            - "onclick"
            - "javascript:"
        condition: selection
      fields:
        - http.uri
        - http.user_agent
        - dst_ip
  - question: What other admin template files were accessed during this timeframe?
    context: Reveals the scope of BLOG CMS admin interface exploration.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          http.uri|contains: "/templates/admin"
        condition: selection
      fields:
        - src_ip
        - http.uri
        - http.method
  - question: Are other hosts being targeted with similar BLOG CMS XSS attempts?
    context: Determines if this is part of a campaign targeting BLOG CMS installations.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What was the response status for the XSS attempt?
    context: Indicates whether the vulnerable endpoint exists and how it responded.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.status_code
        - http.response.body.length
  - question: Did the source IP attempt to access other vulnerable CMS endpoints?
    context: Reveals broader CMS exploitation attempts beyond BLOG CMS.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains:
            - "wp-admin"
            - "admin.php"
            - "login.php"
            - "upload.php"
            - "config.php"
        condition: selection
      fields:
        - dst_ip
        - http.uri
        - http.user_agent
  - question: What user-agent was associated with the XSS attempt?
    context: Identifies the tool or browser used for the attack.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.user_agent
        - http.method
  - question: Were there any successful file uploads to the targeted server?
    context: Assesses whether XSS was combined with file upload attempts.
    range: +/-1h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          http.method: "POST"
          http.uri|contains:
            - "upload"
            - "file"
        condition: selection
      fields:
        - src_ip
        - http.uri
        - http.status_code
  - question: Did the targeted server establish any new external connections after the XSS attempt?
    context: Identifies potential data exfiltration or command execution resulting from XSS.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{destination.ip}'
        private_filter:
          dst_ip|cidr:
            - "10.0.0.0/8"
            - "172.16.0.0/12"
            - "192.168.0.0/16"
        condition: selection and not private_filter
      fields:
        - dst_ip
        - dst_port
        - network.protocol