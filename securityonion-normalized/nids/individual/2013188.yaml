name: ET EXPLOIT VSFTPD Backdoor User Login Smiley
id: 1242693
description: |
  Detects FTP login attempts containing a smiley face pattern ":)" that may indicate exploitation
  of the VSFTPD backdoor vulnerability. May trigger on legitimate usernames containing these characters.
type: detection
detection_id: 2013188
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the exact FTP USER command that contained the smiley pattern?
    context: Reveals the specific login attempt pattern matching VSFTPD backdoor exploitation.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: ftp
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - dst_port
  - question: Does this host normally receive FTP connections from external sources?
    context: Determines if FTP access from this source represents normal network activity.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What FTP service process handled this backdoor login attempt?
    context: Identifies the specific FTP daemon that may be vulnerable to the VSFTPD backdoor.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: Did the FTP server establish any outbound connections after the backdoor login attempt?
    context: Assesses whether the VSFTPD backdoor resulted in reverse shell connections.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What files were created on the FTP server after the smiley login attempt?
    context: Identifies files that may have been uploaded or created through backdoor access.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .exe
          - .dll
          - .bat
          - .cmd
          - .ps1
          - .vbs
          - .js
          - .scr
          - .com
          - .pif
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Were any system services or scheduled tasks created after the FTP backdoor attempt?
    context: Detects persistence mechanisms that may have been established through backdoor access.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip: '{network.private_ip}'
          Image|endswith:
          - schtasks.exe
          - taskeng.exe
          - taskhostw.exe
        condition: selection
      fields:
        - CommandLine
        - Image
        - ProcessGuid
        - User
        - ParentImage
  - question: Are other FTP servers receiving similar backdoor login attempts?
    context: Determines if this is part of a broader campaign targeting VSFTPD vulnerabilities.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Did any lateral movement occur from this FTP server to other internal systems?
    context: Identifies potential spread of compromise through the network after backdoor access.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{network.private_ip}'
          dst_port:
          - 445    # SMB
          - 139    # NetBIOS
          - 3389   # RDP
          - 5985   # WinRM HTTP
          - 5986   # WinRM HTTPS
          - 22     # SSH
          - 23     # Telnet
          - 135    # RPC
          - 5900   # VNC
        condition: selection
      fields:
        - src_ip
        - src_port
        - dst_ip
        - dst_port
        - network.transport
  - question: What other FTP commands were sent during this connection session?
    context: Reveals the full scope of activity during the backdoor exploitation attempt.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: ftp
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - ftp.command
        - ftp.arg
        - ftp.response_code
        - ftp.response_arg
  - question: Are there related alerts involving the same external IP address?
    context: Identifies coordinated attacks or reconnaissance from the same source.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          related_ip: '{related.ip}'
        filter:
          document_id: '{soc_id}'
        condition: selection and not filter
      fields:
        - rule.name
        - rule.category
        - src_ip
        - dst_ip
