name: ET WEB_SPECIFIC_APPS Wordpress eShop plugin eshoptemplate parameter Cross Site Scripting Attempt
id: 1222672
description: |
  Detects Cross Site Scripting attempts targeting the eshoptemplate parameter in WordPress eShop plugin.
  May trigger on legitimate admin usage or security testing of WordPress installations.
type: detection
detection_id: 2013425
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete HTTP request containing the XSS payload in the eshoptemplate parameter?
    context: Reveals the specific script injection attempt and exploitation method.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally access WordPress admin interfaces?
    context: Determines if admin panel access represents typical usage patterns.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What user agent and source made this XSS attempt against the WordPress admin panel?
    context: Identifies whether this appears to be automated scanning or manual exploitation.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          dst_ip: '{destination.ip}'
          http.uri|contains: "wp-admin/admin.php"
          http.uri|contains: "eshoptemplate="
        condition: selection
      fields:
        - http.user_agent
        - src_ip
        - http.method
        - http.uri
  - question: What other WordPress admin requests occurred from this source?
    context: Assesses scope of WordPress reconnaissance or exploitation attempts.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains: "wp-admin"
        condition: selection
      fields:
        - http.uri
        - http.method
        - http.status_code
        - dst_ip
  - question: Did any web server processes create new files after this XSS attempt?
    context: Identifies potential file uploads or web shell creation through successful exploitation.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .py
          - .pl
          - .sh
          - .php
          - .asp
          - .aspx
          - .js
          - .vbs
          - .ps1
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Are other WordPress installations receiving similar XSS attempts?
    context: Determines if this is part of a broader campaign targeting WordPress eShop vulnerabilities.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What other web application attacks occurred from this source address?
    context: Reveals broader web application reconnaissance or exploitation patterns.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          src_ip: '{source.ip}'
          rule.category|contains: "web-application-attack"
        condition: selection
      fields:
        - rule.name
        - dst_ip
        - http.uri
        - alert.severity_label
  - question: Did the WordPress application establish any external connections after the XSS attempt?
    context: Assesses whether the attack resulted in data exfiltration or remote code execution.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What response codes were returned for requests to the WordPress eShop admin interface?
    context: Determines if the XSS attempts were successful or blocked by security controls.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          dst_ip: '{destination.ip}'
          http.uri|contains: "page=eshop-templates.php"
        condition: selection
      fields:
        - http.status_code
        - http.uri
        - http.response.body.length
  - question: Were any WordPress or eShop plugin files modified after this attack attempt?
    context: Identifies potential plugin tampering or malicious file modifications.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{destination.ip}'
          file.path|contains:
            - "wp-content/plugins"
            - "eshop"
            - "wordpress"
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - User