name: ET MALWARE Likely Synolocker .onion DNS lookup
id: 1255816
description: |
  Detects DNS queries for .onion domains associated with Synolocker ransomware infrastructure.
  May trigger on security research activities or analysis of historical Synolocker samples.
type: detection
detection_id: 2018948
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete .onion domain queried that contains the Synolocker indicator?
    context: Reveals the exact Tor hidden service domain associated with Synolocker ransomware.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: dns
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - dns.query.name
        - dns.query.type_name
        - dns.resolved_ip
  - question: Does this host normally query .onion domains or use Tor services?
    context: Determines if Tor usage represents a change from normal network behavior patterns.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: dns
      detection:
        selection:
          dns.query.name: '{dns.query_name}'
        condition: selection
      fields:
        - dns.query.name
  - question: What process initiated the DNS query for this .onion domain?
    context: Identifies the application or malware responsible for Synolocker infrastructure queries.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What other external connections occurred from this host after the .onion query?
    context: Identifies additional network activity that may indicate successful ransomware execution.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Are other hosts querying the same Synolocker .onion infrastructure?
    context: Determines the scope of potential Synolocker infections across the network.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What executable files were created by the process making .onion queries?
    context: Identifies ransomware binaries or encryption tools deployed by Synolocker.
    range: +/-1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          ProcessGuid: '{event_data.process.entity_id}'
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - User
  - question: What is the timing pattern of .onion domain queries from this host?
    context: Analyzes communication patterns to understand ransomware behavior and C2 intervals.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{related.ip}'
          dst_ip: '{related.ip}'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - dst_port
        - network.protocol
        - event.duration
        - client.ip_bytes
        - server.ip_bytes
        - connection.state_description
  - question: Did any lateral movement occur from this host after the .onion query?
    context: Assesses whether Synolocker attempted to spread to additional systems.
    range: +4h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{network.private_ip}'
          dst_port:
          - 445    # SMB
          - 139    # NetBIOS
          - 3389   # RDP
          - 5985   # WinRM HTTP
          - 5986   # WinRM HTTPS
          - 22     # SSH
          - 23     # Telnet
          - 135    # RPC
          - 5900   # VNC
        condition: selection
      fields:
        - src_ip
        - src_port
        - dst_ip
        - dst_port
        - network.transport
  - question: Were any persistence mechanisms established around the time of .onion queries?
    context: Identifies registry modifications used by Synolocker for system persistence.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: registry_event
      detection:
        selection:
          host.ip: '{related.ip}'
          TargetObject|contains:
          - Run
          - RunOnce
          - Services
          - Startup
          - Winlogon
          - Explorer
          - Shell
          - AppInit_DLLs
          - Image File Execution Options
          - Class
          - ContextMenuHandlers
          - ShellExecuteHooks
        condition: selection
      fields:
        - User
        - Image
        - ProcessGuid
        - TargetObject
        - Details
  - question: Are there other Tor or .onion related DNS queries from this host?
    context: Reveals broader Tor usage patterns that may indicate additional malware activity.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: dns
      detection:
        selection:
          src_ip: '{source.ip}'
          dns.query.name|contains:
            - ".onion"
            - "tor2web"
            - "onion.to"
            - "onion.ly"
            - "onion.cab"
        condition: selection
      fields:
        - dns.query.name
        - dns.resolved_ip
  - question: Are there related malware alerts from this host around the same timeframe?
    context: Identifies additional malware detections that may be part of the same infection chain.
    range: +/-12h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          related_ip: '{related.ip}'
        filter:
          document_id: '{soc_id}'
        condition: selection and not filter
      fields:
        - rule.name
        - rule.category
        - src_ip
        - dst_ip
  - question: What document or executable files were accessed before the .onion query?
    context: Identifies the initial infection vector that led to Synolocker deployment.
    range: -1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .doc
          - .docx
          - .xls
          - .xlsx
          - .pdf
          - .rtf
          - .ppt
          - .pptx
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Are there other hosts with similar Synolocker infrastructure patterns?
    context: Detects broader campaign activity targeting multiple systems with Synolocker ransomware.
    range: +/-7d
    query: |
      aggregation: false
      logsource:
        category: network
        service: dns
      detection:
        selection:
          dns.query.name|contains: "cypherxffttr7hho"
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dns.query.name
