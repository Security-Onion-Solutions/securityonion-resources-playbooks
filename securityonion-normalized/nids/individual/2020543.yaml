name: ET ATTACK_RESPONSE SQLite error in HTTP response, possible SQL injection point
id: 1242625
description: |
  Detects SQLite error messages in HTTP responses that may indicate SQL injection vulnerabilities.
  Could represent legitimate database errors or active exploitation attempts against web applications.
type: detection
detection_id: 2020543
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete HTTP response containing the SQLite error message?
    context: Reveals the full error message and application context that triggered the alert.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this web application normally generate SQLite database errors?
    context: Determines if SQLite errors are typical for this application or represent unusual activity.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What HTTP requests preceded this SQLite error response?
    context: Identifies the potential SQL injection attempts that caused the database error.
    range: -30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          dst_port: '{destination.port}'
          http.method: ["GET", "POST", "PUT", "DELETE"]
        condition: selection
      fields:
        - http.method
        - http.uri
        - http.user_agent
        - http.request.body
        - src_ip
  - question: Are there patterns of repeated requests from the same source to this application?
    context: Identifies potential automated SQL injection scanning or exploitation attempts.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          dst_ip: '{destination.ip}'
          dst_port: '{destination.port}'
        condition: selection
      fields:
        - http.method
        - http.uri
        - http.status_code
        - http.user_agent
  - question: What other external connections occurred from the client after the SQLite error?
    context: Assesses whether successful exploitation led to additional network activity.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Are other web applications receiving similar requests that could trigger database errors?
    context: Determines if this represents broader SQL injection scanning across multiple targets.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
        filter:
          dst_ip: '{destination.ip}'
        condition: selection and not filter
      fields:
        - dst_ip
        - dst_port
        - http.method
        - http.uri
        - http.status_code
  - question: What user-agent patterns are associated with requests to this vulnerable application?
    context: Identifies automated tools or browsers used in potential SQL injection attacks.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          dst_port: '{destination.port}'
        condition: selection
      fields:
        - http.user_agent
        - src_ip
        - http.method
        - http.uri
  - question: Are there other alerts involving this source IP across different attack vectors?
    context: Reveals broader malicious activity patterns from the same source.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          related_ip: '{related.ip}'
        filter:
          document_id: '{soc_id}'
        condition: selection and not filter
      fields:
        - rule.name
        - rule.category
        - src_ip
        - dst_ip
  - question: Did any processes on the web server create new files after the SQLite error occurred?
    context: Identifies potential file uploads or backdoor creation following successful SQL injection.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .exe
          - .dll
          - .bat
          - .cmd
          - .ps1
          - .vbs
          - .js
          - .scr
          - .com
          - .pif
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Are there similar database error patterns occurring across other applications?
    context: Determines the scope of SQL injection attempts across the organization.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
