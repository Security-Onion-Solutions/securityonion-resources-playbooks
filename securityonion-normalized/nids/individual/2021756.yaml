name: ET EXPLOIT FireEye Appliance Unauthorized File Disclosure
id: 1200610
description: |
  Detects HTTP requests attempting to exploit FireEye appliance file disclosure vulnerability via NEI_ModuleDispatch.php.
  May trigger on legitimate administrative access or security testing of FireEye appliances.
type: detection
detection_id: 2021756
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete URI containing the NEI_ModuleDispatch.php file disclosure attempt?
    context: Reveals the exact path traversal payload and target file being accessed.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally receive administrative requests to FireEye management interfaces?
    context: Determines if management access to this appliance is typical for this source.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What other URIs were requested from this FireEye appliance during the same session?
    context: Identifies additional exploitation attempts or reconnaissance activity.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          src_ip: '{source.ip}'
        condition: selection
      fields:
        - http.uri
        - http.method
        - http.status_code
        - http.user_agent
  - question: Did the same source IP attempt to access other FireEye-specific paths?
    context: Reveals broader targeting of FireEye appliance vulnerabilities.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains:
            - "NEI_"
            - "FireEye"
            - "appliance"
            - "webui"
            - "config"
        condition: selection
      fields:
        - dst_ip
        - http.uri
        - http.method
        - http.status_code
  - question: What other external connections occurred from the FireEye appliance after this request?
    context: Identifies potential data exfiltration or command and control communications.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Are other FireEye appliances receiving similar file disclosure attempts?
    context: Determines if this is part of a coordinated attack against FireEye infrastructure.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          http.uri|contains: "NEI_ModuleDispatch.php"
          http.uri|contains: "HapiGetFileContents"
        filter:
          src_ip: '{source.ip}'
          dst_ip: '{destination.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_ip
        - http.uri
        - http.user_agent
  - question: What files were accessed or created on the FireEye appliance after this request?
    context: Identifies potential file system modifications or data access.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .doc
          - .docx
          - .xls
          - .xlsx
          - .pdf
          - .rtf
          - .ppt
          - .pptx
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Did any administrative processes execute on the appliance following this request?
    context: Reveals potential successful exploitation leading to system access.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip: '{destination.ip}'
          Image|contains:
            - "admin"
            - "config"
            - "service"
            - "daemon"
        condition: selection
      fields:
        - Image
        - CommandLine
        - User
        - ParentImage
  - question: What response codes were returned for requests containing path traversal sequences?
    context: Determines if the file disclosure attempt was successful.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.status_code
        - http.response.body.length
        - http.method
        - http.uri
  - question: Are there related alerts indicating FireEye appliance compromise?
    context: Identifies other security events that may be connected to this exploitation attempt.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          related_ip: '{related.ip}'
        filter:
          document_id: '{soc_id}'
        condition: selection and not filter
      fields:
        - rule.name
        - rule.category
        - src_ip
        - dst_ip