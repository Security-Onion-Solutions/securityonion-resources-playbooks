name: ET EXPLOIT_KIT RIG EK URI Struct Mar 13 2017 M2
id: 1203627
description: |
  Detects RIG exploit kit activity based on URI structure patterns with specific parameter encoding.
  May trigger on legitimate applications using similar URI parameter patterns or automated testing tools.
type: detection
detection_id: 2024049
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete HTTP request containing the RIG exploit kit URI pattern?
    context: Reveals the full request structure and parameters used in the potential exploit kit delivery.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally access web content with complex URI parameters?
    context: Establishes baseline for legitimate web application usage patterns.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What browser or application initiated the connection with the exploit kit URI?
    context: Identifies the client application that accessed the potential exploit kit landing page.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What other external connections occurred from this host after the exploit kit contact?
    context: Identifies potential payload downloads or command and control communications.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What executable files were created following the exploit kit interaction?
    context: Detects malware payloads that may have been delivered through the exploit kit.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .exe
          - .dll
          - .bat
          - .cmd
          - .ps1
          - .vbs
          - .js
          - .scr
          - .com
          - .pif
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Are other hosts connecting to the same exploit kit infrastructure?
    context: Determines the scope of potential compromise across the organization.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What persistence mechanisms were established after the exploit kit contact?
    context: Identifies registry modifications used to maintain access after exploit kit delivery.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: registry_event
      detection:
        selection:
          host.ip: '{related.ip}'
          TargetObject|contains:
          - Run
          - RunOnce
          - Services
          - Startup
          - Winlogon
          - Explorer
          - Shell
          - AppInit_DLLs
          - Image File Execution Options
          - Class
          - ContextMenuHandlers
          - ShellExecuteHooks
        condition: selection
      fields:
        - User
        - Image
        - ProcessGuid
        - TargetObject
        - Details
  - question: Did any lateral movement occur from this host following the exploit kit interaction?
    context: Assesses whether successful exploitation led to network propagation.
    range: +24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{network.private_ip}'
          dst_port:
          - 445    # SMB
          - 139    # NetBIOS
          - 3389   # RDP
          - 5985   # WinRM HTTP
          - 5986   # WinRM HTTPS
          - 22     # SSH
          - 23     # Telnet
          - 135    # RPC
          - 5900   # VNC
        condition: selection
      fields:
        - src_ip
        - src_port
        - dst_ip
        - dst_port
        - network.transport
  - question: Are there related exploit kit alerts across the organization?
    context: Identifies coordinated exploit kit campaigns targeting multiple hosts.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What is the timing pattern of connections to this exploit kit infrastructure?
    context: Analyzes communication frequency to distinguish between exploit delivery and ongoing C2.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{related.ip}'
          dst_ip: '{related.ip}'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - dst_port
        - network.protocol
        - event.duration
        - client.ip_bytes
        - server.ip_bytes
        - connection.state_description
  - question: Did the browser process create any suspicious child processes after the exploit kit contact?
    context: Identifies process injection or exploitation success indicators.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip: '{source.ip}'
          ParentImage|contains:
            - "iexplore.exe"
            - "chrome.exe"
            - "firefox.exe"
            - "msedge.exe"
          Image|contains:
            - "powershell.exe"
            - "cmd.exe"
            - "wscript.exe"
            - "cscript.exe"
            - "rundll32.exe"
        condition: selection
      fields:
        - ParentImage
        - Image
        - CommandLine
        - User
  - question: Were any script files created by browser processes during the exploit kit timeframe?
    context: Detects scripted payloads that may have been written to disk during exploitation.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        browser_processes:
          Image|contains:
            - "iexplore.exe"
            - "chrome.exe"
            - "firefox.exe"
            - "msedge.exe"
        script_files:
          file.name|endswith:
            - ".js"
            - ".vbs"
            - ".ps1"
            - ".bat"
            - ".hta"
        host_match:
          host.ip: '{source.ip}'
        condition: browser_processes and script_files and host_match
      fields:
        - Image
        - file.path
        - file.name