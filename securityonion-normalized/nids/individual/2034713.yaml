name: ET EXPLOIT Possible Apache log4j RCE Attempt (udp nds) (CVE-2021-44228)
id: 1205146
description: |
  Detects UDP traffic containing JNDI strings targeting NDS lookups that match Log4j exploitation patterns.
  May trigger on legitimate Java applications using JNDI for directory services or network scanning tools.
type: detection
detection_id: 2034713
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete UDP payload containing the JNDI NDS string?
    context: Reveals the specific Log4j exploitation payload and any embedded commands.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          community_id: '{network.community_id}'
          network.transport: udp
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - src_port
        - dst_port
        - network.bytes
        - connection.state_description
  - question: Does this host normally receive UDP traffic on this port?
    context: Determines if UDP connections to this service are typical for this host.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What process was listening on the target UDP port when the JNDI request arrived?
    context: Identifies the Java application that may be vulnerable to CVE-2021-44228.
    range: +/-15m
    query: "aggregation: false\nlogsource:\n  category: process_creation\ndetection:\n  selection:\n    host.ip: '{destination.ip}'\n    CommandLine|contains: \n      - \"java\"\n      - \"log4j\"\n  condition: selection\nfields:\n  - Image\n  - CommandLine\n  - User\n  - ProcessGuid\n"
  - question: Did the target host establish external connections after receiving the JNDI payload?
    context: Assesses whether the Log4j vulnerability resulted in outbound callback connections.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What executable files were created on the target host after the UDP request?
    context: Identifies files that may have been created through successful Log4j exploitation.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{network.private_ip}'
          file.name|endswith:
          - .exe
          - .dll
          - .bat
          - .cmd
          - .ps1
          - .vbs
          - .js
          - .scr
          - .com
          - .pif
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
        - User
  - question: Are other hosts receiving similar UDP traffic with JNDI NDS patterns?
    context: Determines if this is part of a coordinated Log4j exploitation campaign.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: What DNS queries were made from the target host after receiving the JNDI request?
    context: Identifies DNS lookups that may be part of the Log4j exploitation chain.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: dns
      detection:
        selection:
          src_ip: '{destination.ip}'
        condition: selection
      fields:
        - dns.query.name
        - dns.resolved_ip
        - dns.query.type_name
  - question: Did any Java processes create network connections after this UDP traffic?
    context: Correlates Java application activity with potential exploitation attempts.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{destination.ip}'
        java_process:
          network.transport: tcp
        condition: selection and java_process
      fields:
        - dst_ip
        - dst_port
        - connection.state
        - network.bytes
  - question: Are there other alerts involving the same source IP across the organization?
    context: Identifies coordinated Log4j exploitation attempts from the same attacker.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          related_ip: '{related.ip}'
        filter:
          document_id: '{soc_id}'
        condition: selection and not filter
      fields:
        - rule.name
        - rule.category
        - src_ip
        - dst_ip
  - question: What is the pattern of UDP traffic from this source IP?
    context: Analyzes whether this represents scanning behavior or targeted exploitation.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
          network.transport: udp
        condition: selection
      fields:
        - dst_ip
        - dst_port
        - network.bytes
        - connection.state_description
  - question: Did lateral movement occur from the target host after the JNDI request?
    context: Determines if successful exploitation led to internal network compromise.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{network.private_ip}'
          dst_port:
          - 445    # SMB
          - 139    # NetBIOS
          - 3389   # RDP
          - 5985   # WinRM HTTP
          - 5986   # WinRM HTTPS
          - 22     # SSH
          - 23     # Telnet
          - 135    # RPC
          - 5900   # VNC
        condition: selection
      fields:
        - src_ip
        - src_port
        - dst_ip
        - dst_port
        - network.transport