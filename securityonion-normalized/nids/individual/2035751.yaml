name: ET EXPLOIT Gitlab Login Attempt with hard-coded password (CVE-2022-1162)
id: 1212253
description: |
  Detects login attempts to GitLab using the hard-coded password "123qweQWE!@#" associated with CVE-2022-1162.
  May trigger on legitimate GitLab usage or security testing of the vulnerability.
type: detection
detection_id: 2035751
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-15
questions:
  - question: What was the complete POST request containing the hard-coded password?
    context: Reveals the full login attempt details and any additional parameters.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this source IP normally access GitLab login pages?
    context: Determines if this represents typical user behavior or external scanning.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What other GitLab URLs were accessed from this source IP?
    context: Identifies reconnaissance or exploitation patterns against the GitLab instance.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains: "gitlab"
        condition: selection
      fields:
        - http.method
        - http.uri
        - http.status_code
        - http.user_agent
  - question: Were there successful authentication events following this attempt?
    context: Assesses whether the CVE-2022-1162 exploitation was successful.
    range: +30m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
          http.uri|contains: "gitlab"
          http.status_code: [200, 302]
        condition: selection
      fields:
        - src_ip
        - http.method
        - http.uri
        - http.status_code
  - question: What User-Agent was used for the GitLab login attempt?
    context: Identifies the tool or browser making the request for attribution.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.user_agent
        - http.method
        - http.uri
  - question: Are other hosts attempting GitLab logins with the same hard-coded password?
    context: Determines scope of CVE-2022-1162 exploitation attempts.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          http.uri|contains: "/users/sign_in"
          http.request_body|contains: "123qweQWE"
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_ip
        - http.user_agent
        - http.status_code
  - question: What other external connections occurred from the GitLab server?
    context: Identifies potential data exfiltration or C2 communications if compromise occurred.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Were any GitLab configuration files accessed after the login attempt?
    context: Assesses post-exploitation file access indicating successful compromise.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{destination.ip}'
          file.path|contains:
            - "gitlab"
            - "config"
            - ".rb"
            - ".yml"
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - User
  - question: Did any processes spawn on the GitLab server following the login attempt?
    context: Identifies command execution resulting from successful exploitation.
    range: +1h
    query: |
      aggregation: false
      logsource:
        category: process_creation
      detection:
        selection:
          host.ip: '{destination.ip}'
        condition: selection
      fields:
        - Image
        - CommandLine
        - ParentImage
        - User
  - question: Are there related alerts involving the same source IP?
    context: Provides broader context of scanning or attack activity.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: alert
      detection:
        selection:
          related_ip: '{related.ip}'
        filter:
          document_id: '{soc_id}'
        condition: selection and not filter
      fields:
        - rule.name
        - rule.category
        - src_ip
        - dst_ip
  - question: What is the timing pattern of GitLab access attempts from this source?
    context: Reveals automated scanning versus manual exploitation attempts.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{related.ip}'
          dst_ip: '{related.ip}'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - dst_port
        - network.protocol
        - event.duration
        - client.ip_bytes
        - server.ip_bytes
        - connection.state_description