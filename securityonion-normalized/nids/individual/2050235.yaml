name: ET INFO Fake Game Cheat Related POST Request
id: 1213690
description: |
  Detects HTTP POST requests to API endpoints with initialization parameters commonly used by game cheat software.
  May trigger on legitimate gaming applications or software with similar initialization patterns.
type: detection
detection_id: 2050235
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-01-19
questions:
  - question: What was the complete POST request containing the cheat initialization parameters?
    context: Reveals the full structure of the request including all initialization fields.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally make POST requests to gaming or cheat-related APIs?
    context: Determines if this represents typical usage patterns for this endpoint.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What process initiated the connection to the cheat API endpoint?
    context: Identifies the application responsible for making the cheat-related request.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What DNS queries preceded this connection to identify the API server?
    context: Shows how the cheat software resolved the API server address.
    range: -5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: dns
      detection:
        selection:
          src_ip: '{source.ip}'
        condition: selection
      fields:
        - dns.query.name
        - dns.query.type_name
        - dns.resolved_ip
  - question: What other external connections occurred from this host after the cheat initialization?
    context: Identifies additional communications that may be part of the cheat software ecosystem.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What executable files were created by the process making these API requests?
    context: Reveals files that may have been downloaded or created by the cheat software.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          ProcessGuid: '{event_data.process.entity_id}'
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - User
  - question: Are other hosts in the network making similar requests to cheat-related APIs?
    context: Determines the scope of cheat software usage across the organization.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What is the pattern of API communication with the cheat server?
    context: Analyzes the frequency and timing of cheat software communications.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{related.ip}'
          dst_ip: '{related.ip}'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - dst_port
        - network.protocol
        - event.duration
        - client.ip_bytes
        - server.ip_bytes
        - connection.state_description
  - question: Did this host attempt to connect to other known cheat or gaming exploit services?
    context: Identifies broader patterns of gaming-related policy violations.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          src_ip: '{source.ip}'
          http.uri|contains:
            - "/api/"
            - "/cheat"
            - "/hack"
            - "/exploit"
            - "/inject"
        cheat_params:
          http.request_body|contains:
            - "type=init"
            - "ver="
            - "hash="
            - "enckey="
            - "ownerid="
        condition: selection and cheat_params
      fields:
        - http.virtual_host
        - http.uri
        - http.method
        - http.user_agent
  - question: Were any game-related processes or files modified around this timeframe?
    context: Shows correlation between cheat API usage and game modifications.
    range: +/-1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{source.ip}'
        game_files:
          file.path|contains:
            - "steam"
            - "game"
            - "epic"
            - "uplay"
            - "origin"
            - "battlenet"
        condition: selection and game_files
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid