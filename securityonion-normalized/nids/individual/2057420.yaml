name: ET MALWARE Observed Win32/Lumma Stealer Related Domain (approvedne.fun in TLS SNI)
id: 1251920
description: |
  Detects TLS connections to approvedne.fun domain associated with Win32/Lumma Stealer malware.
  May trigger on legitimate traffic if domain is repurposed or during security research activities.
type: detection
detection_id: 2057420
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2024-11-13
questions:
  - question: What were the complete TLS connection details to approvedne.fun?
    context: Reveals the specific SSL/TLS handshake characteristics of the Lumma Stealer C2 communication.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: ssl
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - ssl.server_name
        - ssl.version
        - ssl.cipher
        - hash.ja3
  - question: Does this host normally access .fun domains or similar infrastructure?
    context: Determines if connections to uncommon TLD domains represent a change from baseline behavior.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: ssl
      detection:
        selection:
          src_ip: '{source.ip}'
          ssl.server_name|contains: fun
        condition: selection
      fields:
        - src_ip
        - ssl.server_name
  - question: What process initiated the connection to approvedne.fun?
    context: Identifies the application or malware component responsible for the C2 communication.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What is the timing pattern of connections to approvedne.fun?
    context: Analyzes beacon intervals and communication frequency typical of Lumma Stealer C2 protocols.
    range: +/-4h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{related.ip}'
          dst_ip: '{related.ip}'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - dst_port
        - network.protocol
        - event.duration
        - client.ip_bytes
        - server.ip_bytes
        - connection.state_description
  - question: What executable files were created by the process making these connections?
    context: Identifies additional malware components or payloads downloaded from the C2 server.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          ProcessGuid: '{event_data.process.entity_id}'
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - User
  - question: What other external connections occurred from this host?
    context: Identifies additional C2 infrastructure or data exfiltration channels used by Lumma Stealer.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Are other hosts connecting to approvedne.fun or related infrastructure?
    context: Determines the scope of Lumma Stealer infections across the organization.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What IP addresses did approvedne.fun resolve to during this timeframe?
    context: Reveals the C2 infrastructure hosting the Lumma Stealer command server.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: dns
      detection:
        selection:
          dns.query.name|contains: "approvedne.fun"
        condition: selection
      fields:
        - src_ip
        - dns.query.name
        - dns.resolved_ip
  - question: Did any lateral movement occur from this host after the C2 connection?
    context: Assesses whether Lumma Stealer was used as an initial access vector for broader network compromise.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{network.private_ip}'
          dst_port:
          - 445    # SMB
          - 139    # NetBIOS
          - 3389   # RDP
          - 5985   # WinRM HTTP
          - 5986   # WinRM HTTPS
          - 22     # SSH
          - 23     # Telnet
          - 135    # RPC
          - 5900   # VNC
        condition: selection
      fields:
        - src_ip
        - src_port
        - dst_ip
        - dst_port
        - network.transport
  - question: Were any persistence mechanisms established around the time of C2 communication?
    context: Identifies registry modifications used by Lumma Stealer to maintain persistence.
    range: +/-30m
    query: |
      aggregation: false
      logsource:
        category: registry_event
      detection:
        selection:
          host.ip: '{related.ip}'
          TargetObject|contains:
          - Run
          - RunOnce
          - Services
          - Startup
          - Winlogon
          - Explorer
          - Shell
          - AppInit_DLLs
          - Image File Execution Options
          - Class
          - ContextMenuHandlers
          - ShellExecuteHooks
        condition: selection
      fields:
        - User
        - Image
        - ProcessGuid
        - TargetObject
        - Details
  - question: Are there other Lumma Stealer indicators or related malware alerts?
    context: Correlates with additional IOCs and campaign tracking for comprehensive threat assessment.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: Did the host access any credential harvesting or data collection targets?
    context: Identifies browser, email, or application data accessed by Lumma Stealer for credential theft.
    range: +/-2h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          host.ip: '{source.ip}'
          file.path|contains:
            - "\\AppData\\Local\\Google\\Chrome"
            - "\\AppData\\Roaming\\Mozilla\\Firefox"
            - "\\AppData\\Local\\Microsoft\\Edge"
            - "Login Data"
            - "cookies"
            - "Bookmarks"
            - "History"
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
  - question: What domains resolved to the same IP infrastructure as approvedne.fun?
    context: Discovers related domains in the Lumma Stealer campaign infrastructure for threat hunting.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: dns
      detection:
        ip_selection:
          dns.query.name|contains: "approvedne.fun"
        related_domains:
          dns.resolved_ip: '{dns.resolved_ip}'
        filter:
          dns.query.name|contains: "approvedne.fun"
        condition: related_domains and not filter
      fields:
        - dns.query.name
        - dns.resolved_ip
        - src_ip
