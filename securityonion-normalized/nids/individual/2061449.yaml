name: ET MALWARE StealC v2 CnC Checkin (POST)
id: 1231435
description: |
  Detects HTTP POST requests matching StealC v2 malware command and control communication patterns.
  Characterized by specific URI patterns, JSON content, and base64-encoded payload structures.
type: detection
detection_id: 2061449
detection_category: ''
detection_type: nids
contributors:
  - SecurityOnionSolutions
created: 2025-01-15
questions:
  - question: What was the complete HTTP POST request that triggered this StealC detection?
    context: Reveals the full C2 communication pattern including URI, headers, and payload structure.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection:
          community_id: '{network.community_id}'
        condition: selection
      fields:
        - http.method
        - http.useragent
        - http.virtual_host
        - http.uri
        - http.status_code
  - question: Does this host normally make HTTP connections to external web services?
    context: Determines if HTTP POST activity to external servers is typical for this system.
    range: -7d
    query: |
      aggregation: true
      logsource:
        category: network
        service: http
      detection:
        selection:
          dst_ip: '{destination.ip}'
        condition: selection
      fields:
        - dst_ip
  - question: What process initiated the connection to the StealC C2 server?
    context: Identifies the malware binary or compromised application making the request.
    range: +/-15m
    query: |
      aggregation: false
      logsource:
        category: network
      detection:
        selection:
          community_id: '{network.community_id}'
        filter:
          Image|exists: true
        condition: selection and filter
      fields:
        - hostname
        - User
        - Image
        - CommandLine
        - ProcessGuid
  - question: What DNS queries preceded this C2 communication?
    context: Reveals domain resolution activity that led to the StealC server connection.
    range: -5m
    query: |
      aggregation: false
      logsource:
        category: network
        service: dns
      detection:
        selection:
          src_ip: '{source.ip}'
        condition: selection
      fields:
        - dns.query.name
        - dns.query.type_name
        - dns.resolved_ip
  - question: What other external connections occurred from this host?
    context: Identifies additional C2 channels or data exfiltration endpoints used by StealC.
    range: +/-10m
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{source.ip}'
        private:
          dst_ip|cidr:
            - '10.0.0.0/8'
            - '127.0.0.0/8'
            - '172.16.0.0/12'
            - '192.168.0.0/16'
            - '169.254.0.0/16'
        filter:
          dst_ip: '{network.public_ip}'
        condition: selection and not (private or filter)
      fields:
        - dst_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: Are other hosts connecting to the same StealC infrastructure?
    context: Determines the scope of StealC infections across the environment.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        filter:
          src_ip: '{source.ip}'
        condition: selection and not filter
      fields:
        - src_ip
        - dst_port
        - network.transport
        - connection.state_description
  - question: What executable files were created by the process making these connections?
    context: Identifies StealC payloads, updates, or additional malware components.
    range: +/-1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection:
          ProcessGuid: '{event_data.process.entity_id}'
        condition: selection
      fields:
        - file.path
        - file.name
        - Image
        - User
  - question: What is the timing pattern of connections to this C2 server?
    context: Analyzes StealC beacon intervals and communication frequency.
    range: +/-6h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{related.ip}'
          dst_ip: '{related.ip}'
        condition: selection
      fields:
        - src_ip
        - dst_ip
        - dst_port
        - network.protocol
        - event.duration
        - client.ip_bytes
        - server.ip_bytes
        - connection.state_description
  - question: Did any lateral movement occur from this host?
    context: Determines if StealC was used as an initial access vector for broader compromise.
    range: +2h
    query: |
      aggregation: false
      logsource:
        category: network
        service: connection
      detection:
        selection:
          src_ip: '{network.private_ip}'
          dst_port:
          - 445    # SMB
          - 139    # NetBIOS
          - 3389   # RDP
          - 5985   # WinRM HTTP
          - 5986   # WinRM HTTPS
          - 22     # SSH
          - 23     # Telnet
          - 135    # RPC
          - 5900   # VNC
        condition: selection
      fields:
        - src_ip
        - src_port
        - dst_ip
        - dst_port
        - network.transport
  - question: Were any persistence mechanisms established on this system?
    context: Identifies registry modifications used by StealC for maintaining access.
    range: +/-1h
    query: |
      aggregation: false
      logsource:
        category: registry_event
      detection:
        selection:
          host.ip: '{related.ip}'
          TargetObject|contains:
          - Run
          - RunOnce
          - Services
          - Startup
          - Winlogon
          - Explorer
          - Shell
          - AppInit_DLLs
          - Image File Execution Options
          - Class
          - ContextMenuHandlers
          - ShellExecuteHooks
        condition: selection
      fields:
        - User
        - Image
        - ProcessGuid
        - TargetObject
        - Details
  - question: Are there other StealC-related alerts across the organization?
    context: Reveals the campaign scope and identifies related malware activity.
    range: +/-24h
    query: |
      aggregation: true
      logsource:
        category: alert
      detection:
        selection:
          dst_ip: '{network.public_ip}'
        condition: selection
      fields:
        - src_ip
        - rule.name
        - rule.category
  - question: Did this host access any credential stores or browsers before the C2 communication?
    context: Identifies potential data sources targeted by the StealC information stealer.
    range: -1h
    query: |
      aggregation: false
      logsource:
        category: file_event
      detection:
        selection_host:
          host.ip: '{source.ip}'
        selection_paths:
          file.path|contains:
            - "\\AppData\\Local\\Google\\Chrome\\User Data"
            - "\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles"
            - "\\AppData\\Local\\Microsoft\\Edge\\User Data"
            - "\\AppData\\Local\\BraveSoftware\\Brave-Browser\\User Data"
            - "\\Cookies"
            - "\\Login Data"
            - "\\Web Data"
            - "\\key4.db"
            - "\\logins.json"
        condition: selection_host and selection_paths
      fields:
        - file.path
        - file.name
        - Image
        - ProcessGuid
  - question: What other hosts are making POST requests with similar URI patterns?
    context: Hunts for additional StealC infections using the same C2 infrastructure pattern.
    range: +/-24h
    query: |
      aggregation: false
      logsource:
        category: network
        service: http
      detection:
        selection_method:
          http.method: "POST"
        selection_uri:
          http.uri|re: "^/[a-f0-9]{16}\\.php$"
        selection_content:
          http.request.body.content|contains: "application/json"
        filter_known:
          src_ip: '{source.ip}'
        condition: selection_method and selection_uri and selection_content and not filter_known
      fields:
        - src_ip
        - dst_ip
        - http.uri
        - http.user_agent